{
  "openapi": "3.1.0",
  "info": {
    "title": "Twilio Communications API",
    "version": "preview",
    "contact": {
      "name": "Twilio",
      "url": "https://www.twilio.com"
    },
    "x-logo": {
      "url": "/docs.svg"
    },
    "description": "A comprehensive communications API for connecting people through software.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "servers": [
    {
      "url": "https://comms.twilio.com/preview",
      "description": "Twilio Communications API preview"
    }
  ],
  "security": [
    {
      "account_id_auth_token": []
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "*Use `Contacts` to build and maintain a reliable directory of customers\nwith validated communications addresses and identity profiles.*"
    },
    {
      "name": "Audiences",
      "description": "*Build up `Audiences` to broadcast communications to larger audiences*.\n\n - Leverage them with `Messages`, `Emails`, `PushNotifications`\n    and `Communications`."
    },
    {
      "name": "Engagements",
      "description": "*Use `Engagements` to track interactions and meaningful connections between a brand and its Contacts.\nEngagements are actions performed by the customer of a brand that correlate to a positive interaction.*\n\n- For example, a link click is one of the most common engagement that Twilio tracks. Engagements are used to measure\nthe effectiveness of a communication and to understand the customer's behavior.\n\n- Actions taken by end-users on communications you send generate Engagements, e.g. email_open, but the Email itself\n  and events generated by Twilio, such as the send of a message or an email, are not considered Engagements.\n  Engagements are end-user driven, resulting from the end-user's interaction with the communication."
    },
    {
      "name": "Messages",
      "description": "*Use `Messages` to send and receive RCS, SMS and MMS, Group MMS, and WhatsApp messages.*\n\n*Send with precise control over every aspect of your message\n or let Twilio share control and up-level your messaging with data-driven optimizations.*\n\nMessages supports:\n - Sending a Message to a single recipient\n - Sending Messages to many recipients in a single request\n - Sending Group Messages to facilitate communication between multiple people\n - Sending to both stored Contacts and/or directly specified messaging addresses (e.g. phone number)\n - Sending Messages to Contacts with multiple communication addresses: Twilio will choose the best channel.\n - Sending Messages to stored Audiences with per-recipient content personalization\n - Sending Messages with templated content that reference attributes of your stored Contacts\n - Sending Messages with rich content\n - Sending Messages with automatic suppression based on a Contact's preferences\n - Sending Messages with shortened, branded links that support click tracking.\n - Sending Messages scheduled for future delivery.\n - Receiving inbound Messages sent to your Twilio phone numbers.\n - Maintaining history of distinct communication sessions including both inbound and outbound Messages."
    },
    {
      "name": "Emails",
      "description": "*Use `Emails` to send and receive email with Twilio SendGrid.*\n*Use `Domains` to verify ownership and configure DNS for your domain name for sending `Emails`.*\n*Use `Email Senders` to set up a default address and name to send 'from' and to enable\n email for sending with `Communications`.*\n\nEmails supports:\n - Sending an Email to a single recipient\n - Sending Emails to many recipients in a single request\n - Sending to both stored Contacts and/or directly specified email addresses\n - Sending Emails to stored Audiences with per-recipient content personalization\n - Sending Emails with merged content that reference attributes of your stored Contacts\n - Sending Emails with branded links that support click tracking.\n - Sending Emails scheduled for future delivery.\n - Receiving inbound Email replies and relaying the event to you for handling."
    },
    {
      "name": "PushNotifications",
      "description": "ðŸš§ *Use `PushNotifications` to send push notifications to your mobile apps\nvia Firebase Cloud Messaging and Apple Push Notification services\nas well as other push-enabled services.*"
    },
    {
      "name": "Communications",
      "description": "ðŸš§ *Use `Communications` to send and receive communications across all channels of all communication types.\nReach each and every customer with personalized content, on the right channel, at the optimal time, at scale.\nJust send it!*"
    },
    {
      "name": "Agents",
      "description": "*Use `Agents` to build the sending and receiving identities that represent your business and applications.*\n\n- For 'outbound' communications, it is used as the sender of the communication (`from` field).\n\n- For 'inbound' communications to your app (sent by a Contact/end-user), it is used as the recipient (`to` field).\n\n- An Agent represents existing inventory created and setup in other APIs, such as Phone Numbers.\n\n- Use `AgentPools` to organize your `Agents` into logical groups to build multi-channel identities\nwith multiple types of communications addresses (phone numbers, short codes, email addresses)."
    },
    {
      "name": "AgentPools",
      "description": "*Use `Agents` to build the sending and receiving identities that represent your business and applications.*\n\n- For 'outbound' communications, it is used as the sender of the communication (`from` field).\n\n- For 'inbound' communications to your app (sent by a Contact/end-user), it is used as the recipient (`to` field).\n\n- An Agent represents existing inventory created and setup in other APIs, such as Phone Numbers.\n\n- Use `AgentPools` to organize your `Agents` into logical groups to build multi-channel identities\nwith multiple types of communications addresses (phone numbers, short codes, email addresses)."
    },
    {
      "name": "Domains",
      "description": "ðŸš§ *Use `Domains` to authenticate and manage domain names (via DNS) for sending `Email` and\n  for sending branded links  in your communications.*\n\n  *Twilio will generate and manage SSL certificates on your behalf for sending communications\n    with branded https links - no proxy required!*\n\n Domain capabilities include:\n  - Configure a Domain with `email` capability to enable creating\n    Email Senders that can send 'from' your custom domain name.\n\n  - Configure a Domain with `links` capability to enable Twilio to wrap links in your\n    communications with branded links that support click tracking.\n\n  - Use branded links to shorten your original URLs for sending concise `Messages`\n\n  - Use `Engagements` to see how many of your recipients are engaging with your links."
    },
    {
      "name": "Links",
      "description": "ðŸš§ *Use `Links` to shorten long URLs and track clicks for your communications.*\n\n  *Requires Twilio Domain to be configured with `links` capability!*\n\n  Link capabilities include:\n  - Create a wrapped URL for a long URL, usually shorter and fits in a message.\n  - List wrapped URLs for a given communication.\n  - Fetch a wrapped URL by its id."
    }
  ],
  "paths": {
    "/Contacts": {
      "post": {
        "summary": "Create Contacts",
        "operationId": "CreateContacts",
        "description": "This operation creates Contacts. A contact must have at least one address or a user_identifier supplied in order to be created.",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateContactsRequest",
                "type": "object",
                "required": [
                  "contacts"
                ],
                "properties": {
                  "contacts": {
                    "title": "CreateContactsRequestContacts",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "CreateContactsRequestContactsItem",
                      "description": "Specify the Contact including their communications addresses and descriptors of their identity.",
                      "properties": {
                        "addresses": {
                          "type": "array",
                          "description": "The communications addresses of the Contact (phone number, email, push device token).",
                          "items": {
                            "$ref": "#/components/schemas/ContactAddress"
                          }
                        },
                        "first_name": {
                          "type": "string",
                          "description": "The first name of the Contact."
                        },
                        "last_name": {
                          "type": "string",
                          "description": "The last name of the Contact."
                        },
                        "display_name": {
                          "type": "string",
                          "description": "The name to associate with the address for sending and receiving communications,\nvisible for some types of communications like email."
                        },
                        "time_zone": {
                          "description": "The time zone of the Contact. e.g. `+08:00`. Use `+00:00` for UTC.",
                          "type": "string",
                          "example": "+08:00"
                        },
                        "user_identifier": {
                          "$ref": "#/components/schemas/UserIdentifier"
                        },
                        "external_identifier": {
                          "$ref": "#/components/schemas/ExternalIdentifier"
                        },
                        "location": {
                          "$ref": "#/components/schemas/ContactLocation"
                        },
                        "date_of_birth": {
                          "description": "Contact's date of birth.",
                          "format": "YYYY-MM-DD",
                          "type": "string"
                        },
                        "tags": {
                          "$ref": "#/components/schemas/Tags"
                        },
                        "custom_fields": {
                          "$ref": "#/components/schemas/ContactCustomFields"
                        }
                      }
                    },
                    "minItems": 1
                  }
                }
              },
              "examples": {
                "CreateAContactWithAnEmailAddressPhoneNumberAndCustomFields": {
                  "summary": "Create a Contact with an email address, phone number and custom fields",
                  "value": {
                    "contacts": [
                      {
                        "first_name": "Ivan",
                        "last_name": "Lee",
                        "display_name": "Ivan Lee",
                        "user_identifier": "3c35422849fea46d37b099ae59fae22c",
                        "external_identifier": "006E0000004TguX",
                        "addresses": [
                          {
                            "channel": "phone",
                            "address": "+37259000000"
                          },
                          {
                            "channel": "email",
                            "address": "ilee@example.com"
                          }
                        ],
                        "custom_fields": {
                          "favorite_color": {
                            "value": "purple"
                          },
                          "favorite_number": {
                            "value": 42
                          },
                          "is_favorite_color_purple": {
                            "value": true
                          },
                          "colors": {
                            "value": [
                              "purple",
                              "blue",
                              "green"
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                "CreateAContactWithAnEmailAddressAndPhoneNumber": {
                  "summary": "Create a Contact with an email address and phone number",
                  "value": {
                    "contacts": [
                      {
                        "first_name": "Don",
                        "last_name": "Conama",
                        "display_name": "Don",
                        "user_identifier": "+37259000011",
                        "external_identifier": "006E0000004TguX",
                        "addresses": [
                          {
                            "channel": "phone",
                            "address": "+37259000011"
                          },
                          {
                            "channel": "email",
                            "address": "don.conama@example.com"
                          }
                        ],
                        "tags": {
                          "shirt_size": "X-Large"
                        }
                      }
                    ]
                  }
                },
                "CreateAContactWithAPushDeviceTokenAndSmsAddressForAMobileApp": {
                  "summary": "Create a Contact with a push device token and sms address for a mobile app",
                  "value": {
                    "contacts": [
                      {
                        "first_name": "David",
                        "last_name": "Pletnjov",
                        "display_name": "David Pletnjov",
                        "addresses": [
                          {
                            "channel": "push",
                            "address": "comms_deviceregistrations_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          {
                            "channel": "phone",
                            "address": "+37259000022"
                          }
                        ]
                      }
                    ]
                  }
                },
                "CreateAContactWithPushDeviceTokensFor2DifferentMobileApps": {
                  "summary": "Create a Contact with push device tokens for 2 different mobile apps",
                  "value": {
                    "contacts": [
                      {
                        "first_name": "David",
                        "last_name": "Pletnjov",
                        "display_name": "David Pletnjov",
                        "addresses": [
                          {
                            "channel": "push",
                            "address": "comms_deviceregistrations_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          {
                            "channel": "push",
                            "address": "comms_deviceregistrations_8fzqspvwy6nq801h9krwprkeee"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Contacts",
        "operationId": "ListContacts",
        "description": "This operation fetches a paginated list of Contacts.",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Contacts created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Contacts created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "updated_date",
            "description": "Filter to Contacts updated after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter to Contacts by operation Id.",
            "schema": {
              "$ref": "#/components/schemas/OperationId"
            }
          },
          {
            "in": "query",
            "name": "contact_ids",
            "description": "List of contact ids for filtering the contacts.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactId"
              },
              "minItems": 1,
              "maxItems": 100
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Match contacts by one or many tags. If more than one tag is specified in the query, the search will return contacts that have all the tags.\nFor Example:  ``` GET /Contacts?tags=age_group:20s;industry:engineering; ```",
            "schema": {
              "$ref": "#/components/schemas/TagsString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListContactsResponse",
                  "type": "object",
                  "properties": {
                    "contacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contact"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "contacts",
                    "pagination"
                  ]
                },
                "examples": {
                  "FirstPageOfContactsForListReadWithNoFilter": {
                    "summary": "First page of Contacts for list read with no filter",
                    "value": {
                      "contacts": [
                        {
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "first_name": "Jane",
                          "last_name": "Doe",
                          "display_name": "Jane Doe",
                          "user_identifier": "3c35422849fea46d37b099ae59fae22c",
                          "external_identifier": "006E0000004TguX",
                          "addresses": [
                            {
                              "channel": "email",
                              "address": "janedoe@example.com"
                            }
                          ],
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "first_name": "Don",
                          "last_name": "Conama",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Contacts/Operations/comms_operation_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "display_name": "Don Conama",
                          "user_identifier": "don.conama@example.com",
                          "external_identifier": "006E0000004TguX",
                          "addresses": [
                            {
                              "channel": "email",
                              "address": "don.conama@example.com"
                            }
                          ],
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null,
                          "custom_fields": {
                            "favorite_color": {
                              "value": "purple"
                            },
                            "favorite_number": {
                              "value": 42
                            },
                            "is_favorite_color_purple": {
                              "value": true
                            }
                          }
                        }
                      ],
                      "pagination": {
                        "next": "page_01h9krwprkeee8fzqspvwy6nq9",
                        "self": "https://comms.twilio.com/v1/Contacts"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Contacts/{contact_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ContactId"
          },
          "name": "contact_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch a Contact",
        "operationId": "FetchSingleContact",
        "description": "This operation fetches a single contact using its Id.",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                },
                "examples": {
                  "FetchContact": {
                    "summary": "Fetch Contact",
                    "value": {
                      "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                      "first_name": "Ivan",
                      "last_name": "Lee",
                      "display_name": "Ivan Lee",
                      "user_identifier": "3c35422849fea46d37b099ae59fae22c",
                      "external_identifier": "006E0000004TguX",
                      "addresses": [
                        {
                          "channel": "phone",
                          "address": "+37259000000"
                        },
                        {
                          "channel": "email",
                          "address": "ilee@example.com"
                        },
                        {
                          "channel": "push",
                          "address": "limonade_app"
                        }
                      ],
                      "created_at": "2019-08-24T14:15:22Z",
                      "updated_at": "2023-10-02T11:20:00Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "patch": {
        "summary": "Update a Contact",
        "operationId": "UpdateContact",
        "description": "This operation partially updates a Contact",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateContactRequest",
                "type": "object",
                "nullable": true,
                "properties": {
                  "first_name": {
                    "description": "The first name of the Contact.",
                    "type": "string"
                  },
                  "last_name": {
                    "description": "The last name of the Contact.",
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "The name associated with the address for sending and receiving communications, visible for some types of communications like email."
                  },
                  "time_zone": {
                    "description": "The time zone of the Contact. e.g. `+08:00`. Use `+00:00` for UTC.",
                    "type": "string",
                    "example": "+08:00"
                  },
                  "addresses": {
                    "title": "UpdateContactAddresses",
                    "description": "This replaces the `addresses` array. \nLeave `null` to leave addresses unchanged.\nSet to empty array to remove all addresses.\nTo add/remove individual addresses use the Contact Addresses API endpoints.",
                    "type": "array",
                    "nullable": true,
                    "items": {
                      "$ref": "#/components/schemas/ContactAddress"
                    }
                  },
                  "tags": {
                    "$ref": "#/components/schemas/TagsNullable"
                  },
                  "custom_fields": {
                    "$ref": "#/components/schemas/ContactCustomFieldsNullable"
                  }
                }
              },
              "examples": {
                "UpdateContactAddresses": {
                  "summary": "Update Contact addresses",
                  "value": {
                    "addresses": [
                      {
                        "channel": "phone",
                        "address": "+37259000000"
                      },
                      {
                        "channel": "email",
                        "address": "ipletnjov@example.com"
                      }
                    ]
                  }
                },
                "UpdateContactTags": {
                  "summary": "Update Contact tags",
                  "value": {
                    "tags": {
                      "shirt_size": "X-Large"
                    }
                  }
                },
                "UpdateContactCustomFields": {
                  "summary": "Update Contact custom fields",
                  "value": {
                    "custom_fields": {
                      "favorite_color": {
                        "value": "purple"
                      },
                      "favorite_number": {
                        "value": 42
                      },
                      "is_favorite_color_purple": {
                        "value": true
                      },
                      "colors": {
                        "value": [
                          "purple",
                          "blue",
                          "green"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Contact",
        "operationId": "DeleteContact",
        "description": "This operation deletes a Contact",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Contacts/{contact_id}/Addresses": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ContactId"
          },
          "name": "contact_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List of Contact Addresses",
        "operationId": "ListContactAddresses",
        "description": "This operation fetches list of contact addresses",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListContactAddressesResponse",
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "title": "ListContactAddressesResponseAddresses",
                      "description": "List of the provided `Contact`'s communication addresses",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactAddress"
                      }
                    }
                  },
                  "required": [
                    "addresses"
                  ]
                },
                "examples": {
                  "ListOfContactAddresses": {
                    "summary": "List of contact addresses",
                    "value": {
                      "addresses": [
                        {
                          "channel": "email",
                          "address": "beetlejuice@example.com"
                        },
                        {
                          "channel": "phone",
                          "address": "+37259000000"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "post": {
        "summary": "Add Addresses to the Contact",
        "operationId": "AddContactAddresses",
        "description": "This operation adds addresses to the contact",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AddContactAddressesRequest",
                "type": "object",
                "properties": {
                  "addresses": {
                    "title": "AddContactAddressesRequestAddresses",
                    "description": "A list of communication addresses to add to the `Contact`",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ContactAddress"
                    },
                    "minItems": 1
                  }
                },
                "required": [
                  "addresses"
                ]
              },
              "examples": {
                "AddAddressesToTheContact": {
                  "summary": "Add addresses to the Contact",
                  "value": {
                    "addresses": [
                      {
                        "channel": "phone",
                        "address": "+37259000000"
                      }
                    ]
                  }
                },
                "AddMultipleAddressesToTheContact": {
                  "summary": "Add multiple addresses to the Contact",
                  "value": {
                    "addresses": [
                      {
                        "channel": "phone",
                        "address": "+37259000000"
                      },
                      {
                        "channel": "push",
                        "address": "limonade_app"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Addresses from the Contact",
        "operationId": "DeleteContactAddresses",
        "description": "This operation deletes Contact Addresses",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "DeleteContactAddressesRequest",
                "type": "object",
                "properties": {
                  "addresses": {
                    "title": "DeleteContactAddressesRequestAddresses",
                    "type": "array",
                    "items": {
                      "title": "DeleteContactAddressesRequestAddressItem",
                      "type": "object",
                      "description": "A list of communication addresses to remove from the `Contact`",
                      "properties": {
                        "channel": {
                          "$ref": "#/components/schemas/ContactCommunicationChannel"
                        },
                        "address": {
                          "$ref": "#/components/schemas/Address"
                        }
                      }
                    },
                    "minItems": 1
                  }
                },
                "required": [
                  "addresses"
                ]
              },
              "examples": {
                "DeleteContactPhoneAddress": {
                  "summary": "Delete Contact phone address",
                  "value": {
                    "addresses": [
                      {
                        "channel": "phone",
                        "address": "+37259000000"
                      }
                    ]
                  }
                },
                "DeleteAllContactEmailAddresses": {
                  "summary": "Delete all email addresses for Contact",
                  "value": {
                    "addresses": [
                      {
                        "channel": "email"
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Contacts/{contact_id}/Tags": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ContactId"
          },
          "name": "contact_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List of Contact Tags",
        "operationId": "ListContactTags",
        "description": "This operation fetches list of contact tags",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListContactTagsResponse",
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "$ref": "#/components/schemas/Tags"
                    }
                  },
                  "required": [
                    "tags"
                  ]
                },
                "examples": {
                  "ListOfContactTags": {
                    "summary": "List of contact tags",
                    "value": {
                      "tags": {
                        "campaign1": "fb-leads-ad-7",
                        "campaign2": "fb-leads-ad-8"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "post": {
        "summary": "Add Tags to the Contact",
        "operationId": "AddContactTags",
        "description": "This operation adds tags to the contact",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AddContactTagRequest",
                "type": "object",
                "properties": {
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "tags"
                ]
              },
              "examples": {
                "AddTagsToTheContact": {
                  "summary": "Add tags to the Contact",
                  "value": {
                    "tags": {
                      "campaign1": "fb-leads-ad-7",
                      "campaign2": "fb-leads-ad-8"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Tags from the Contact",
        "operationId": "DeleteContactTags",
        "description": "This operation deletes Contact Tags",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "DeleteContactTagsRequest",
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "description": "The list of tag keys to be deleted from the contact",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "examples": {
                "DeleteContactTags": {
                  "summary": "Delete Contact tags",
                  "value": {
                    "tags": [
                      "fb-leads-ad-7",
                      "fb-leads-ad-8"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Contacts/Search": {
      "post": {
        "summary": "Search Contacts",
        "operationId": "SearchContacts",
        "description": "Search for contacts based on the specified criteria.",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SearchContactsResponse",
                  "type": "object",
                  "properties": {
                    "contacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contact"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "contacts",
                    "pagination"
                  ]
                },
                "examples": {
                  "PageOfContactsForTheSearch": {
                    "summary": "First page of Contacts for the search request",
                    "value": {
                      "contacts": [
                        {
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "first_name": "Jane",
                          "last_name": "Doe",
                          "display_name": "Jane Doe",
                          "user_identifier": "3c35422849fea46d37b099ae59fae22c",
                          "external_identifier": "006E0000004TguX",
                          "addresses": [
                            {
                              "channel": "email",
                              "address": "jane.doe@example.com"
                            }
                          ],
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "first_name": "john",
                          "last_name": "doe",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Contacts/Operations/comms_operation_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "display_name": "John Doe",
                          "user_identifier": "john.doe@example.com",
                          "external_identifier": "006E0000004TguX",
                          "addresses": [
                            {
                              "channel": "email",
                              "address": "beetlejuice@example.com"
                            }
                          ],
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": "page_01h9krwprkeee8fzqspvwy6nq9",
                        "self": "https://comms.twilio.com/v1/Contacts/Search"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SearchContactsRequest",
                "type": "object",
                "properties": {
                  "channels": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/CommunicationChannel"
                    },
                    "description": "Match contacts with by their communications channel of the Contact (phone number, email, push device token). If more than one channel is specified in the query, the search will return contacts that have all the channels."
                  },
                  "address": {
                    "type": "string",
                    "description": "Match contacts with the exact address specified."
                  },
                  "user_identifier": {
                    "$ref": "#/components/schemas/UserIdentifier"
                  },
                  "first_name": {
                    "description": "Match contacts by their first name. This field is fuzzy and case insensitive. If you search for \"JohN\", you will get \"John\", \"Johnny\", \"Johnathan\", etc. If you search for \"tan\", you will get \"Johnathan\", \"Stanley\", etc. You must specify at least three characters to begin the search.",
                    "type": "string",
                    "minLength": 3
                  },
                  "last_name": {
                    "description": "Match contacts by their last name. This field is fuzzy and case insensitive, so if you search for \"cOn\", you will get \"Conama\", \"Conan\", \"Conrad\", etc. If you search for \"mon\", you will get \"Montoya\", \"Lemon\", etc. You must specify at least three characters to begin the search.",
                    "type": "string",
                    "minLength": 3
                  },
                  "tags": {
                    "description": "Match contacts by one or many tags. If more than one tag is specified, the search will return contacts that have all the tags.",
                    "$ref": "#/components/schemas/Tags"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Contacts/Operations": {
      "get": {
        "summary": "List Contact Operations",
        "operationId": "ListContactOperations",
        "description": "This operation fetches a paginated list of Contact Operations.",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/OperationStatus"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListContactOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "description": "A list of Contact Operations.",
                      "items": {
                        "$ref": "#/components/schemas/ContactOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Contacts/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/OperationId"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch a Contact Operation",
        "operationId": "FetchContactOperation",
        "description": "This operation fetches a single Contact Operation using its Id.",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactOperation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Contacts/Fields": {
      "post": {
        "summary": "Create New Contact Custom Field",
        "operationId": "CreateContactCustomField",
        "description": "Create a new Contact Custom Field.",
        "tags": [
          "Contacts"
        ],
        "requestBody": {
          "description": "This operation creates a new Contact Custom Field.",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/ContactFieldString"
                  },
                  {
                    "$ref": "#/components/schemas/ContactFieldNumber"
                  },
                  {
                    "$ref": "#/components/schemas/ContactFieldBoolean"
                  },
                  {
                    "$ref": "#/components/schemas/ContactFieldStringArray"
                  },
                  {
                    "$ref": "#/components/schemas/ContactFieldEnum"
                  }
                ]
              },
              "examples": {
                "StringCustomField": {
                  "summary": "Create a contact custom field of type string",
                  "value": {
                    "name": "favorite_color",
                    "type": "string"
                  }
                },
                "BooleanCustomField": {
                  "summary": "Create a contact custom field of type boolean",
                  "value": {
                    "name": "is_purple_my_favorite_color",
                    "type": "boolean"
                  }
                },
                "NumberCustomField": {
                  "summary": "Create a contact custom field of type number",
                  "value": {
                    "name": "favorite_number",
                    "type": "number"
                  }
                },
                "EnumCustomField": {
                  "summary": "Create a contact custom field of type enum",
                  "value": {
                    "name": "favorite_sport",
                    "type": "enum",
                    "values": [
                      "soccer",
                      "football",
                      "baseball",
                      "hockey",
                      "basketball",
                      "pickle ball"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "get": {
        "summary": "List Contact Fields",
        "operationId": "ListContactFields",
        "description": "List all contact fields, both custom and standard.",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListContactsFieldsResponse",
                  "type": "object",
                  "properties": {
                    "fields": {
                      "description": "List of standard contact fields, these fields are always present.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactStandardField"
                      }
                    },
                    "custom_fields": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactCustomField"
                      },
                      "maxItems": 10
                    }
                  }
                },
                "examples": {
                  "GetContactsFields": {
                    "summary": "Get Contact Fields",
                    "value": {
                      "fields": [
                        {
                          "name": "first_name",
                          "type": "string",
                          "is_filterable": true
                        },
                        {
                          "name": "last_name",
                          "type": "string",
                          "is_filterable": true
                        }
                      ],
                      "custom_fields": [
                        {
                          "id": "comms_customfield_01h9krwprkeee8fzqspvwy6nq8",
                          "name": "favorite_color",
                          "type": "string",
                          "values": [],
                          "is_filterable": false,
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2023-10-02T11:20:00Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_customfield_01h9krwprkeee8fzqspvwy6nq9",
                          "name": "is_purple_my_favorite_color",
                          "type": "boolean",
                          "values": [],
                          "is_filterable": false,
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2023-10-02T11:20:00Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_customfield_01h9krwprkeee8fzqspvwy6nq7",
                          "name": "favorite_number",
                          "type": "string",
                          "values": [],
                          "is_filterable": false,
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2023-10-02T11:20:00Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_customfield_01h9krwprkeee8fzqspvwy6nq6",
                          "name": "favorite_sports",
                          "type": "enum",
                          "values": [
                            "soccer",
                            "football",
                            "baseball",
                            "hockey",
                            "basketball",
                            "pickle ball"
                          ],
                          "is_filterable": false,
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2023-10-02T11:20:00Z",
                          "deleted_at": null
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Contacts/Fields/{custom_field_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/ContactCustomFieldId"
          },
          "name": "custom_field_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch a Contact Field",
        "operationId": "FetchSingleContactField",
        "description": "This operation fetches a single contact field using its Id. *Currently it's only applicable to custom fields.*",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCustomField"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "patch": {
        "summary": "Update a Contact Custom Field",
        "operationId": "UpdateContactCustomField",
        "description": "This operation partially updates a Contact Custom Field",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateContactCustomFieldRequest",
                "type": "object",
                "properties": {
                  "values": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "examples": {
                "UpdateContactCustomFieldValues": {
                  "summary": "Update Contact Custom Field values",
                  "value": {
                    "values": [
                      "purple",
                      "red",
                      "green"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a Contact Custom Field",
        "operationId": "DeleteContactCustomField",
        "description": "This operation deletes a Contact Custom Field.",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Audiences": {
      "post": {
        "summary": "Create an Audience",
        "operationId": "CreateAudience",
        "description": "This operation creates an Audience. There are three different types of audiences.\n- **Static Audience** - This is the standard type of audience. It is created with a name,\n  optionally some tags and then Contacts are manually added or removed from it.\n\n- **Dynamic Audience** - This is an audience whose Contact list is made up based upon a filter.\n  The filter is required and the results of the filter are the audience. It is not possible to\n  manually add/remove contacts to this audience. When you go to list the contacts on this\n  audience they are a close-to-real-time representation of the results of the filter. This means\n  that if the audience has a filter where  `favorite_color = 'purple'` and that field is set\n  on a new contact it should appear in the audience as soon as possible. The filter for this\n  audience is saved on the audience and can be viewed from the API.\n\n  Filters can contain the standard fields: `created_at`, `updated_at`, `addresses.channel`, `location.city`,\n  `location.state`, `location.country_code`. Filters can also check for the presence of tags by key\n  `Contact.tags = 'NAMER'`, and they can use custom fields that are marked as `is_filterable = true`.\n\n\n- **Snapshot Audience** - This behaves like the default audience after it has been created, but\n  it allows for a powerful way to pre-populate the audience with contacts upon creation.\n  This is done by providing a filter when creating the audience and setting the snapshot field\n  to true. The contacts that match the filter will be added to the list, but if a contact matches\n  later to the filter it will need to be added manually. Contacts can be added and removed manually\n  to the list after they have been created. The filter for this audience is not saved on the audience\n  as it is a one time operation.\n\n  Filters can contain the standard fields: `created_at`, `updated_at`, `addresses.channel`, `location.city`,\n  `location.state`, `location.country_code`. Filters can also check for the presence of tags by key\n  `Contact.tags = 'NAMER'`, and they can use custom fields that are marked as `is_filterable = true`.",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateAudienceRequest",
                "type": "object",
                "description": "This operation creates Audiences.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A name for the Audience."
                  },
                  "filter": {
                    "$ref": "#/components/schemas/AudienceFilter"
                  },
                  "snapshot": {
                    "type": "boolean",
                    "description": "If true, the Audience will be created with the current Contacts that match the filter.\n*The audience will not be updated as contacts change in the future and the filter is not saved for reference later.*"
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "examples": {
                "CreateAudience": {
                  "summary": "Create Audience",
                  "value": {
                    "name": "FB Lead Ads - New Sign Ups",
                    "tags": {
                      "campaign": "fb-leads-ad-7"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Audiences",
        "operationId": "ListAudiences",
        "description": "This operation fetches a paginated list of Audiences.",
        "tags": [
          "Audiences"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Audiences created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Audiences created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter to Audiences by operation Id.",
            "schema": {
              "$ref": "#/components/schemas/OperationId"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Match audiences by one or many tags. If more than one tag is specified in the query, the search will return audiences that have all the tags.\nFor example: ``` GET /Audiences?tags=age_group:20s;industry:engineering; ```",
            "schema": {
              "$ref": "#/components/schemas/TagsString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAudiencesResponse",
                  "type": "object",
                  "properties": {
                    "audiences": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Audience"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "audiences",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListAudiences": {
                    "summary": "List Audiences",
                    "value": {
                      "audiences": [
                        {
                          "id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8",
                          "name": "Repeat Buyers",
                          "total_contacts": 1337,
                          "tags": {
                            "country_code": "US"
                          },
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_audience_01h9krwprkeee8fzqspvwy6nq9",
                          "name": "Technology & Finance Contacts",
                          "total_contacts": 78,
                          "filter": "Contact.location.country_code == 'US' AND Contact.custom_fields.industry IN('Technology', 'Finance')",
                          "tags": {},
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Audiences"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Audiences/{audience_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AudienceId"
          },
          "name": "audience_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an Audience",
        "operationId": "FetchSingleAudience",
        "description": "This operation fetches a single Audience using its Id.",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Audience"
                },
                "examples": {
                  "StaticAudience": {
                    "summary": "Static Audience",
                    "value": {
                      "id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8",
                      "name": "Repeat Buyers",
                      "total_contacts": 1337,
                      "tags": {
                        "country_code": "US"
                      },
                      "created_at": "2023-08-24T14:15:22Z",
                      "updated_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "DynamicAudience": {
                    "summary": "Dynamic Audience",
                    "value": {
                      "id": "comms_audience_01h9krwprkeee8fzqspvwy6nq9",
                      "name": "Technology & Finance Contacts",
                      "total_contacts": 78,
                      "filter": "Contact.location.country_code == 'US' AND Contact.custom_fields.industry IN('Technology', 'Finance')",
                      "tags": {},
                      "created_at": "2023-08-24T14:15:22Z",
                      "updated_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "patch": {
        "summary": "Update an Audience",
        "operationId": "UpdateAudience",
        "description": "This operation partially updates an Audience",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateAudienceRequest",
                "type": "object",
                "nullable": true,
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "filter": {
                    "$ref": "#/components/schemas/AudienceFilter"
                  },
                  "tags": {
                    "$ref": "#/components/schemas/TagsNullable"
                  }
                }
              },
              "examples": {
                "UpdateAudienceSName": {
                  "summary": "Update Audience's name",
                  "value": {
                    "name": "New Name"
                  }
                },
                "UpdateAudienceSTags": {
                  "summary": "Update Audience's tags",
                  "value": {
                    "tags": {
                      "group_size": "X-Large"
                    }
                  }
                },
                "ChangeAnAudienceSFilter": {
                  "summary": "Change an Audience's filter",
                  "value": {
                    "filter": "Contact.location.country_code == 'US' AND Contact.custom_fields.industry IN('Technology', 'Telecom')"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an Audience",
        "operationId": "DeleteAudience",
        "description": "This operation deletes an Audience using its Id.",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Audiences/{audience_id}/Contacts": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AudienceId"
          },
          "name": "audience_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Add Contacts to an Audience",
        "operationId": "AddContactsToAudience",
        "description": "This operation adds list of Contacts to an Audience",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AddContactsToAudienceRequest",
                "type": "object",
                "properties": {
                  "contact_ids": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ContactId"
                    }
                  }
                }
              },
              "examples": {
                "AddContactsToAudience": {
                  "summary": "Add Contacts to Audience",
                  "value": {
                    "contact_ids": [
                      "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                      "comms_contact_01h9krwprkeee8fzqspvwy6nq9"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Contacts in Audience",
        "operationId": "ListContactsInAudience",
        "description": "This operation fetches a paginated list of Contacts that belong to an Audience.",
        "tags": [
          "Audiences"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Contacts that were added to the Audience after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Contacts that were added to the Audience before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListContactsInAudienceResponse",
                  "type": "object",
                  "properties": {
                    "contacts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contact"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  }
                },
                "examples": {
                  "PageOfContactsThatBelongToAnAudience": {
                    "summary": "Page of Contacts that belong to an Audience",
                    "value": {
                      "contacts": [
                        {
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "first_name": "Jane",
                          "last_name": "Doe",
                          "display_name": "Jane Doe",
                          "addresses": [
                            {
                              "channel": "email",
                              "address": "jane.doe@example.com"
                            }
                          ],
                          "audiences": [
                            {
                              "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq9"
                            }
                          ],
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2019-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "first_name": "John",
                          "last_name": "Doe",
                          "display_name": "John Doe",
                          "addresses": [
                            {
                              "channel": "email",
                              "address": "john.doe@example.com"
                            }
                          ],
                          "audiences": [
                            {
                              "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq9"
                            }
                          ],
                          "created_at": "2019-08-24T14:15:22Z",
                          "updated_at": "2019-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Audiences/comms_audience_01h9krwprkeee8fzqspvwy6nq9/Contacts"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Audiences/{audience_id}/Contacts/{contact_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AudienceId"
          },
          "name": "audience_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/ContactId"
          },
          "name": "contact_id",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Remove Contact from Audience",
        "operationId": "RemoveContactFromAudience",
        "description": "This operation removes a Contact from an Audience",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Audiences/{audience_id}/Tags": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AudienceId"
          },
          "name": "audience_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List of Audience Tags",
        "operationId": "ListAudienceTags",
        "description": "This operation fetches list of audience tags",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAudienceTagsResponse",
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "object",
                      "$ref": "#/components/schemas/Tags"
                    }
                  },
                  "required": [
                    "tags"
                  ]
                },
                "examples": {
                  "ListOfAudienceTags": {
                    "summary": "List of audience tags",
                    "value": {
                      "tags": {
                        "campaign1": "fb-leads-ad-7",
                        "campaign2": "fb-leads-ad-8"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "post": {
        "summary": "Add Tags to the Audience",
        "operationId": "AddAudienceTags",
        "description": "This operation adds tags to the audience",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AddAudienceTagsRequest",
                "type": "object",
                "properties": {
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "tags"
                ]
              },
              "examples": {
                "AddTagsToTheAudience": {
                  "summary": "Add tags to the Audience",
                  "value": {
                    "tags": {
                      "campaign1": "fb-leads-ad-7",
                      "campaign2": "fb-leads-ad-8"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Tags from the Audience",
        "operationId": "DeleteAudienceTags",
        "description": "This operation deletes Audience Tags",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "DeleteAudienceTagsRequest",
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "description": "The list of tag keys to be deleted from the audience",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "examples": {
                "DeleteAudienceTags": {
                  "summary": "Delete Audience tags",
                  "value": {
                    "tags": [
                      "fb-leads-ad-7",
                      "fb-leads-ad-8"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Audiences/Operations": {
      "get": {
        "summary": "List Audience Operations",
        "operationId": "ListAudienceOperations",
        "description": "This operation fetches a paginated list of Audience Operations.",
        "tags": [
          "Audiences"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/OperationStatus"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAudienceOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "description": "A list of Audience Operations.",
                      "items": {
                        "$ref": "#/components/schemas/ContactOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Audiences/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/OperationId"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an Audience Operation",
        "operationId": "FetchAudienceOperation",
        "description": "This operation fetches a single Audience Operation using its Id.",
        "tags": [
          "Audiences"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactOperation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Engagements": {
      "post": {
        "summary": "Create Engagement",
        "operationId": "CreateEngagement",
        "description": "This operation creates an Engagement. It is used internally by Twilio and by external customers to create custom engagements.",
        "tags": [
          "Engagements"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateEngagementRequest",
                "type": "object",
                "properties": {
                  "contact_id": {
                    "$ref": "#/components/schemas/ContactId"
                  },
                  "source": {
                    "$ref": "#/components/schemas/EngagementSource"
                  },
                  "engagement_type": {
                    "$ref": "#/components/schemas/EngagementType"
                  }
                },
                "required": [
                  "contact_id",
                  "source",
                  "engagement_type"
                ]
              },
              "examples": {
                "Engagement": {
                  "summary": "Create Engagement",
                  "value": {
                    "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                    "source": {
                      "message_id": "comms_message_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "engagement_type": "twilio:link_click"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Engagements",
        "operationId": "ListEngagements",
        "description": "This operation fetches a paginated list of Engagements.",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Engagements created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Engagements created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contact_id",
            "description": "Filter Engagements by Contact Id.",
            "schema": {
              "$ref": "#/components/schemas/ContactId"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "source",
            "description": "Filter Engagements by source.\n_Example:_ ``` GET /Engagements?source=message_id:comms_message_01h9krwprkeee8fzqspvwy6nq8; ```",
            "schema": {
              "$ref": "#/components/schemas/EngagementSourceString"
            }
          },
          {
            "in": "query",
            "name": "engagement_types",
            "description": "Filter Engagements by one or more types.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EngagementType"
              }
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListEngagementsResponse",
                  "type": "object",
                  "properties": {
                    "engagements": {
                      "type": "array",
                      "description": "A list of Engagements.",
                      "items": {
                        "$ref": "#/components/schemas/Engagement"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "engagements",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListEngagements": {
                    "summary": "List Engagements",
                    "value": {
                      "engagements": [
                        {
                          "id": "comms_engagement_01h2xcejqtf2nbrexx3vqjhp41",
                          "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "source": {
                            "message_id": "comms_message_01h9keee8fzqspvwy6nq8rwprk"
                          },
                          "related": [
                            {
                              "name": "contact",
                              "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Contacts/comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "message",
                              "id": "comms_message_01h9keee8fzqspvwy6nq8rwprk",
                              "uri": "/Messages/comms_message_01h9keee8fzqspvwy6nq8rwprk"
                            }
                          ],
                          "engagement_type": "twilio:link_click",
                          "created_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_engagement_01h2xc2nbrexx3vqjhp41ejqtf",
                          "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "source": {
                            "message_id": "comms_message_01h9keee8fzqspvwy6nq8rwprk8f"
                          },
                          "related": [
                            {
                              "name": "contact",
                              "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Contacts/comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "message",
                              "id": "comms_message_01h9keee8fzqsnq8rwprkpvwy6",
                              "uri": "/Messages/comms_message_01h9keee8fzqsnq8rwprkpvwy6"
                            }
                          ],
                          "engagement_type": "twilio:link_click",
                          "created_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Engagements"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Engagements/{engagement_id}": {
      "get": {
        "summary": "Fetch Engagement",
        "operationId": "FetchEngagement",
        "description": "This operation fetches an Engagement.",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/EngagementId"
            },
            "name": "engagement_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Engagement"
                },
                "examples": {
                  "MessageLinkClickEngagement": {
                    "summary": "Message Link Click Engagement",
                    "value": {
                      "id": "comms_engagement_01h2xcejqtf2nbrexx3vqjhp41",
                      "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                      "source": {
                        "message_id": "comms_message_01h9keee8fzqspvwy6nq8rwprk"
                      },
                      "related": [
                        {
                          "name": "contact",
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "uri": "/Contacts/comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                        },
                        {
                          "name": "message",
                          "id": "comms_message_01h9keee8fzqspvwy6nq8rwprk",
                          "uri": "/Messages/comms_message_01h9keee8fzqspvwy6nq8rwprk"
                        }
                      ],
                      "engagement_type": "twilio:link_click",
                      "created_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "delete": {
        "summary": "Delete Engagement",
        "operationId": "DeleteEngagement",
        "description": "This operation deletes an Engagement.",
        "tags": [
          "Engagements"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/EngagementId"
            },
            "name": "engagement_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Emails": {
      "post": {
        "summary": "Send Emails",
        "operationId": "SendEmails",
        "description": "This operation creates and sends out emails to the specified recipients.",
        "tags": [
          "Emails"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SendEmailsRequest",
                "type": "object",
                "properties": {
                  "from": {
                    "title": "SendEmailsRequestFrom",
                    "description": "The sending identity to associate with the `Email`.\n\n- Use `EmailAddressSender` to directly specify the email address that the Email\n   will appear to come 'from'.\n\n- Use `AgentIdSender` to specify a reference to an `Agent`. \n\n- `Agents` are automatically created for you for each `EmailSender` you create.\n\n- Leave this field undefined to pick up the `Agent` associated with \n  your configured default `EmailSender`.",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EmailAddressSender"
                      },
                      {
                        "$ref": "#/components/schemas/AgentIdSender"
                      }
                    ]
                  },
                  "to": {
                    "title": "SendEmailsRequestTo",
                    "type": "array",
                    "description": "A list of recipients to send the email(s) to.",
                    "items": {
                      "title": "SendEmailsRecipient",
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "SendEmailsAddressRecipient",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/EmailAddressRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/RecipientVariables"
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendEmailsContactRecipient",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/ContactRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/RecipientVariables"
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendEmailsAudienceRecipient",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/AudienceRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/RecipientVariables"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "content": {
                    "title": "SendEmailsRequestContent",
                    "description": "The content of the Email.\n- Use `EmailContent` to supply a `text/html` email body.\n  Optionally provide a `plain/text` body for clients that do not support HTML.\n  If none is specified, Twilio will auto-create one from your HTML email body.\n\n- Use `EmailContentTemplate` to reference a stored `Content` template.\n***\n* Use the [Liquid](https://shopify.github.io/liquid/) templating language for personalization in any text-based field.\n* When using a templated content, use the `variables` field on each recipient to specify the values to substitute.\n* For each variable you specify in your template, you should have a matching key in each recipient's `variables` object.\n* For each variable in your template, you may also specify a default in `default_variables`.\n* When targeting an `Audience`, it is *mandatory* to define defaults in `default_variables` for all variables in the template.\n* When targeting `Audience` or `Contact` recipients, you may specify `variables` with values that reference stored fields, including custom fields, on the `Contact` -- for example: `${Twilio.Contact.first_name}` or `${Twilio.Contact.my_custom_field}`.",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/EmailHtmlContent"
                      },
                      {
                        "$ref": "#/components/schemas/EmailContentTemplate"
                      }
                    ]
                  },
                  "reply_to": {
                    "title": "SendEmailsRequestReplyTo",
                    "description": "A list of recipients to send replies to when the recipient of this email attempts to reply.",
                    "type": "array",
                    "items": {
                      "title": "SendEmailsRequestReplyToRecipient",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EmailAddressRecipient"
                        },
                        {
                          "$ref": "#/components/schemas/ContactRecipient"
                        },
                        {
                          "$ref": "#/components/schemas/AgentIdSender"
                        }
                      ]
                    }
                  },
                  "cc": {
                    "title": "SendEmailsRequestCC",
                    "type": "array",
                    "description": "A list of recipients to carbon-copy ('cc') emails to.\nRecipients will have visibility of eachother's addresses.",
                    "maxItems": 50,
                    "items": {
                      "title": "SendEmailsRequestCCRecipient",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EmailAddressRecipient"
                        },
                        {
                          "$ref": "#/components/schemas/ContactRecipient"
                        },
                        {
                          "$ref": "#/components/schemas/AgentIdSender"
                        }
                      ]
                    }
                  },
                  "bcc": {
                    "title": "SendEmailsRequestBCC",
                    "type": "array",
                    "description": "A list of recipients to blindly carbon-copy ('cc') emails to.\nRecipients will NOT have visibility of eachother's addresses.",
                    "maxItems": 50,
                    "items": {
                      "title": "SendEmailsRequestBCCRecipient",
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/EmailAddressRecipient"
                        },
                        {
                          "$ref": "#/components/schemas/ContactRecipient"
                        },
                        {
                          "$ref": "#/components/schemas/AgentIdSender"
                        }
                      ]
                    }
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  },
                  "session_id": {
                    "$ref": "#/components/schemas/SessionId"
                  },
                  "schedule": {
                    "$ref": "#/components/schemas/Schedule"
                  },
                  "use_domain": {
                    "allOf": [
                      {
                        "description": "The Domain to use for wrapping links for branded, click-tracked links. If not specified, your default Domain will be used, if available."
                      }
                    ]
                  },
                  "use_preference": {
                    "type": "object",
                    "title": "SendEmailsRequestUsePreference",
                    "description": "Specify the `Preference` that pertains to the content of the Email\n- For each recipient, Twilio will reference the Contact's `Preference` to determine whether to suppress or send the Email.\n- Use the `Preferences` API to create and manage Preferences.\n- Previously referred to as 'asm' and 'advanced suppression manager'.",
                    "properties": {
                      "bypass_preferences": {
                        "type": "boolean",
                        "description": "Set to `true` to bypass the Contact's Preference and send the Email. This will not update the Contact's Preference.",
                        "default": false
                      }
                    }
                  }
                },
                "required": [
                  "content"
                ]
              },
              "examples": {
                "SendFromToDirectEntities": {
                  "summary": "Send from, to direct entities",
                  "value": {
                    "from": {
                      "address": "support@example.company.io",
                      "name": "Cool Co Support"
                    },
                    "to": [
                      {
                        "address": "bob@example.com"
                      }
                    ],
                    "content": {
                      "subject": "Re: Wedding Cake",
                      "text": "Hey, the cake is ready.",
                      "html": "<html><body>Hey, <br/><br/>Cake</b></body></html>",
                      "attachments": []
                    }
                  }
                },
                "SendFromToIndirectEntities": {
                  "summary": "Send from, to indirect entities",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "content": {
                      "subject": "Wedding Cake",
                      "text": "Hey you, your cake is ready.",
                      "html": "<html><body>Hey you, your cake is ready.<br/><br/></body></html>",
                      "attachments": []
                    }
                  }
                },
                "SendFromToDirectEntitiesWithPersonalization": {
                  "summary": "Send from, to direct entities with personalization",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "address": "jane.doe@example.com",
                        "variables": {
                          "first_name": "Jane",
                          "last_name": "Doe"
                        }
                      },
                      {
                        "address": "john.doe@example.com",
                        "variables": {
                          "first_name": "John",
                          "last_name": "Doe"
                        }
                      }
                    ],
                    "content": {
                      "subject": "Wedding Cake",
                      "text": "Hey, {{ first_name }} {{ last_name }}, your cake is ready.",
                      "html": "<html><body>Hey, {{ first_name }} {{ last_name }}, your cake is ready.<br/><br/></body></html>",
                      "attachments": [],
                      "default_variables": {
                        "first_name": "there",
                        "last_name": ""
                      }
                    }
                  }
                },
                "SendToContactWithContactReferencingPersonalization": {
                  "summary": "Send to Contact with Contact-referencing personalization",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "name": "${Twilio.Contact.first_name}"
                        }
                      }
                    ],
                    "content": {
                      "subject": "Wedding Cake",
                      "text": "Hey {{ name }}, your cake is ready.",
                      "html": "<html><body>Hey, {{ name }}, your cake is ready.<br/><br/></body></html>",
                      "default_variables": {
                        "name": "there"
                      },
                      "attachments": []
                    }
                  }
                },
                "SendAScheduledEmail": {
                  "summary": "Send a scheduled Email",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "name": "${Twilio.Contact.first_name}",
                          "is_vip": "${Twilio.Contact.is_vip}"
                        }
                      }
                    ],
                    "content": {
                      "subject": "Wedding Cake",
                      "text": "Hey {{ name }}, your cake will be ready for pickup tomorrow morning. {% if is_vip %} Thanks for your continued business, we've included a special treat for you! {% endif %}",
                      "html": "<html><body>Hey, {{ name }}, your cake is ready.<br/><br/> {% if is_vip %} <p>Thanks for your continued business, we've included a special treat for you!</p> {% endif %} </body></html>",
                      "default_variables": {
                        "name": "there",
                        "is_vip": "false"
                      },
                      "attachments": []
                    },
                    "schedule": {
                      "send_at": [
                        "2023-12-15T14:15:22Z"
                      ]
                    }
                  }
                },
                "SendSimplyUsingDefaultEmailSender": {
                  "summary": "Send simply using default Email Sender",
                  "value": {
                    "to": [
                      {
                        "address": "cool@example.com"
                      }
                    ],
                    "reply_to": [
                      {
                        "address": "support@example.com"
                      }
                    ],
                    "content": {
                      "subject": "Re: Wedding Cake",
                      "text": "Hey, the cake is ready.",
                      "html": "<html><body>Hey, <br/><br/>Cake</b></body></html>",
                      "attachments": []
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Emails",
        "operationId": "ListEmails",
        "description": "This operation fetches a paginated list of Emails.",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter to Emails created in a specific Operation.",
            "schema": {
              "$ref": "#/components/schemas/OperationId"
            }
          },
          {
            "in": "query",
            "name": "session_id",
            "schema": {
              "$ref": "#/components/schemas/SessionId"
            },
            "description": "Filter Messages belonging to a Session."
          },
          {
            "in": "query",
            "name": "start_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter Emails created after the specified date and time."
          },
          {
            "in": "query",
            "name": "end_date",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "description": "Filter Emails created before the specified date and time."
          },
          {
            "in": "query",
            "name": "contact",
            "description": "Filter Emails sent or received by a specific Contact.",
            "schema": {
              "$ref": "#/components/schemas/ContactId"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Match emails by one or many tags. If more than one tag is specified in the query, the search will return emails that have all the tags.\nFor Example:  ``` GET /Emails?tags=age_group:20s;industry:engineering; ```",
            "schema": {
              "$ref": "#/components/schemas/TagsString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListEmailsResponse",
                  "type": "object",
                  "properties": {
                    "emails": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailMetadata"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "emails",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListOfEmails": {
                    "summary": "List of Emails",
                    "value": {
                      "emails": [
                        {
                          "id": "comms_email_01h9krwprkeee8fzqspvwy6nq8",
                          "content": {
                            "subject": "An Introduction",
                            "text": "Hello, World!",
                            "html": "<html><body>Hello, World!</body></html>",
                            "attachments": []
                          },
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "address": "support@example.com",
                            "name": "Cool Support"
                          },
                          "to": [
                            {
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                              "address": "janedoe@example.com",
                              "name": "Jane Doe"
                            }
                          ],
                          "reply_to": [],
                          "cc": [
                            {
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                              "address": "jane.doe@example.com",
                              "name": "Jane Doe"
                            }
                          ],
                          "bcc": [],
                          "status": "opened",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Emails/Operations/01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "session",
                              "id": "comms_session_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "contact",
                              "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Contacts/01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "agent",
                              "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Agents/01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_email_01h9krwprkeee8fzqspvwy6nq8",
                          "content": {
                            "subject": "An Introduction",
                            "text": "Hello, World!",
                            "html": "<html><body>Hello, World!</body></html>",
                            "attachments": []
                          },
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "address": "support@example.com",
                            "name": "Acme Support"
                          },
                          "to": [
                            {
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                              "address": "janedoe@example.com",
                              "name": "Jane Doe"
                            }
                          ],
                          "reply_to": [],
                          "cc": [],
                          "bcc": [],
                          "status": "opened",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Emails/Operations/01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "session",
                              "id": "comms_session_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "contact",
                              "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Contacts/01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "agent",
                              "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Agents/01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Emails"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Emails/{email_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Identifier"
          },
          "name": "email_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an Email",
        "operationId": "FetchEmail",
        "description": "This operation fetches a single Email using its Id.",
        "tags": [
          "Emails"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                },
                "examples": {
                  "OutboundEmailGroup": {
                    "summary": "Outbound email, group",
                    "value": {
                      "id": "comms_email_01h9krwprkeee8fzqspvwy6nq8",
                      "content": {
                        "subject": "An Introduction",
                        "text": "Hello, World!",
                        "html": "<html><body>Hello, World!</body></html>",
                        "attachments": []
                      },
                      "from": {
                        "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                        "address": "support@example.com",
                        "name": "Cool Support"
                      },
                      "to": [
                        {
                          "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "address": "janedoe@example.com",
                          "name": "Jane Doe"
                        }
                      ],
                      "reply_to": [],
                      "cc": [
                        {
                          "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "address": "jane.doe@example.com",
                          "name": "Jane Doe"
                        }
                      ],
                      "bcc": [],
                      "status": "opened",
                      "related": [
                        {
                          "name": "operation",
                          "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                          "uri": "/Emails/Operations/01h9krwprkeee8fzqspvwy6nq8"
                        },
                        {
                          "name": "session",
                          "id": "comms_session_01h9krwprkeee8fzqspvwy6nq8",
                          "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq8"
                        },
                        {
                          "name": "contact",
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "uri": "/Contacts/01h9krwprkeee8fzqspvwy6nq8"
                        },
                        {
                          "name": "agent",
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "uri": "/Agents/01h9krwprkeee8fzqspvwy6nq8"
                        }
                      ],
                      "tags": {},
                      "scheduled_for": null,
                      "created_at": "2023-08-24T14:15:22Z",
                      "updated_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "InboundEmail11": {
                    "summary": "Inbound email, 1:1",
                    "value": {
                      "id": "comms_email_01h9krwprkeee8fzqspvwy6nq9",
                      "content": {
                        "subject": "Please help with Billing Case 123456789",
                        "text": "Hello, World!",
                        "html": "<html>\n  <body>\n    <p>Hey, I need help pulling the numbers for case 123456789!\n    I've attached a CSV of the data I have,\n    please help me pull invoices for this batch of customers.\n\n    Thanks, Mary from accounting</p>\n  </body>\n</html>",
                        "attachments": [
                          {
                            "id": "comms_media_01h9krwprkeee8fzqspvwy6nq9",
                            "upload_status": "uploaded",
                            "file_name": "customers.csv",
                            "file_size": 1024,
                            "mime_type": "text/csv",
                            "tags": {},
                            "content_reference": {
                              "temporary_url": "https://comms.twilio.com/cdn/media_01h9krwprkeee8fzqspvwy6nq9",
                              "expires_at": "2023-11-29T19:05:10Z"
                            },
                            "created_at": "2023-11-29T19:00:10Z",
                            "updated_at": "2023-11-29T19:00:10Z"
                          }
                        ]
                      },
                      "from": {
                        "address": "mary.sue@example.com",
                        "name": "Mary Sue"
                      },
                      "to": [
                        {
                          "address": "gary.stu@example.com",
                          "name": "Gary Stu"
                        }
                      ],
                      "reply_to": [],
                      "cc": [
                        {
                          "address": "team-billing@example.com"
                        }
                      ],
                      "bcc": [],
                      "status": "inbound",
                      "related": [
                        {
                          "name": "session",
                          "id": "comms_session_01h9krwprkeee8fzqspvwy6nq9",
                          "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq9"
                        }
                      ],
                      "tags": {},
                      "scheduled_for": null,
                      "created_at": "2023-11-29T19:00:22Z",
                      "updated_at": "2023-11-29T19:00:22Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "delete": {
        "summary": "Delete an Email",
        "operationId": "DeleteEmail",
        "description": "This operation deletes an Email",
        "tags": [
          "Emails"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Emails/Senders": {
      "post": {
        "summary": "Create an Email Sender",
        "operationId": "CreateEmailSender",
        "description": "This operation creates Email Senders.",
        "tags": [
          "Emails"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateEmailSenderRequest",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The email address you would to send Emails 'from'.",
                    "type": "string",
                    "format": "email",
                    "maxLength": 128
                  },
                  "name": {
                    "description": "The name you would like to send Emails 'from'.",
                    "type": "string",
                    "maxLength": 128
                  },
                  "is_default": {
                    "description": "If true, this Email Sender will be used as the default sender for all\n`Emails` sent from this account when 'from' is not specified\nas well as when using omni-channel sending with `Communications`. Setting a record\nto true will set any previous default records to false. The first Email Sender\ncreated will default to true even if not specified in the request.",
                    "type": "boolean",
                    "default": false
                  }
                },
                "required": [
                  "address",
                  "name"
                ]
              },
              "examples": {
                "CreateDefaultEmailSender": {
                  "summary": "Create default Email Sender",
                  "value": {
                    "address": "newsletter@example.com",
                    "name": "The Dude",
                    "is_default": true
                  }
                },
                "NonDefaultEmailSender": {
                  "summary": "create a non-default email sender",
                  "value": {
                    "address": "donnie@example.com",
                    "name": "Donnie",
                    "is_default": false
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Email Senders",
        "operationId": "ListEmailSenders",
        "description": "This operation fetches a paginated list of Email Senders.",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Email Senders created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Email Senders created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter to Email Senders by operation Id.",
            "schema": {
              "$ref": "#/components/schemas/OperationId"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "A page token that represents the start email sender of a page",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListEmailSendersResponse",
                  "type": "object",
                  "properties": {
                    "senders": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailSender"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  }
                },
                "examples": {
                  "ListOfEmailSenders": {
                    "summary": "List of Email Senders",
                    "value": {
                      "senders": [
                        {
                          "id": "comms_emailsender_01h9krwprkeee8fzqspvwy6nq8",
                          "address": "newsletter@example.com",
                          "name": "The Dude",
                          "status": "activated",
                          "is_default": true,
                          "created_at": "2021-01-01T00:00:00Z",
                          "updated_at": "2021-01-01T00:00:00Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_emailsender_01h9krwprkeee8fzqspvwy6nq9",
                          "address": "donnie@example.com",
                          "name": "Donnie",
                          "status": "activated",
                          "is_default": false,
                          "created_at": "2025-01-01T00:00:00Z",
                          "updated_at": "2025-01-01T00:00:00Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Emails/Senders"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Emails/Senders/{sender_id}": {
      "parameters": [
        {
          "name": "sender_id",
          "in": "path",
          "description": "The Id of the Email Sender",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Fetch an Email Sender",
        "operationId": "FetchEmailSender",
        "description": "This operation fetches a single Email Sender using its Id.",
        "tags": [
          "Emails"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSender"
                },
                "examples": {
                  "ASingleEmailSender": {
                    "summary": "a single Email Sender",
                    "value": {
                      "id": "comms_emailsender_01h9krwprkeee8fzqspvwy6nq8",
                      "address": "newsletter@example.com",
                      "name": "The Dude",
                      "status": "activated",
                      "is_default": true,
                      "created_at": "2021-01-01T00:00:00Z",
                      "updated_at": "2021-01-01T00:00:00Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "patch": {
        "summary": "Update an Email Sender",
        "operationId": "UpdateEmailSender",
        "description": "This operation updates an Email Sender.",
        "tags": [
          "Emails"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateEmailSenderRequest",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The email address you would to send Emails 'from'.",
                    "type": "string",
                    "format": "email",
                    "maxLength": 128
                  },
                  "name": {
                    "description": "The name you would like to send Emails 'from'.",
                    "type": "string",
                    "maxLength": 128
                  },
                  "is_default": {
                    "description": "If true, this Email Sender will be used as the default sender for all\n`Emails` sent from this account when 'from' is not specified\n  as well as when sending with `Communications`.",
                    "type": "boolean",
                    "default": false
                  }
                },
                "minProperties": 1,
                "additionalProperties": false
              },
              "examples": {
                "UpdateEmailSender": {
                  "summary": "update Email Sender",
                  "value": {
                    "name": "El Duderino"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Emails/Senders/Operations": {
      "get": {
        "summary": "List Email Sender Operations",
        "operationId": "ListEmailSenderOperations",
        "description": "This operation fetches a paginated list of Email Sender Operations.",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/OperationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListEmailSenderOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailSenderOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListOfEmailSenderOperations": {
                    "summary": "List of Email Sender Operations",
                    "value": {
                      "operations": [
                        {
                          "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                          "status": "completed",
                          "created_at": "2021-01-01T00:00:00Z",
                          "updated_at": "2021-01-01T00:00:00Z"
                        },
                        {
                          "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq9",
                          "status": "completed",
                          "created_at": "2025-01-01T00:00:00Z",
                          "updated_at": "2025-01-01T00:00:00Z"
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Emails/Senders/Operations"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Emails/Senders/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Identifier"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an Email Sender Operation",
        "operationId": "FetchEmailSenderOperation",
        "description": "This operation fetches a single Email Sender Operation using its Id.",
        "tags": [
          "Emails"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSenderOperation"
                },
                "examples": {
                  "ASingleEmailSenderOperation": {
                    "summary": "a single Email Sender Operation",
                    "value": {
                      "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                      "status": "completed",
                      "created_at": "2021-01-01T00:00:00Z",
                      "updated_at": "2021-01-01T00:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Emails/Credential": {
      "post": {
        "summary": "Create Email Credential",
        "operationId": "CreateEmailCredential",
        "x-twilio-status": "deprecated",
        "description": "This operation creates Email Credential (singleton).",
        "tags": [
          "Emails"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateEmailCredentialRequest",
                "type": "object",
                "description": "The request body for creating the Email Credential.",
                "properties": {
                  "name": {
                    "description": "The friendly name of the Email Credential.",
                    "type": "string"
                  },
                  "sendgrid_api_key": {
                    "description": "Your full SendGrid API key.\ne.g. `SG.KabcCB5ABCDEjkLmno1pqR.StuV2WxYzaBCdEF123gh_i-jk1lmnOP1TUVW-1Abc1d`\n\n**Note:** This key must have the following minimum permissions:\n  - Mail Send (Full Access)\n  - Mail Settings (Full Access)\n  - Sender Authentication (Full Access)\n  - Inbound Parse (Full Access)\n  - API Keys (Read Access)",
                    "type": "string",
                    "pattern": "^SG\\.[a-zA-Z0-9]{22}\\.[a-zA-Z0-9_-]{43}$"
                  }
                },
                "required": [
                  "sendgrid_api_key"
                ]
              },
              "examples": {
                "CreateEmailCredentialWithSendGridKey": {
                  "summary": "Create Email Credential with SendGrid API Key",
                  "value": {
                    "name": "my-sendgrid-credential",
                    "sendgrid_api_key": "SG.KabcCB5ABCDEjkLmno1pqR.StuV2WxYzaBCdEF123gh_i-jk1lmnOP1TUVW-1Abc1d"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Emails/Operations": {
      "get": {
        "summary": "List Email Operations",
        "operationId": "ListEmailOperations",
        "description": "This operation fetches a paginated list of Email Operations.",
        "tags": [
          "Emails"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/CommunicationOperationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListEmailOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Emails/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Identifier"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an Email Operation",
        "operationId": "FetchEmailOperation",
        "description": "This operation fetches a single Email Operation using its Id.",
        "tags": [
          "Emails"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailOperation"
                },
                "examples": {
                  "EmailOperationWithSingleEmail": {
                    "summary": "Fetch an Email Operation - single Email",
                    "value": {
                      "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                      "status": "completed",
                      "stats": {
                        "total": 1,
                        "recipients": 1,
                        "attempts": 1,
                        "unaddressable": 0,
                        "queued": 0,
                        "sent": 0,
                        "scheduled": 0,
                        "delivered": 1,
                        "opened": 0,
                        "undelivered": 0,
                        "failed": 0,
                        "canceled": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  },
                  "EmailOperationWithTwoSeparateEmails": {
                    "summary": "Fetch an Email Operation - two separate Emails",
                    "value": {
                      "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                      "status": "completed",
                      "stats": {
                        "total": 2,
                        "recipients": 2,
                        "attempts": 2,
                        "unaddressable": 0,
                        "queued": 0,
                        "sent": 0,
                        "scheduled": 0,
                        "delivered": 2,
                        "opened": 0,
                        "undelivered": 0,
                        "failed": 0,
                        "canceled": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  },
                  "EmailOperationWithThreeRecipients": {
                    "summary": "Fetch an Email Operation - one Email with 3 recipients",
                    "value": {
                      "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                      "status": "completed",
                      "stats": {
                        "total": 1,
                        "recipients": 3,
                        "attempts": 3,
                        "unaddressable": 0,
                        "queued": 0,
                        "sent": 0,
                        "scheduled": 0,
                        "delivered": 0,
                        "opened": 0,
                        "undelivered": 0,
                        "failed": 0,
                        "canceled": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Messages": {
      "post": {
        "summary": "Send Messages",
        "operationId": "SendMessages",
        "description": "This operation creates and sends out messages to the specified recipients.",
        "tags": [
          "Messages"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SendMessagesRequest",
                "type": "object",
                "properties": {
                  "to": {
                    "title": "SendMessagesRequestTo",
                    "description": "An array of recipient objects to send the message(s) to.\n\n- Use `AddressRecipient` to describe the recipient by their\naddress.\n\n- Use `ConnectedAddressRecipient` to send a message to a recipient\n  with multiple addresses, Twilio will select the optimal channel and perform\n  retries across channels (if necessary).\n\n- Use `ContactRecipient` to reference a stored `Contact`.\n\n- Use `ContactRecipientFinder` to reference a stored `Contact` by a field\n  other than the `Contact.Id`.\n\n- Use `AudienceRecipient` to send a message to an audience.\n\n- Use `GroupRecipient` for group messaging.",
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 10000,
                    "items": {
                      "title": "SendMessagesRecipient",
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "SendMessagesAddressRecipient",
                          "description": "The address and channel to reach your recipient.",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/MessageAddressRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/RecipientVariables"
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendMessagesConnectedAddressRecipient",
                          "description": "A recipient with multiple address for Messaging. Provide a list of addresses for a recipient and Twilio will pick the best one.  Twilio will automatically handle errors and retry across channels if necessary.",
                          "properties": {
                            "addresses": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/MessageAddressRecipient"
                              },
                              "minItems": 1,
                              "maxItems": 10
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "addresses"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendMessagesContactRecipient",
                          "description": "A Twilio `Contact` identified by `Contact.Id`.",
                          "properties": {
                            "contact_id": {
                              "$ref": "#/components/schemas/ContactId"
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "contact_id"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendMessagesAudienceRecipient",
                          "description": "A Twilio `Audience` identified by `Audience.Id`.",
                          "properties": {
                            "audience_id": {
                              "$ref": "#/components/schemas/AudienceId"
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "audience_id"
                          ]
                        }
                      ]
                    }
                  },
                  "content": {
                    "title": "SendMessagesRequestContent",
                    "type": "object",
                    "description": "The content of the Message.\n\n- Use `MessageContentTextWithMedia` to send a Message with just text and/or media.\n\n- Use `MessageContentTemplate` to reference a stored `Content` template.\n\n- Use `MessageContentChannelModules` to send rich content and \n  different content per channel.\n\n***\n\n* Use the [Liquid](https://shopify.github.io/liquid/)\ntemplating language for personalization in any text-based field.\n\n* When using a templated content,\nuse the `variables` field on each recipient to specify\nthe values to substitute.\n\n* For each variable you specify in your template, you should have\na matching key in each recipient's `variables` object.\n\n* For each variable in your template, you may also specify a default in\n`default_variables`.\n\n* When targeting an `Audience`, it is *mandatory* to define defaults\nin `default_variables` for all variables in the template.\n\n* When targeting `Audience` or `Contact` recipients, you may specify `variables`\nwith values that reference stored fields, including custom fields,\non the `Contact` -- for example:\n`${Twilio.Contact.first_name}` or `${Twilio.Contact.my_custom_field}`.",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageContentTextWithMedia"
                      },
                      {
                        "$ref": "#/components/schemas/MessageContentTemplate"
                      },
                      {
                        "$ref": "#/components/schemas/MessageContentChannelModules"
                      }
                    ]
                  },
                  "from": {
                    "title": "SendMessagesRequestFrom",
                    "description": "The sending identity to associate with the Message(s).",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageAddressSender"
                      },
                      {
                        "$ref": "#/components/schemas/AgentIdSender"
                      },
                      {
                        "$ref": "#/components/schemas/MessageAgentPoolIdSender"
                      }
                    ]
                  },
                  "schedule": {
                    "x-twilio-version": 1,
                    "$ref": "#/components/schemas/Schedule"
                  },
                  "tags": {
                    "x-twilio-version": 1,
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              },
              "examples": {
                "SendSimplestSms": {
                  "summary": "Send simplest sms",
                  "value": {
                    "to": [
                      {
                        "address": "+14153902337",
                        "channel": "phone"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendASimpleSms": {
                  "summary": "Send a simple sms",
                  "value": {
                    "from": {
                      "address": "+14153901002",
                      "channel": "sms"
                    },
                    "to": [
                      {
                        "address": "+12065558844",
                        "channel": "phone"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendAMessageToOneRecipientWaRcsMmsSmsThatHasMultipleAddresses": {
                  "summary": "Send a Message to one recipient (wa, rcs, mms, sms) that has multiple addresses",
                  "value": {
                    "from": {
                      "address": "+14153901002",
                      "channel": "sms"
                    },
                    "to": [
                      {
                        "addresses": [
                          {
                            "address": "+12065558844",
                            "channel": "whatsapp"
                          },
                          {
                            "address": "+12065558844",
                            "channel": "phone"
                          }
                        ]
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendOneMessageFromAgentToContact": {
                  "summary": "Send one Message from Agent to Contact",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendRcsMessagesToMultipleRecipients": {
                  "summary": "Send rcs Messages to multiple recipients",
                  "value": {
                    "from": {
                      "address": "rbm_abc123_agent",
                      "channel": "rcs"
                    },
                    "to": [
                      {
                        "address": "+14153979999",
                        "channel": "phone"
                      },
                      {
                        "address": "+12065558063",
                        "channel": "phone"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendSmsMessagesToMultipleContactRecipients": {
                  "summary": "Send sms Messages to multiple Contact recipients",
                  "value": {
                    "from": {
                      "address": "+14155551002",
                      "channel": "sms"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendMessagesFromAnAgentToMultipleContactRecipients": {
                  "summary": "Send Messages from an Agent to multiple Contact recipients",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendMessagesFromAgentPoolToAMixOfRecipientTypes": {
                  "summary": "Send Messages from Agent Pool to a mix of recipient types",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8",
                      "filter_in": [
                        "sms",
                        "rcs"
                      ]
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      {
                        "address": "+17773178001",
                        "channel": "phone"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    }
                  }
                },
                "SendMultipleMessagesWithPersonalization": {
                  "summary": "Send multiple Messages with personalization",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "John",
                          "last_name": "Doe"
                        }
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "Jane",
                          "last_name": "Doe"
                        }
                      }
                    ],
                    "content": {
                      "text": "Hello, {{ first_name }} {{ last_name }}!"
                    }
                  }
                },
                "SendMultipleMessagesWithContactReferencePersonalization": {
                  "summary": "Send multiple Messages with Contact reference personalization",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "${Twilio.Contact.first_name}",
                          "last_name": "${Twilio.Contact.last_name}"
                        }
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "${Twilio.Contact.first_name}",
                          "last_name": "${Twilio.Contact.last_name}"
                        }
                      }
                    ],
                    "content": {
                      "text": "Hello, {{ first_name }} {{ last_name }}!",
                      "default_variables": {
                        "first_name": "Valued",
                        "last_name": "Customer"
                      }
                    }
                  }
                },
                "SendMessagesToAudienceWithPersonalization": {
                  "summary": "Send Messages to Audience with personalization",
                  "value": {
                    "from": {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "${Twilio.Contact.first_name}",
                          "last_name": "${Twilio.Contact.last_name}",
                          "gender": "${Twilio.Contact.gender}"
                        }
                      },
                      {
                        "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "${Twilio.Contact.first_name}",
                          "last_name": "${Twilio.Contact.last_name}",
                          "gender": "${Twilio.Contact.gender}"
                        }
                      }
                    ],
                    "content": {
                      "text": "Hello, {% unless last_name == '' or gender == 'other' %} {% case gender %} {% when 'male' %} Mr. {{last_name}} ! {% when 'female' %} Ms. {{last_name}} ! {% else %} {{first_name}} ! {% endcase %} {% else %} {{first_name}} ! {% endif %}",
                      "default_variables": {
                        "first_name": "Valued Customer",
                        "last_name": "",
                        "gender": "other"
                      }
                    }
                  }
                },
                "SendMessagesConstrainedToWhatsappAndSms": {
                  "summary": "Send Messages, constrained to whatsapp, and sms",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8",
                      "filter_in": [
                        "whatsapp",
                        "sms"
                      ]
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "John",
                          "last_name": "Doe"
                        }
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "first_name": "Jane",
                          "last_name": "Doe"
                        }
                      }
                    ],
                    "content": {
                      "text": "Hello, {{ first_name }} {{ last_name }}!",
                      "default_variables": {
                        "first_name": "Valued",
                        "last_name": "Customer"
                      },
                      "media": [
                        {
                          "url": "https://cdn.bikinibottom.com/bikinibottom.jpg"
                        }
                      ]
                    }
                  }
                },
                "AddAMessageAndParticipantToAnExistingSession": {
                  "summary": "Add a Message and Participant to an existing Session",
                  "value": {
                    "from": {
                      "address": "+19144178063",
                      "channel": "sms"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "session_id": "comms_session_01h9krwprkeee8fzqspvwy6nq8",
                    "content": {
                      "text": "Hey, I don't think I can see the entrance."
                    }
                  }
                },
                "SendAMessageWithMedia": {
                  "summary": "Send a message with media",
                  "value": {
                    "from": {
                      "address": "+14158871002",
                      "channel": "sms"
                    },
                    "to": [
                      {
                        "address": "+19144178063",
                        "channel": "phone"
                      }
                    ],
                    "content": {
                      "media": [
                        {
                          "url": "https://example.com/steelers.jpg"
                        },
                        {
                          "url": "https://example.com/cowboys.png"
                        }
                      ]
                    }
                  }
                },
                "SendAScheduledSms": {
                  "summary": "Send a scheduled sms",
                  "value": {
                    "from": {
                      "address": "+14153901002",
                      "channel": "sms"
                    },
                    "to": [
                      {
                        "address": "+12065558844",
                        "channel": "phone"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    },
                    "schedule": {
                      "send_at": [
                        "2030-04-01T10:04:01Z"
                      ]
                    }
                  }
                },
                "SendAMessageWithAutomaticSuppressionManagement": {
                  "summary": "Send a message with automatic suppression management",
                  "value": {
                    "from": {
                      "address": "+14153901002",
                      "channel": "sms"
                    },
                    "to": [
                      {
                        "address": "+12065558844",
                        "channel": "phone"
                      }
                    ],
                    "content": {
                      "text": "Hello, World!"
                    },
                    "use_preference": {
                      "preference_id": "comms_preference_01h9krwprkeee8fzqspvwy6nq8"
                    }
                  }
                },
                "SendAMessageWithJustRecipientAndContent": {
                  "summary": "Send a Message with just recipient and content",
                  "value": {
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "content": {
                      "text": "Look ma, no 'from' âœ¨!"
                    }
                  }
                },
                "FlexibleContentPerChannelControl": {
                  "summary": "Flexible content, per channel control",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "content": {
                      "modules": [
                        {
                          "rcs": {
                            "rich_card": {
                              "standalone_card": {
                                "card_content": {
                                  "title": "Your photo",
                                  "description": "We hope you enjoyed the roller coaster!",
                                  "media": {
                                    "content_info": {
                                      "file_url": "https://example.com/image.jpg"
                                    }
                                  },
                                  "suggestions": [
                                    {
                                      "reply": {
                                        "text": "Purchase 8x11 Print",
                                        "postback_data": "print_8x11"
                                      }
                                    },
                                    {
                                      "reply": {
                                        "text": "Purchase Digital Copy",
                                        "postback_data": "digital_copy"
                                      }
                                    },
                                    {
                                      "reply": {
                                        "text": "Request Help",
                                        "postback_data": "request_help"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "sms": {
                            "text": "We hope you enjoyed the roller coaster! Here's your photo!",
                            "media": [
                              {
                                "url": "https://example.com/image.jpg"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "WhatsappRichContent": {
                  "summary": "WhatsApp rich content",
                  "value": {
                    "from": {
                      "address": "+12065558844",
                      "channel": "whatsapp"
                    },
                    "to": [
                      {
                        "address": "+12065558063",
                        "channel": "whatsapp"
                      }
                    ],
                    "content": {
                      "modules": [
                        {
                          "whatsapp": {
                            "type": "interactive",
                            "interactive": {
                              "type": "list",
                              "header": {
                                "type": "text",
                                "text": "Your order is almost complete!"
                              },
                              "body": {
                                "text": "Choose your bonus product"
                              },
                              "action": {
                                "button": "Select Product",
                                "sections": [
                                  {
                                    "title": "Products",
                                    "rows": [
                                      {
                                        "id": "product_1",
                                        "title": "Product 1"
                                      },
                                      {
                                        "id": "product_2",
                                        "title": "Product 2"
                                      },
                                      {
                                        "id": "product_3",
                                        "title": "Product 3"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        },
                        {
                          "sms": {
                            "text": "Choose a product from https://example.com/products?order_id=x39sdf1"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "label": "cURL",
            "source": "curl --location 'https://comms.twilio.com/preview/Messages' \\\n--header 'Content-Type: application/json' \\\n-u $TWILIO_ACCOUNT_SID:$TWILIO_AUTH_TOKEN \\\n--data '{\n    \"to\": [{\n        \"address\": \"+12065551337\",\n        \"channel\": \"phone\"\n    }],\n    \"content\": {\n        \"text\": \"What day is it?\"\n    }\n}'\n"
          }
        ]
      },
      "get": {
        "summary": "List Messages",
        "operationId": "ListMessages",
        "description": "This operation fetches a paginated list of Messages.",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter Messages by Operation Id.",
            "schema": {
              "$ref": "#/components/schemas/OperationId"
            }
          },
          {
            "in": "query",
            "name": "session_id",
            "description": "Filter Messages by Session Id.",
            "schema": {
              "$ref": "#/components/schemas/SessionId"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Messages created after the specified date and time. The date is in RFC3339 format. (e.g., 2025-06-18T12:00:00Z)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Messages created before the specified date and time. The date is in RFC3339 format and must be greater  than start_date if provided. (e.g., 2025-06-18T12:00:00Z)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "contact",
            "description": "Filter Messages sent or received by Contact Id.",
            "schema": {
              "$ref": "#/components/schemas/ContactId"
            }
          },
          {
            "in": "query",
            "name": "channel",
            "description": "Filter Messages by channel.",
            "schema": {
              "$ref": "#/components/schemas/MessageAgentChannel"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter Messages by Delivery Status.",
            "schema": {
              "$ref": "#/components/schemas/MessageStatus"
            }
          },
          {
            "in": "query",
            "name": "tags",
            "description": "Match messages by one or many tags. If more than one tag is specified in the query, the search will return messages that have all the tags.\nFor Example: ``` GET /Messages?tags=region:EMEA;campaign:BUY_STUFF; ```",
            "schema": {
              "$ref": "#/components/schemas/TagsString"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListMessagesResponse",
                  "description": "A list of Messages and pagination metadata.",
                  "type": "object",
                  "properties": {
                    "messages": {
                      "type": "array",
                      "description": "A list of Messages.",
                      "items": {
                        "$ref": "#/components/schemas/MessageMetadata"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "messages",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListMessagesInOperationWithMixedChannels": {
                    "summary": "List with one sms and one whatsapp message",
                    "value": {
                      "messages": [
                        {
                          "id": "comms_message_01h2xcejqtf2nbrexx3vqjhp41",
                          "from": {
                            "address": "+12065558844",
                            "channel": "sms",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14153901002",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq7"
                            }
                          ],
                          "status": "sent",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                              "uri": "/Messages/Operations/01h2xcejqtf2nbrexx3vqjhp41"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_message_01h2xcejqtf2nbrexx3vqjhp41",
                          "from": {
                            "address": "+12065558844",
                            "channel": "whatsapp",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14153901002",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq7"
                            }
                          ],
                          "status": "sent",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                              "uri": "/Messages/Operations/01h2xcejqtf2nbrexx3vqjhp41"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Messages"
                      }
                    }
                  },
                  "ListMessagesFilterByContact": {
                    "summary": "List Messages filtered by Contact",
                    "value": {
                      "messages": [
                        {
                          "id": "comms_message_01h2xcejqtf2nbrexx3vqjhp41",
                          "from": {
                            "address": "+12065558844",
                            "channel": "sms",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14153901002",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq7"
                            }
                          ],
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                              "uri": "/Messages/Operations/01h2xcejqtf2nbrexx3vqjhp41"
                            }
                          ],
                          "status": "sent",
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_message_01h2xcejqtf2nbrexx3vqjhp41",
                          "from": {
                            "address": "+12065558844",
                            "channel": "sms",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14153901002",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "status": "delivered",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                              "uri": "/Messages/Operations/01h2xcejqtf2nbrexx3vqjhp41"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Messages"
                      }
                    }
                  },
                  "ListMessagesInSession": {
                    "summary": "List Messages in a Session",
                    "value": {
                      "messages": [
                        {
                          "id": "comms_message_01h9krwprkeee8fzqspvwy6nq8",
                          "from": {
                            "address": "+18126678921",
                            "channel": "sms",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+19144178063",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "status": "delivered",
                          "related": [
                            {
                              "name": "operation",
                              "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Messages/Operations/01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "name": "session",
                              "id": "comms_session_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_message_01h9krwprkeee8fzqspvwy6nq8",
                          "from": {
                            "address": "+18126678921",
                            "channel": "phone",
                            "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+19144178063",
                              "channel": "sms",
                              "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "status": "inbound",
                          "related": [
                            {
                              "name": "session",
                              "id": "comms_session_01h9krwprkeee8fzqspvwy6nq8",
                              "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Messages"
                      }
                    }
                  },
                  "ListMessagesFilteredByInboundStatusAndContact": {
                    "summary": "List only inbound Messages from the same Contact",
                    "value": {
                      "messages": [
                        {
                          "id": "comms_message_01h9krwprkeee8fzqspvwy6nq5",
                          "from": {
                            "address": "+12065558844",
                            "channel": "phone",
                            "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14155551002",
                              "channel": "sms",
                              "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "status": "inbound",
                          "related": [
                            {
                              "name": "session",
                              "id": "comms_session_01h9krwprkeee8fzqspvwy6nq5",
                              "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq5"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_message_01h9krwprkeee8fzqspvwy6nq6",
                          "from": {
                            "address": "+12065558844",
                            "channel": "sms",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14155551003",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq7"
                            }
                          ],
                          "status": "inbound",
                          "related": [
                            {
                              "name": "session",
                              "id": "comms_session_01h9krwprkeee8fzqspvwy6nq6",
                              "uri": "/Sessions/01h9krwprkeee8fzqspvwy6nq6"
                            }
                          ],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2023-08-24T14:16:59Z",
                          "updated_at": "2023-08-24T14:16:59Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Messages"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Messages/{message_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/MessageId"
          },
          "name": "message_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch a Message",
        "operationId": "FetchMessage",
        "description": "This operation fetches a single Message using its Id.",
        "tags": [
          "Messages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                },
                "examples": {
                  "InboundMessage": {
                    "summary": "Inbound message, 1:1 or 1:n",
                    "value": {
                      "id": "comms_message_01h2xcejqtf2nbrexx3vqjhp41",
                      "from": {
                        "address": "+12065558844",
                        "channel": "phone",
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      "to": [
                        {
                          "address": "+14153902337",
                          "channel": "sms",
                          "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                        }
                      ],
                      "content": {
                        "text": "Hey, I need some help with my new 5G router!"
                      },
                      "status": "inbound",
                      "attempts": [],
                      "related": [
                        {
                          "name": "session",
                          "id": "comms_session_2x4y6z8a0b1c2d3e4f5g6h7j8k",
                          "uri": "/Sessions/2x4y6z8a0b1c2d3e4f5g6h7j8k"
                        }
                      ],
                      "tags": {},
                      "scheduled_for": null,
                      "created_at": "2023-08-24T14:15:22Z",
                      "updated_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "OutboundRCSMessage": {
                    "summary": "Outbound rcs message",
                    "value": {
                      "id": "comms_message_2x4y6z8a0b1c2d3e4f5g6h7j8k",
                      "from": {
                        "address": "bowlingteam_212_agent",
                        "channel": "rcs",
                        "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      "to": [
                        {
                          "address": "+14153901002",
                          "channel": "phone",
                          "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                        }
                      ],
                      "content": {
                        "modules": [
                          {
                            "rcs": {
                              "rich_card": {
                                "standalone_card": {
                                  "card_content": {
                                    "title": "Hi there -- we've got information!",
                                    "description": "New stuff has come to light.",
                                    "suggestions": [
                                      {
                                        "action": {
                                          "text": "Learn More",
                                          "postback_data": "bmV3IHNoaX",
                                          "open_url_action": {
                                            "url": "https://dude.info?campaign=bmV3IHNoaX"
                                          }
                                        }
                                      },
                                      {
                                        "action": {
                                          "text": "Talk to an Agent",
                                          "postback_data": "agent_12038907435",
                                          "dial_action": {
                                            "phone_number": "+12038907435"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "sms": {
                              "text": "Hi there -- we've got information! New stuff has come to light.\nLearn more at https://dude.info?campaign=bmV3IHNoaX",
                              "media": [
                                {
                                  "url": "https://dude.info/media/info.png"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "attempts": [
                        {
                          "from": {
                            "address": "bowlingteam_212_agent",
                            "channel": "rcs",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14153901002",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "status": "delivered",
                          "attempted_at": "2023-08-24T14:15:22Z",
                          "info_url": "https://console.twilio.com/us1/monitor/logs/sms/AC77ec7f777777f7a77ce7777aeef7777f/SMbffad777cc7777777777777dfcdc7f77",
                          "error": null
                        }
                      ],
                      "related": [
                        {
                          "name": "session",
                          "id": "comms_session_01h2xcejqtf2nbrexx3vqjhp41",
                          "uri": "/Sessions/01h2xcejqtf2nbrexx3vqjhp41"
                        }
                      ],
                      "status": "delivered",
                      "tags": {},
                      "scheduled_for": null,
                      "created_at": "2023-08-24T14:15:22Z",
                      "updated_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "OutboundScheduledFallbackRcsToSms": {
                    "summary": "Outbound, scheduled, first attempt over rcs fails, 2nd attempt with sms/mms succeeds",
                    "value": {
                      "id": "comms_message_2x4y6z8a0b1c2d3e4f5g6h7j8k",
                      "from": {
                        "address": "+12065558844",
                        "channel": "sms",
                        "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      "to": [
                        {
                          "address": "+14153901002",
                          "channel": "phone",
                          "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                        }
                      ],
                      "content": {
                        "text": "Thanks for joining us today!",
                        "media": [
                          {
                            "url": "http://content.cool.co/party-thanks.png"
                          }
                        ]
                      },
                      "attempts": [
                        {
                          "from": {
                            "address": "bowlingteam_212_agent",
                            "channel": "rcs",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14153901002",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "status": "failed",
                          "attempted_at": "2023-08-24T14:15:22Z",
                          "info_url": "https://console.twilio.com/us1/monitor/logs/sms/AC77ec7f777777f7a77ce7777aeef7777f/SMbffad777cc7777777777777dfcdc7f77",
                          "error": {
                            "code": 61337,
                            "message": "Recipient does not have RCS enabled.",
                            "info_url": "https://twilio.com/docs/api/errors/61337"
                          }
                        },
                        {
                          "from": {
                            "address": "+12065558844",
                            "channel": "sms",
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                          },
                          "to": [
                            {
                              "address": "+14153901002",
                              "channel": "phone",
                              "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                            }
                          ],
                          "status": "delivered",
                          "attempted_at": "2023-08-24T14:15:22Z",
                          "info_url": "https://console.twilio.com/us1/monitor/logs/sms/AC77ec7f777777f7a77ce7777aeef7777f/SMbffad777cc7777777777777dfcdc7f77",
                          "error": null
                        }
                      ],
                      "related": [
                        {
                          "name": "session",
                          "id": "comms_session_01h2xcejqtf2nbrexx3vqjhp41",
                          "uri": "/Sessions/01h2xcejqtf2nbrexx3vqjhp41"
                        }
                      ],
                      "status": "delivered",
                      "tags": {},
                      "scheduled_for": "2023-08-25T16:15:30Z",
                      "created_at": "2023-08-24T14:15:22Z",
                      "updated_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Messages/Operations": {
      "get": {
        "summary": "List Message Operations",
        "operationId": "ListMessageOperations",
        "description": "This operation fetches a paginated list of Message Operations.",
        "tags": [
          "Messages"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/CommunicationOperationStatus"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListMessageOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "description": "A list of Message Operations.",
                      "items": {
                        "$ref": "#/components/schemas/MessageOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Messages/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/OperationId"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch a Message Operation",
        "operationId": "FetchMessageOperation",
        "description": "This operation fetches a single Message Operation using its Id.",
        "tags": [
          "Messages"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageOperation"
                },
                "examples": {
                  "FetchAMessageOperationSingleMessage": {
                    "summary": "Fetch a Message Operation - single Message",
                    "value": {
                      "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                      "status": "completed",
                      "stats": {
                        "total": 1,
                        "recipients": 1,
                        "attempts": 1,
                        "unaddressable": 0,
                        "queued": 0,
                        "sent": 0,
                        "scheduled": 0,
                        "delivered": 1,
                        "read": 0,
                        "undelivered": 0,
                        "failed": 0,
                        "canceled": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  },
                  "FetchAMessageOperationTwoMessages": {
                    "summary": "Fetch a Message Operation - two Messages",
                    "value": {
                      "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                      "status": "completed",
                      "stats": {
                        "total": 2,
                        "recipients": 2,
                        "attempts": 4,
                        "unaddressable": 0,
                        "queued": 0,
                        "sent": 0,
                        "scheduled": 0,
                        "delivered": 2,
                        "read": 0,
                        "undelivered": 0,
                        "failed": 0,
                        "canceled": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  },
                  "ResponseFetchAMessageOperationOneGroupMessageWith3Recipients": {
                    "summary": "Fetch a Message Operation - one group Message with 3 recipients",
                    "value": {
                      "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                      "status": "completed",
                      "stats": {
                        "total": 1,
                        "recipients": 3,
                        "attempts": 1,
                        "unaddressable": 0,
                        "queued": 0,
                        "sent": 0,
                        "scheduled": 0,
                        "delivered": 0,
                        "read": 0,
                        "undelivered": 0,
                        "failed": 0,
                        "canceled": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  },
                  "UnaddressableNoAttempts": {
                    "summary": "unaddressable - therefore no messages and no attempts",
                    "value": {
                      "id": "comms_operation_01h2xcejqtf2nbrexx3vqjhp41",
                      "status": "completed",
                      "stats": {
                        "total": 1,
                        "recipients": 1,
                        "attempts": 0,
                        "unaddressable": 1,
                        "queued": 0,
                        "sent": 0,
                        "scheduled": 0,
                        "delivered": 0,
                        "read": 0,
                        "undelivered": 0,
                        "failed": 0,
                        "canceled": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Messages/Operations/{operation_id}/Cancel": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/OperationId"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Cancel a Message Operation",
        "operationId": "CancelMessageOperation",
        "description": "This operation cancels a Message Operation using its Id.",
        "tags": [
          "Messages"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Messages/Seek/{identifier}": {
      "parameters": [
        {
          "name": "identifier",
          "schema": {
            "type": "string"
          },
          "in": "path",
          "required": true,
          "description": "The unique identifier that belongs to a `Message`. This will be used to seek out the message."
        }
      ],
      "get": {
        "summary": "Seek Message by Identifier",
        "operationId": "SeekMessageByIdentifier",
        "description": "This operation seeks out a message based upon an identifier retrieved by another system.",
        "tags": [
          "Messages"
        ],
        "responses": {
          "301": {
            "description": "This redirects to the `Message` of which this identifier belongs.",
            "headers": {
              "Location": {
                "description": "The URL of the actual `Message` resource.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                },
                "example": "https://comms.twilio.com/v1/Messages/MGxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/DeviceRegistrations": {
      "post": {
        "summary": "Register Device for Push Notifications",
        "operationId": "CreateDeviceRegistration",
        "description": "This operation registers the push notifications token of the device/browser to the\nRegistration set of a Contact with the corresponding `app_name`.\n\n* If a Contact Id is not provided, a new Contact is created. \n\n* If a Contact Id is provided and the Contact exists, the device is registered to the Contact.",
        "tags": [
          "PushNotifications"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "title": "DeviceRegistrationRequest",
                "type": "object",
                "properties": {
                  "contact_id": {
                    "$ref": "#/components/schemas/ContactId",
                    "description": "The Id of the contact to register the device to, if available."
                  },
                  "app_name": {
                    "description": "The name of the `App` to register the device for.\n\nIf the `app_name` does not match the name \n  of any existing Push Notification `App`, the operation will fail.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PushNotificationAppName"
                      }
                    ]
                  },
                  "token": {
                    "type": "string",
                    "description": "The device token to register for push notifications."
                  },
                  "provider": {
                    "$ref": "#/components/schemas/PushNotificationProvider"
                  }
                },
                "required": [
                  "app_name",
                  "token",
                  "provider"
                ]
              },
              "examples": {
                "ExistingContact": {
                  "summary": "Existing contact",
                  "value": {
                    "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                    "token": "dqWD7WEC83K41WHyufTS7:APA91bFcrVaOLqKeJfSiEutJXX2Tr9wN_tYOwYd8rFA6mYUMBFqdz9n6k3v5EpFA_ukXD89hGqG3OarzbVfdjGnLOIAQfwbQcqJkjQWMrhwElrtU1y3JLDPfnjc0eTJLxzhyYvDFopEh",
                    "app_name": "limonade_app",
                    "provider": "fcm"
                  }
                },
                "NewContact": {
                  "summary": "New contact",
                  "value": {
                    "token": "dqWD7WEC83K41WHyufTS7:APA91bFcrVaOLqKeJfSiEutJXX2Tr9wN_tYOwYd8rFA6mYUMBFqdz9n6k3v5EpFA_ukXD89hGqG3OarzbVfdjGnLOIAQfwbQcqJkjQWMrhwElrtU1y3JLDPfnjc0eTJLxzhyYvDFopEh",
                    "app_name": "limonade_app",
                    "provider": "fcm"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "get": {
        "summary": "List Device Registrations",
        "operationId": "ListDeviceRegistrations",
        "description": "This operation fetches a paginated list of Device Registrations\n  with the Id of the `Contact` they belong to and the name of the `App` that they are for.\n\n* A Device Registration contains a list of devices registered for a particular `Contact` under an `App`\n\n* The `Device` tokens in the Device Registration are used for delivering Push Notifications to the given `App` on \ndevices or browsers belonging to a single Contact.\n\n* Each Contact will have one Device Registration for each `App`.\n\n* When sending Push Notifications to a Contact, all of the\n  devices registered under the Device Registration with the corresponding `app_name`\n  are targets for the Push Notification.",
        "tags": [
          "PushNotifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "contact_id",
            "required": true,
            "description": "Filter Device Registrations by `Contact.id` to retrieve only registrations for that Contact.",
            "schema": {
              "$ref": "#/components/schemas/ContactId"
            }
          },
          {
            "in": "query",
            "name": "app_name",
            "description": "Filter Device Registrations by their `app_name`.  Must be accompanied by the `contact_id` query parameter.",
            "schema": {
              "$ref": "#/components/schemas/PushNotificationAppName"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListDeviceRegistrationsResponse",
                  "type": "object",
                  "properties": {
                    "device_registrations": {
                      "type": "array",
                      "description": "List of Device Registrations.",
                      "items": {
                        "$ref": "#/components/schemas/DeviceRegistration"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "device_registrations",
                    "pagination"
                  ]
                },
                "example": {
                  "device_registrations": [
                    {
                      "id": "comms_device_registration_qspvwy6nq801h9krwprkeee8fz",
                      "app_name": "limonade_app",
                      "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                      "devices": [
                        {
                          "token": "dqWD7WEC83K41WHyufTS7:APA91bFcrVaOLqKeJfSiEutJXX2Tr9wN_tYOwYd8rFA6mYUMBFqdz9n6k3v5EpFA_ukXD89hGqG3OarzbVfdjGnLOIAQfwbQcqJkjQWMrhwElrtU1y3JLDPfnjc0eTJLxzhyYvDFopEh",
                          "provider": "fcm"
                        },
                        {
                          "token": "00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0",
                          "provider": "apn"
                        }
                      ],
                      "related": [
                        {
                          "id": "limonade_app",
                          "name": "push_notification_app",
                          "uri": "/PushNotifications/Apps/limonade_app"
                        },
                        {
                          "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                          "name": "contact",
                          "uri": "/Contacts/comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                        }
                      ],
                      "tags": {
                        "region": "NAMER"
                      }
                    }
                  ],
                  "pagination": {
                    "next": null,
                    "self": "https://comms.twilio.com/v1/PushNotifications/DeviceRegistrations"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/DeviceRegistrations/{device_registration_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/DeviceRegistrationId"
          },
          "name": "device_registration_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get a single Device Registration",
        "operationId": "GetDeviceRegistration",
        "description": "This operation fetches a single Device Registration.\n\n* A Device Registration contains a list of devices registered for a particular `Contact` under an `App`\n\n* The `Device` tokens in the Device Registration are used for delivering Push Notifications to the given `App` on \ndevices or browsers belonging to a single Contact.\n\n* Each Contact will have one Device Registration for each `App`.\n\n* When sending Push Notifications to a Contact, all of the\n  devices registered under the Device Registration with the corresponding `app_name`\n  are targets for the Push Notification.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceRegistration"
                },
                "example": {
                  "id": "comms_device_registration_qspvwy6nq801h9krwprkeee8fz",
                  "app_name": "limonade_app",
                  "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                  "devices": [
                    {
                      "token": "dqWD7WEC83K41WHyufTS7:APA91bFcrVaOLqKeJfSiEutJXX2Tr9wN_tYOwYd8rFA6mYUMBFqdz9n6k3v5EpFA_ukXD89hGqG3OarzbVfdjGnLOIAQfwbQcqJkjQWMrhwElrtU1y3JLDPfnjc0eTJLxzhyYvDFopEh",
                      "provider": "fcm"
                    },
                    {
                      "token": "00fc13adff785122b4ad28809a3420982341241421348097878e577c991de8f0",
                      "provider": "apn"
                    }
                  ],
                  "related": [
                    {
                      "id": "limonade_app",
                      "name": "push_notification_app",
                      "uri": "/PushNotifications/Apps/limonade_app"
                    },
                    {
                      "id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                      "name": "contact",
                      "uri": "/Contacts/comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                    }
                  ],
                  "tags": {}
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "delete": {
        "summary": "Delete a Device Registration",
        "operationId": "DeleteDeviceRegistration",
        "description": "This operation deletes a Device Registration.\n\nOnce deleted, the Contact will no longer receive Push Notifications for the specified App until new devices are registered.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications": {
      "post": {
        "summary": "Send Push Notifications",
        "operationId": "SendPushNotifications",
        "description": "This operation creates and sends out push notifications to the specified recipients.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SendPushNotificationsRequest",
                "type": "object",
                "properties": {
                  "from": {
                    "title": "SendPushNotificationRequestFrom",
                    "description": "The sender of the Push Notification(s).\n- Leave unspecified to automatically use the default `App`.\n\n- Use `PushNotificationCredentialSender` to specify `Credential(s)`'\n  (one per provider) to be used for sending the Push Notification(s).\n\n- Use `PushNotificationAppSender` to specify the name of the `App`\n  to be used for sending the Push Notification(s).\n\n- Use `AgentIdSender` or `AgentIdSender` to send the Push Notification(s)\n  from an `Agent` or `Agent Pool`.",
                    "type": "object",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PushNotificationCredentialSender"
                      },
                      {
                        "title": "PushNotificationAppSender",
                        "type": "object",
                        "properties": {
                          "app_name": {
                            "description": "The name of the `App` to be used for sending the Push Notification(s)",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/PushNotificationAppName"
                              }
                            ]
                          }
                        },
                        "required": [
                          "app_name"
                        ]
                      },
                      {
                        "$ref": "#/components/schemas/AgentIdSender"
                      },
                      {
                        "$ref": "#/components/schemas/AgentPoolIdSender"
                      }
                    ]
                  },
                  "to": {
                    "title": "SendPushNotificationsRequestTo",
                    "description": "A list of recipients to send the push notifications(s) to.",
                    "type": "array",
                    "items": {
                      "title": "SendPushNotificationsRecipient",
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "SendPushNotificationsDirectRecipient",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/PushNotificationDirectRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/RecipientVariables"
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendPushNotificationsContactRecipient",
                          "properties": {
                            "contact_id": {
                              "$ref": "#/components/schemas/ContactId"
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "contact_id"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendPushNotificationsAudienceRecipient",
                          "properties": {
                            "audience_id": {
                              "$ref": "#/components/schemas/AudienceId"
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "audience_id"
                          ]
                        }
                      ]
                    }
                  },
                  "content": {
                    "title": "SendPushNotificationsContent",
                    "description": "The content of the Push Notification.\n- Use `PushNotificationContentBody` to construct content with body but no images.\n- Use `PushNotificationContentBodyWithImages` to construct content with\n  body and images.\n\n- Use `PushNotificationContentImages` to construct content with images but no body.\n- Use `PushNotificationContentTemplate` to reference a stored `Content` template.\n***\n* Use the [Liquid](https://shopify.github.io/liquid/) templating language for personalization in any text-based field.\n* When using a templated content, use the `variables` field on each recipient to specify the values to substitute.\n* For each variable you specify in your template, you should have a matching key in each recipient's `variables` object.\n* For each variable in your template, you may also specify a default in `default_variables`.\n* When targeting an `Audience`, it is *mandatory* to define defaults in `default_variables` for all variables in the template.\n* When targeting `Audience` or `Contact` recipients, you may specify `variables` with values that reference stored fields, including custom fields, on the `Contact` -- for example: `${Twilio.Contact.first_name}` or `${Twilio.Contact.my_custom_field}`.",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/PushNotificationContentBody"
                      },
                      {
                        "$ref": "#/components/schemas/PushNotificationContentBodyWithImages"
                      },
                      {
                        "$ref": "#/components/schemas/PushNotificationContentImages"
                      },
                      {
                        "$ref": "#/components/schemas/PushNotificationContentTemplate"
                      }
                    ]
                  },
                  "providers": {
                    "type": "array",
                    "description": "A list of Push Notification providers to constrain the send to.\nLeave undefined to send to all providers.\n\nIf a recipient does not have a token for at least one of these `provider`s,\na push notification will not be sent to this recipient.",
                    "items": {
                      "$ref": "#/components/schemas/PushNotificationProvider"
                    }
                  },
                  "priority": {
                    "$ref": "#/components/schemas/PushNotificationPriority"
                  },
                  "sound": {
                    "$ref": "#/components/schemas/PushNotificationSound"
                  },
                  "schedule": {
                    "$ref": "#/components/schemas/Schedule"
                  },
                  "use_preference": {
                    "type": "object",
                    "title": "SendPushNotificationsRequestUsePreference",
                    "description": "Specify the `Preference` that pertains to the content of the Push Notification\n\n- For each recipient, Twilio will reference the Contact's `Preference` to determine whether to suppress or send the Push Notification.\n\n- Use the `Preferences` API to create and manage Preferences.",
                    "properties": {
                      "bypass_preferences": {
                        "type": "boolean",
                        "description": "Set to `true` to bypass the Contact's Preference and send the Push Notification. This will not update the Contact's Preference."
                      }
                    }
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              },
              "examples": {
                "SendOnePushToDirectEntities": {
                  "summary": "Send one push to direct entities",
                  "value": {
                    "from": {
                      "fcm": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                      "apn": "comms_credential_8qn6ywvpsqzf8eeekrpwrk9h10"
                    },
                    "to": [
                      {
                        "token": "dqWD7WEC83K41WHyufTS7:APA91bFcrVaOLqKeJfSiEutJXX2Tr9wN_tYOwYd8rFA6mYUMBFqdz9n6k3v5EpFA_ukXD89hGqG3OarzbVfdjGnLOIAQfwbQcqJkjQWMrhwElrtU1y3JLDPfnjc0eTJLxzhyYvDFopEh",
                        "provider": "fcm"
                      },
                      {
                        "token": "utJXX2Tr9wN_tYOwYd8rFA6mYUMBFqdz9n6k3v5EpFAukXD89hGq",
                        "provider": "apn"
                      }
                    ],
                    "content": {
                      "title": "Boarding time @ TLL",
                      "body": "Dear customer, you have 1 hour until boarding time at the Tallinn airport",
                      "click_action": {
                        "activity": "open_boarding_info_intent"
                      }
                    },
                    "priority": "high",
                    "sound": "ring"
                  }
                },
                "SendMultiplePushesToIndirectEntitiesWithPersonalization": {
                  "summary": "Send multiple pushes to indirect entities with personalization",
                  "value": {
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "item": "Macbook Pro M2 14"
                        }
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "item": "Macbook Air M3"
                        }
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "item": "iPhone 15",
                          "name": "${Twilio.Contact.first_name}"
                        }
                      }
                    ],
                    "content": {
                      "title": "10% off your wishlist item!",
                      "body": "Hey {{name}}, your wishlist item {{item}} is on sale this weekend only!",
                      "default_variables": {
                        "name": "there"
                      },
                      "click_action": {
                        "activity": "open_offers_page_intent",
                        "url": "https://www.example.com/shops/gordons-gadgets/personal-offers"
                      },
                      "provider_passthrough": {
                        "fcm": {
                          "message": {
                            "data": {
                              "analytics_label": "wishlist_item_on_sale"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "SendAScheduledPush": {
                  "summary": "Send a scheduled push",
                  "value": {
                    "from": {
                      "fcm": "comms_credential_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "token": "dqWD7WEC83K41WHyufTS7:APA91bFcrVaOLqKeJfSiEutJXX2Tr9wN_tYOwYd8rFA6mYUMBFqdz9n6k3v5EpFA_ukXD89hGqG3OarzbVfdjGnLOIAQfwbQcqJkjQWMrhwElrtU1y3JLDPfnjc0eTJLxzhyYvDFopEh",
                        "provider": "fcm"
                      }
                    ],
                    "content": {
                      "title": "Boarding time @ TLL",
                      "body": "Dear customer, you have 1 hour until boarding time at the Tallinn airport",
                      "click_action": {
                        "activity": "open_boarding_info_intent"
                      }
                    },
                    "priority": "high",
                    "sound": "ring",
                    "schedule": {
                      "send_at": [
                        "2023-08-31T14:15:22Z"
                      ]
                    }
                  }
                },
                "SendAPushToAContact": {
                  "summary": "Send a push to a Contact",
                  "value": {
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "name": "${Twilio.Contact.name}",
                          "is_vip": "${Twilio.Contact.is_vip}"
                        }
                      }
                    ],
                    "content": {
                      "title": "Sale on your favorite artist!",
                      "body": "Hey {{ name }}, your favorite artist's new album is on sale right now! {% if is_vip %} As a premium subscriber, you get an extra 25% off! {% endif %}",
                      "click_action": {
                        "activity": "open_offers_page_intent"
                      },
                      "default_variables": {
                        "name": "there",
                        "is_vip": "false"
                      }
                    },
                    "priority": "low",
                    "sound": "saxophone"
                  }
                },
                "SendAPushToAContactSMobileAppWhenThereAreMultiple": {
                  "summary": "Send a push to a Contact's mobile app when there are multiple",
                  "value": {
                    "from": {
                      "app_name": "limonade_eats_app"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "content": {
                      "title": "Your food is here!",
                      "body": "Hey {{Twilio.Contact.name}}, your food has arrived!",
                      "click_action": {
                        "activity": "open_order_page_intent"
                      }
                    },
                    "priority": "high"
                  }
                },
                "Passthrough": {
                  "summary": "Real-world example using provider_passthrough for APNs and FCM",
                  "value": {
                    "from": {
                      "app_name": "limon_eats"
                    },
                    "to": [
                      {
                        "provider": "fcm",
                        "token": "etYMhHDxzwEWPRZCYmuDiz:APA91bGCX-LEiWPL2EKGbwPL-6Z3Obp_BBTpNjX8Hv-upBUwWq-fVoooNj9PCY5KX6JxyN1v8t5HngcpEJLB8Nmg3-TFWX21u2Lr3o56jGxE8nCW46bNBBA"
                      },
                      {
                        "provider": "apn",
                        "token": "a544872136bcf3f7c69abc6b142a51a0308c2991bd7c6d25d788a282091ddb36"
                      }
                    ],
                    "content": {
                      "title": "Your order is out for delivery!",
                      "body": "Track your courier in real time.",
                      "provider_passthrough": {
                        "apn": {
                          "aps": {
                            "alert": {
                              "title": "Your order is out for delivery!",
                              "body": "Track your courier in real time."
                            },
                            "badge": 3,
                            "sound": "delivery_arrived.wav"
                          },
                          "delivery_id": "123456789",
                          "deeplink": "limoneats://order/123456789"
                        },
                        "fcm": {
                          "message": {
                            "notification": {
                              "title": "Your order is out for delivery!",
                              "body": "Track your courier in real time.",
                              "click_action": "OPEN_ORDER_TRACKING"
                            },
                            "data": {
                              "delivery_id": "123456789",
                              "deeplink": "limoneats://order/123456789",
                              "analytics_label": "order_out_for_delivery"
                            },
                            "android": {
                              "priority": "high",
                              "notification": {
                                "sound": "delivery_arrived"
                              }
                            },
                            "webpush": {
                              "headers": {
                                "Urgency": "high"
                              },
                              "notification": {
                                "icon": "https://limoneats.com/assets/delivery.png"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Push Notifications",
        "operationId": "ListPushNotifications",
        "description": "This operation fetches a paginated list of Push Notifications.",
        "tags": [
          "PushNotifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter Push Notifications by Operation Id.",
            "schema": {
              "$ref": "#/components/schemas/OperationId"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Push Notifications created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Push Notifications created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "contact",
            "description": "Filter Push Notifications sent to a specific Contact.",
            "schema": {
              "$ref": "#/components/schemas/ContactId"
            }
          },
          {
            "in": "query",
            "name": "provider",
            "description": "Filter Push Notifications by provider.",
            "schema": {
              "$ref": "#/components/schemas/PushNotificationProvider"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListPushNotificationsResponse",
                  "type": "object",
                  "properties": {
                    "push_notifications": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PushNotificationMetadata"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "push_notifications",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListOfPushNotifications": {
                    "summary": "List of Push Notifications",
                    "value": {
                      "push_notifications": [
                        {
                          "id": "comms_pushnotification_3de3vbxqx0aghtdy1jgf9qdteh",
                          "from": {
                            "fcm": "comms_credential_b554a2dc48d74ff03500c2a582349cad"
                          },
                          "to": {
                            "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                            "provider": "fcm",
                            "token": "etYMhHDxzwEWPRZCYmuDiz:APA91bGCX-LEiWPL2EKGbwPL-6Z3Obp_BBTpNjX8Hv-upBUwWq-fVoooNj9PCY5KX6JxyN1v8t5HngcpEJLB8Nmg3-TFWX21u2Lr3o56jGxE8nCW46bNBBA"
                          },
                          "status": "sent",
                          "app_name": "limon_eats_app",
                          "priority": "high",
                          "sound": null,
                          "related": [],
                          "tags": {},
                          "scheduled_for": null,
                          "created_at": "2025-05-30T17:24:46Z",
                          "updated_at": "2025-05-30T17:24:49Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/PushNotifications"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/{push_notification_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/PushNotificationId"
          },
          "name": "push_notification_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch a PushNotification",
        "operationId": "FetchPushNotification",
        "description": "This operation fetches a single Push Notification using its Id.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushNotification"
                },
                "examples": {
                  "PushNotificationSent": {
                    "summary": "Push Notification Sent",
                    "value": {
                      "id": "comms_pushnotification_3de3vbxqx0aghtdy1jgf9qdteh",
                      "from": {
                        "fcm": "comms_credential_b554a2dc48d74ff03500c2a582349cad"
                      },
                      "to": {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "provider": "fcm",
                        "token": "etYMhHDxzwEWPRZCYmuDiz:APA91bGCX-LEiWPL2EKGbwPL-6Z3Obp_BBTpNjX8Hv-upBUwWq-fVoooNj9PCY5KX6JxyN1v8t5HngcpEJLB8Nmg3-TFWX21u2Lr3o56jGxE8nCW46bNBBA"
                      },
                      "content": {
                        "title": "Limon Eats",
                        "body": "Your order is on the way!"
                      },
                      "status": "sent",
                      "app_name": "limon_eats",
                      "priority": "high",
                      "sound": null,
                      "related": [],
                      "tags": {},
                      "scheduled_for": null,
                      "created_at": "2025-05-30T17:24:46Z",
                      "updated_at": "2025-05-30T17:24:49Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "delete": {
        "summary": "Delete a PushNotification",
        "operationId": "DeletePushNotification",
        "description": "This operation deletes a Push Notification",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/Operations": {
      "get": {
        "summary": "List Push Notification Operations",
        "operationId": "ListPushNotificationOperations",
        "description": "This operation fetches a paginated list of Push Notification Operations.",
        "tags": [
          "PushNotifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/CommunicationOperationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListPushNotificationOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "description": "A list of Push Notification Operations.",
                      "items": {
                        "$ref": "#/components/schemas/PushNotificationOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/OperationId"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch a Push Notification Operation",
        "operationId": "FetchPushNotificationOperation",
        "description": "This operation fetches a single Push Notification Operation using its Id.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushNotificationOperation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/Credentials": {
      "post": {
        "summary": "Create Push Credential",
        "operationId": "CreatePushCredential",
        "description": "This operation creates Credentials for sending Push Notifications. A credential must always be registered under an App.\n\nIf an App with the given `app_name` already exists, the credential is added under the App.\nOtherwise, a new App with the given name is created.\n\n* There is a limit of 10 Apps per account\n  * Creating a credential with a new `app_name` while at the App limit will cause the creation to fail.\n* There is a limit of 10 Credentials per App\n  * Creating a credential under an App that already has the maximum amount of credentials will cause the creation to fail.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreatePushCredentialRequest",
                "type": "object",
                "properties": {
                  "credential_type": {
                    "$ref": "#/components/schemas/PushCredentialType"
                  },
                  "content": {
                    "$ref": "#/components/schemas/PushCredentialContent"
                  },
                  "is_default": {
                    "$ref": "#/components/schemas/AccountPushCredentialFlag"
                  },
                  "app_name": {
                    "description": "The name of the `App` that this Credential will be associated with.\n\nTwilio will automatically create a new Push Notification `App` on your behalf\nwhen you create a Credential with a new `app_name`.\n\nThe first `App` created will automatically be assigned as the default App.",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PushNotificationAppName"
                      }
                    ]
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "credential_type",
                  "content",
                  "app_name"
                ]
              },
              "examples": {
                "CreateANewApnCertificateCredential": {
                  "summary": "Create a new APN Certificate Credential",
                  "value": {
                    "credential_type": "apn",
                    "app_name": "limonade_app",
                    "content": {
                      "certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tTUlJRm5UQ0NCSVdnQXdJQkFnSUlBank5SDg0OStFOHdEUVlKS29aSWh2Y05BUUVGQlFBd2daWXhDekFKQmdOVi4uLi4uQT09LS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
                      "private_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLU1JSUVwUUlCQUFLQ0FRRUF1eWYvbE5ySDljazhEbU55bzNmR2d2Q0kxbDlzK2NtQlkzV0l6K2NVRHFteGlpZVIKLi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
                    }
                  }
                },
                "CreateANewApnCertificateCredentialForSandbox": {
                  "summary": "Create a new APN Certificate Credential  for Sandbox",
                  "value": {
                    "credential_type": "apn_sandbox",
                    "app_name": "limonade_app",
                    "content": {
                      "certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tTUlJRm5UQ0NCSVdnQXdJQkFnSUlBank5SDg0OStFOHdEUVlKS29aSWh2Y05BUUVGQlFBd2daWXhDekFKQmdOVi4uLi4uQT09LS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
                      "private_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLU1JSUVwUUlCQUFLQ0FRRUF1eWYvbE5ySDljazhEbU55bzNmR2d2Q0kxbDlzK2NtQlkzV0l6K2NVRHFteGlpZVIKLi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
                    }
                  }
                },
                "CreateANewApnSigningKeyCredential": {
                  "summary": "Create a new APN Signing Key Credential",
                  "value": {
                    "credential_type": "apn",
                    "app_name": "limonade_app",
                    "content": {
                      "key_id": "3CGDUC4Q4G",
                      "signing_key": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR1RBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJIa3dkd0lCQVFRZ3l1QXp3aFR5bFhKRVhYUXoKWWtDaSs4WEFlUkhvamFlQi9EZXhvTkJET1BxZ0NnWUlLb1pJemowREFRZWhSQU5DQUFUcWlvSGVMSlpkQ1lQZApsU2Judk4wTFpYeGFrTkVSRlMvR1JON2VzSkJCWGNKQmJKWEhYV1JUQllMVXBRZ2RnV3dBYlIxYWdxN0tESGJYCmZ1Q3JjaHFhCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="
                    }
                  }
                },
                "CreateANewApnSigningKeyCredentialForSandbox": {
                  "summary": "Create a new APN Signing Key Credential  for Sandbox",
                  "value": {
                    "credential_type": "apn_sandbox",
                    "app_name": "limonade_app",
                    "content": {
                      "key_id": "3CGDUC4Q4G",
                      "signing_key": "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JR1RBZ0VBTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEJIa3dkd0lCQVFRZ3l1QXp3aFR5bFhKRVhYUXoKWWtDaSs4WEFlUkhvamFlQi9EZXhvTkJET1BxZ0NnWUlLb1pJemowREFRZWhSQU5DQUFUcWlvSGVMSlpkQ1lQZApsU2Judk4wTFpYeGFrTkVSRlMvR1JON2VzSkJCWGNKQmJKWEhYV1JUQllMVXBRZ2RnV3dBYlIxYWdxN0tESGJYCmZ1Q3JjaHFhCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0="
                    }
                  }
                },
                "CreateANewFcmCredential": {
                  "summary": "Create a new FCM Credential",
                  "value": {
                    "credential_type": "fcm",
                    "app_name": "limonade_app",
                    "content": {
                      "private_key": "eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6Im15LXByb2plY3QiLCJwcml2YXRlX2tleV9pZCI6Im15LXByaXZhdGUta2V5LWlkIiwicHJpdmF0ZV9rZXkiOiItLS0tLUJFR0lOIFBSSVZBVEUgS0VZLS0tLS1cbiBleGFtcGxlIHByaXZhdGUga2V5IFxuLS0tLS1FTkQgUFJJVkFURSBLRVktLS0tLVxuIn0="
                    }
                  }
                },
                "CreateANewDefaultCredential": {
                  "summary": "Create a new Default Credential",
                  "value": {
                    "credential_type": "apn",
                    "app_name": "limonade_app",
                    "content": {
                      "certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tTUlJRm5UQ0NCSVdnQXdJQkFnSUlBank5SDg0OStFOHdEUVlKS29aSWh2Y05BUUVGQlFBd2daWXhDekFKQmdOVi4uLi4uQT09LS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
                      "private_key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLU1JSUVwUUlCQUFLQ0FRRUF1eWYvbE5ySDljazhEbU55bzNmR2d2Q0kxbDlzK2NtQlkzV0l6K2NVRHFteGlpZVIKLi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
                    },
                    "is_default": true
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Push Credentials",
        "operationId": "ListPushCredentials",
        "description": "This operation fetches a paginated list of Push Credentials.",
        "tags": [
          "PushNotifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Push Credentials created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Push Credentials created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "app_name",
            "description": "Filter Push Credentials by App name",
            "schema": {
              "$ref": "#/components/schemas/PushNotificationAppName"
            }
          },
          {
            "in": "query",
            "name": "credential_type",
            "description": "Filter Push Credentials by type.",
            "schema": {
              "$ref": "#/components/schemas/PushCredentialType"
            }
          },
          {
            "in": "query",
            "name": "is_default",
            "description": "Filter only is_default credentials.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListPushCredentialsResponse",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PushNotificationCredential"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "credentials",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListOfCredentialsFilteredToASpecificApp": {
                    "summary": "A list of Credentials filtered to a specific App",
                    "value": {
                      "credentials": [
                        {
                          "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                          "credential_type": "apn",
                          "is_default": true,
                          "app_name": "limonade_app",
                          "related": [
                            {
                              "id": "limonade_app",
                              "name": "push_notification_app",
                              "uri": "/PushNotifications/Apps/limonade_app"
                            }
                          ],
                          "tags": {},
                          "created_at": "2023-08-31T14:15:22Z",
                          "updated_at": "2023-08-31T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                          "credential_type": "fcm",
                          "is_default": true,
                          "app_name": "limonade_app",
                          "related": [
                            {
                              "id": "limonade_app",
                              "name": "push_notification_app",
                              "uri": "/PushNotifications/Apps/limonade_app"
                            }
                          ],
                          "tags": {},
                          "created_at": "2023-08-31T14:15:22Z",
                          "updated_at": "2023-08-31T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/PushNotifications/Credentials"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/Credentials/{credential_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/CredentialId"
          },
          "name": "credential_id",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update a Push Credential",
        "operationId": "PatchPushCredential",
        "description": "This operation partially updates a Push Credential.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdatePushCredentialRequest",
                "type": "object",
                "properties": {
                  "is_default": {
                    "$ref": "#/components/schemas/AccountPushCredentialFlag"
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "is_default"
                ]
              },
              "examples": {
                "UpdateToDefaultCredential": {
                  "summary": "Update to Default Credential",
                  "value": {
                    "is_default": true
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch a Push Credential",
        "operationId": "FetchPushCredential",
        "description": "This operation fetches a single Push Notifications Credential using its Id.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushNotificationCredential"
                },
                "examples": {
                  "APNCertificateCredential": {
                    "summary": "An APN Certificate Credential",
                    "value": {
                      "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                      "credential_type": "apn",
                      "is_default": false,
                      "app_name": "limonade_app",
                      "related": [
                        {
                          "id": "limonade_app",
                          "name": "push_notification_app",
                          "uri": "/PushNotifications/Apps/limonade_app"
                        }
                      ],
                      "tags": {},
                      "created_at": "2023-08-31T14:15:22Z",
                      "updated_at": "2023-08-31T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "APNCertificateSandboxCredential": {
                    "summary": "An APN Certificate Credential for Sandbox",
                    "value": {
                      "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                      "credential_type": "apn_sandbox",
                      "is_default": false,
                      "app_name": "limonade_app",
                      "related": [
                        {
                          "id": "limonade_app",
                          "name": "push_notification_app",
                          "uri": "/PushNotifications/Apps/limonade_app"
                        }
                      ],
                      "tags": {},
                      "created_at": "2023-08-31T14:15:22Z",
                      "updated_at": "2023-08-31T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "SigningKeyCredential": {
                    "summary": "An APN Signing Key Credential",
                    "value": {
                      "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                      "credential_type": "apn",
                      "is_default": false,
                      "app_name": "limonade_app",
                      "related": [
                        {
                          "id": "limonade_app",
                          "name": "push_notification_app",
                          "uri": "/PushNotifications/Apps/limonade_app"
                        }
                      ],
                      "tags": {},
                      "created_at": "2023-08-31T14:15:22Z",
                      "updated_at": "2023-08-31T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "SandboxSigningKeyCredential": {
                    "summary": "An APN Signing Key Credential for Sandbox",
                    "value": {
                      "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                      "credential_type": "apn_sandbox",
                      "is_default": false,
                      "app_name": "limonade_app",
                      "related": [
                        {
                          "id": "limonade_app",
                          "name": "push_notification_app",
                          "uri": "/PushNotifications/Apps/limonade_app"
                        }
                      ],
                      "tags": {},
                      "created_at": "2023-08-31T14:15:22Z",
                      "updated_at": "2023-08-31T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "FCMCredential": {
                    "summary": "FCM Credential",
                    "value": {
                      "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                      "credential_type": "fcm",
                      "is_default": false,
                      "app_name": "limonade_app",
                      "related": [
                        {
                          "id": "limonade_app",
                          "name": "push_notification_app",
                          "uri": "/PushNotifications/Apps/limonade_app"
                        }
                      ],
                      "tags": {},
                      "created_at": "2023-08-31T14:15:22Z",
                      "updated_at": "2023-08-31T14:15:22Z",
                      "deleted_at": null
                    }
                  },
                  "DefaultCredential": {
                    "summary": "A Default Credential",
                    "value": {
                      "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                      "credential_type": "apn",
                      "is_default": true,
                      "app_name": "limonade_app",
                      "related": [
                        {
                          "id": "limonade_app",
                          "name": "push_notification_app",
                          "uri": "/PushNotifications/Apps/limonade_app"
                        }
                      ],
                      "tags": {},
                      "created_at": "2023-08-31T14:15:22Z",
                      "updated_at": "2023-08-31T14:15:22Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "delete": {
        "summary": "Delete a Push Credential",
        "operationId": "DeletePushCredential",
        "description": "This operation deletes a Push Credential. \n\nIf all Credentials belonging to an App are deleted, the App and its Device Registrations are deleted as well.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/Apps": {
      "get": {
        "summary": "List Push Notification Apps",
        "operationId": "ListPushNotificationApps",
        "description": "List an account's Apps that match the provided filters.\n\nAn account may have up to 10 Apps at a time.",
        "tags": [
          "PushNotifications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Push Notification Apps created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Push Notification Apps created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "is_default",
            "description": "Filter by `App.is_default`.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListPushNotificationAppsResponse",
                  "type": "object",
                  "properties": {
                    "apps": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PushNotificationApp"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "apps",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListOfPushApps": {
                    "summary": "List of Push Apps",
                    "value": {
                      "apps": [
                        {
                          "name": "limonade_app",
                          "is_default": true,
                          "default_credentials": [
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                              "credential_type": "fcm",
                              "created_at": "2023-08-31T14:15:22Z",
                              "updated_at": "2023-08-31T14:15:22Z"
                            },
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq9",
                              "credential_type": "apn",
                              "created_at": "2023-08-31T14:15:22Z",
                              "updated_at": "2023-08-31T14:15:22Z"
                            }
                          ],
                          "related": [
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq9",
                              "name": "credential",
                              "uri": "/PushNotifications/Credentials/comms_credential_01h9krwprkeee8fzqspvwy6nq9"
                            },
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                              "name": "credential",
                              "uri": "/PushNotifications/Credentials/comms_credential_01h9krwprkeee8fzqspvwy6nq8"
                            },
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq7",
                              "name": "credential",
                              "uri": "/PushNotifications/Credentials/comms_credential_01h9krwprkeee8fzqspvwy6nq7"
                            }
                          ],
                          "tags": {},
                          "created_at": "2023-08-31T14:15:22Z",
                          "updated_at": "2023-08-31T14:15:22Z",
                          "deleted_at": null
                        },
                        {
                          "name": "limonade_eats_app",
                          "is_default": false,
                          "default_credentials": [
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                              "credential_type": "fcm",
                              "created_at": "2023-08-31T14:15:22Z",
                              "updated_at": "2023-08-31T14:15:22Z"
                            },
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                              "credential_type": "apn",
                              "created_at": "2023-08-31T14:15:22Z",
                              "updated_at": "2023-08-31T14:15:22Z"
                            }
                          ],
                          "related": [
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq9",
                              "name": "credential",
                              "uri": "/PushNotifications/Credentials/comms_credential_01h9krwprkeee8fzqspvwy6nq5"
                            },
                            {
                              "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                              "name": "credential",
                              "uri": "/PushNotifications/Credentials/comms_credential_01h9krwprkeee8fzqspvwy6nq6"
                            }
                          ],
                          "tags": {},
                          "created_at": "2023-08-31T14:15:22Z",
                          "updated_at": "2023-08-31T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/PushNotifications/Apps"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/PushNotifications/Apps/{app_name}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/PushNotificationAppName"
          },
          "name": "app_name",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update a Push Notification App",
        "operationId": "PatchPushNotificationApp",
        "description": "This operation partially updates a Push Notification App.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdatePushNotificationAppRequest",
                "type": "object",
                "properties": {
                  "is_default": {
                    "type": "boolean",
                    "description": "Whether this `App` is the default (Push Notification) App for the Account.\n\nSet to `true` to set this `App` as the default `App`."
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "is_default"
                ]
              },
              "examples": {
                "UpdateDefaultApp": {
                  "summary": "Update default App",
                  "value": {
                    "is_default": true
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Fetch a Push Notification App",
        "operationId": "FetchPushNotificationApp",
        "description": "This operation fetches a single Push Notification `App` using its name.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PushNotificationApp"
                },
                "examples": {
                  "PushNotificationApp": {
                    "summary": "Push Notification App",
                    "value": {
                      "name": "limonade_app",
                      "is_default": true,
                      "default_credentials": [
                        {
                          "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                          "credential_type": "fcm",
                          "created_at": "2023-08-31T14:15:22Z",
                          "updated_at": "2023-08-31T14:15:22Z"
                        },
                        {
                          "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                          "credential_type": "apn",
                          "created_at": "2023-08-31T14:15:22Z",
                          "updated_at": "2023-08-31T14:15:22Z"
                        }
                      ],
                      "related": [
                        {
                          "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq9",
                          "name": "credential",
                          "uri": "/PushNotifications/Credentials/comms_credential_01h9krwprkeee8fzqspvwy6nq9"
                        },
                        {
                          "id": "comms_credential_01h9krwprkeee8fzqspvwy6nq8",
                          "name": "credential"
                        }
                      ],
                      "tags": {},
                      "created_at": "2023-08-31T14:15:22Z",
                      "updated_at": "2023-08-31T14:15:22Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "delete": {
        "summary": "Delete a Push Notification App",
        "operationId": "DeletePushNotificationApp",
        "description": "Delete an App and all the Credentials and Device Registrations associated with it.",
        "tags": [
          "PushNotifications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Communications": {
      "post": {
        "summary": "Send Communications",
        "operationId": "SendCommunications",
        "description": "This operation sends communications to audiences across all channels. \nThis operation can also be used to directly send Messages, Emails, and Push Notifications.",
        "tags": [
          "Communications"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SendCommunicationsRequest",
                "type": "object",
                "properties": {
                  "from": {
                    "title": "SendCommunicationsRequestFrom",
                    "description": "The sending identity to associate with the Communication(s).",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/MessageAddressSender"
                      },
                      {
                        "$ref": "#/components/schemas/EmailAddressSender"
                      },
                      {
                        "$ref": "#/components/schemas/PushNotificationCredentialSender"
                      },
                      {
                        "$ref": "#/components/schemas/AgentIdSender"
                      },
                      {
                        "$ref": "#/components/schemas/CommunicationAgentPoolIdSender"
                      }
                    ]
                  },
                  "to": {
                    "title": "SendCommunicationsRequestTo",
                    "description": "A list of recipients to send the Communication(s) to.",
                    "type": "array",
                    "items": {
                      "title": "SendCommunicationsRequestRecipient",
                      "oneOf": [
                        {
                          "type": "object",
                          "title": "CommunicationAddressRecipient",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/CommunicationRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/RecipientVariables"
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "title": "SendCommunicationsMultiAddressRecipient",
                          "description": "A recipient for communications. Provide a list of addresses for a recipient and Twilio will pick the best one. Twilio will automatically handle errors and retry across channels if necessary.",
                          "properties": {
                            "addresses": {
                              "type": "array",
                              "items": {
                                "$ref": "#/components/schemas/CommunicationRecipient"
                              },
                              "minItems": 1,
                              "maxItems": 10
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "addresses"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "CommunicationContactRecipient",
                          "properties": {
                            "contact_id": {
                              "$ref": "#/components/schemas/ContactId"
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "contact_id"
                          ]
                        },
                        {
                          "type": "object",
                          "title": "CommunicationAudienceRecipient",
                          "properties": {
                            "audience_id": {
                              "$ref": "#/components/schemas/AudienceId"
                            },
                            "variables": {
                              "$ref": "#/components/schemas/ContentPersonalization"
                            }
                          },
                          "required": [
                            "audience_id"
                          ]
                        }
                      ]
                    },
                    "minItems": 1
                  },
                  "message": {
                    "title": "SendCommunicationsRequestMessage",
                    "description": "If you would like sending a `Message` to be an eligible outcome of the request, then define the `content` and processing options here.",
                    "type": "object",
                    "properties": {
                      "content": {
                        "title": "SendCommunicationsRequestMessagesContent",
                        "description": "If the Communication request results in sending a Message, this is the preferred content, if specified.",
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/MessageContentTextWithMedia"
                          },
                          {
                            "$ref": "#/components/schemas/MessageContentTemplate"
                          },
                          {
                            "$ref": "#/components/schemas/MessageContentChannelModules"
                          }
                        ]
                      }
                    },
                    "required": [
                      "content"
                    ]
                  },
                  "email": {
                    "title": "SendCommunicationsRequestEmail",
                    "description": "If you would like sending an `Email` to be an eligible outcome of the request, then define the `content` and processing options here.",
                    "type": "object",
                    "properties": {
                      "content": {
                        "title": "SendCommunicationsRequestEmailsContent",
                        "description": "If the Communication results in sending an Email, this is the preferred content, if specified.",
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/EmailHtmlContent"
                          },
                          {
                            "$ref": "#/components/schemas/EmailContentTemplate"
                          }
                        ]
                      },
                      "reply_to": {
                        "title": "ProcessingOptionsEmailsReplyTo",
                        "type": "array",
                        "items": {
                          "title": "ProcessingOptionsEmailsReplyToRecipient",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/EmailAddressRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/ContactRecipient"
                            }
                          ]
                        }
                      },
                      "cc": {
                        "title": "ProcessingOptionsEmailsCC",
                        "type": "array",
                        "description": "A list of recipients to carbon-copy ('cc') emails to.\nRecipients will have visibility of eachother's addresses.",
                        "maxItems": 50,
                        "items": {
                          "title": "ProcessingOptionsEmailsCCRecipient",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/EmailAddressRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/ContactRecipient"
                            }
                          ]
                        }
                      },
                      "bcc": {
                        "title": "ProcessingOptionsEmailsBCC",
                        "type": "array",
                        "description": "A list of recipients to blindly carbon-copy ('cc') emails to.\nRecipients will NOT have visibility of eachother's addresses.",
                        "maxItems": 50,
                        "items": {
                          "title": "ProcessingOptionsEmailsBCCRecipient",
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/EmailAddressRecipient"
                            },
                            {
                              "$ref": "#/components/schemas/ContactRecipient"
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "content"
                    ]
                  },
                  "push_notification": {
                    "title": "SendCommunicationsRequestPushNotification",
                    "description": "If you would like sending `Push Notification` to be an eligible outcome of the request, then define the `content` and processing options here.",
                    "type": "object",
                    "properties": {
                      "providers": {
                        "type": "array",
                        "description": "Optionally specify the name of the Push Notification provider\nto constrain the send to when you are working with multiple apps.\n\nThe recipient(s) must have a token for at least one of these `provider`s\nor the send will fail.",
                        "items": {
                          "$ref": "#/components/schemas/PushNotificationProvider"
                        }
                      },
                      "content": {
                        "title": "SendCommunicationsRequestPushNotificationsContent",
                        "description": "If the Communication results in sending a Push Notification, this is the preferred content, if specified.",
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/PushNotificationContentBody"
                          },
                          {
                            "$ref": "#/components/schemas/PushNotificationContentBodyWithImages"
                          },
                          {
                            "$ref": "#/components/schemas/PushNotificationContentImages"
                          },
                          {
                            "$ref": "#/components/schemas/PushNotificationContentTemplate"
                          }
                        ]
                      },
                      "priority": {
                        "$ref": "#/components/schemas/PushNotificationPriority"
                      },
                      "sound": {
                        "$ref": "#/components/schemas/PushNotificationSound"
                      }
                    },
                    "required": [
                      "content"
                    ]
                  },
                  "session_id": {
                    "$ref": "#/components/schemas/SessionId"
                  },
                  "schedule": {
                    "$ref": "#/components/schemas/Schedule"
                  },
                  "use_preference": {
                    "type": "object",
                    "title": "SendCommunicationsRequestUsePreference",
                    "description": "Specify the `Preference` that pertains to the content of the Communication.\n- For each recipient, Twilio will reference the Contact's `Preference` to\n  determine whether to suppress or send the Communication.\n\n- Use the `Preferences` API to create and manage Preferences.",
                    "properties": {
                      "bypass_preferences": {
                        "type": "boolean",
                        "description": "Set to `true` to bypass the Contact's Preference and send the Message. This will not update the Contact's Preference."
                      }
                    }
                  },
                  "use_domain": {
                    "type": "object",
                    "title": "SendCommunicationsRequestUseDomain",
                    "allOf": [
                      {
                        "description": "Specify the name of the `Domain` to use for link shortening.\n- Use the `Domains` API to create and manage `Domains`."
                      }
                    ]
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                },
                "required": [
                  "to"
                ]
              },
              "examples": {
                "SendAcrossMultipleChannelsSpecifyRecipientAndWhatToSay": {
                  "summary": "Send across multiple channels, specify recipient and what to say",
                  "value": {
                    "to": [
                      {
                        "addresses": [
                          {
                            "address": "+19142021337",
                            "channel": "whatsapp"
                          }
                        ]
                      },
                      {
                        "address": "donnie@example.com",
                        "channel": "email"
                      }
                    ],
                    "message": {
                      "content": {
                        "text": "Sometimes you eat the bar, and sometimes the bar, well, it eats you..."
                      }
                    },
                    "push_notification": {
                      "content": {
                        "body": "Sometimes you eat the bar, and sometimes the bar, well, it eats you..."
                      }
                    }
                  }
                },
                "SendToASingleContactLetTwilioPickTheChannel": {
                  "summary": "Send to a single Contact, let Twilio pick the channel",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "message": {
                      "content": {
                        "text": "This is the content for a Message!"
                      }
                    },
                    "push_notification": {
                      "content": {
                        "body": "This is the content for a Push Notification!"
                      }
                    },
                    "email": {
                      "content": {
                        "content_id": "HX78e8e67fc0246521490fb9907fd0c165"
                      }
                    }
                  }
                },
                "SendToTwoContactsPersonalizedContentOptimizedChannel": {
                  "summary": "Send to two Contacts, personalized content, optimized channel",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "greeting": "Good morning"
                        }
                      },
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "greeting": "Good afternoon"
                        }
                      }
                    ],
                    "message": {
                      "content": {
                        "text": "{{ greeting }}, we have dropped a special offer for you in your account for the holidays!",
                        "default_variables": {
                          "greeting": "Good day"
                        }
                      }
                    },
                    "email": {
                      "content": {
                        "html": "<html><body>\n  {{ greeting }},\n  we have dropped a special offer for you in your account for the holidays!\n</body></html>",
                        "default_variables": {
                          "greeting": "Good day"
                        }
                      }
                    }
                  }
                },
                "SendToAnAudienceWithChannelOptimizationThroughAnAgentPool": {
                  "summary": "Send to an audience with channel optimization through an agent pool",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "message": {
                      "content": {
                        "text": "We've got information! New stuff has come to light."
                      }
                    },
                    "push_notification": {
                      "content": {
                        "body": "We've got information! New stuff has come to light."
                      }
                    },
                    "email": {
                      "content": {
                        "content_id": "HX78e8e67fc0246521490fb9907fd0c165"
                      }
                    }
                  }
                },
                "ChannelOptimizationMessageOnlyForAnAudiencePersonalizedContent": {
                  "summary": "Channel optimization (Message only) for an Audience, personalized content",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8",
                        "variables": {
                          "name": "${Twilio.Contact.first_name}"
                        }
                      }
                    ],
                    "message": {
                      "content": {
                        "modules": [
                          {
                            "rcs": {
                              "rich_card": {
                                "standalone_card": {
                                  "card_content": {
                                    "title": "Hi {{ name }} -- we've got information!",
                                    "description": "New stuff has come to light.",
                                    "suggestions": [
                                      {
                                        "action": {
                                          "text": "Learn More",
                                          "postback_data": "bmV3IHNoaX",
                                          "open_url_action": {
                                            "url": "https://dude.info?campaign=bmV3IHNoaX"
                                          }
                                        }
                                      },
                                      {
                                        "action": {
                                          "text": "Talk to an Agent",
                                          "postback_data": "agent_12038907435",
                                          "dial_action": {
                                            "phone_number": "+12038907435"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          {
                            "sms": {
                              "text": "Hi {{ name }} -- we've got information! New stuff has come to light.\nVisit https://dude.info?campaign=bmV3IHNoaX to learn more."
                            }
                          }
                        ],
                        "default_variables": {
                          "name": "there"
                        }
                      }
                    }
                  }
                },
                "ChannelOptimizationForASingleContactViaAnApp": {
                  "summary": "Channel optimization for a single Contact via an app",
                  "value": {
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "push_notification": {
                      "content": {
                        "body": "10% off your next ride! Use code TWILIO10 at checkout."
                      }
                    }
                  }
                },
                "PushNotificationsForAnAudienceViaAnApp": {
                  "summary": "Push notifications for an Audience via an app",
                  "value": {
                    "to": [
                      {
                        "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "push_notification": {
                      "app_name": "limonade_app",
                      "content": {
                        "body": "5% off your next ride! Use code TWILIO5 at checkout."
                      }
                    }
                  }
                },
                "SendTemplatedContentToAContact": {
                  "summary": "Send templated content to a Contact",
                  "value": {
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "email": {
                      "content": {
                        "content_id": "HX78e8e67fc0246521490fb9907fd0c165"
                      }
                    }
                  }
                },
                "SendToAnAudienceWithChannelOptimizationAndConstrainToASpecificMessagingChannel": {
                  "summary": "Send to an audience with channel optimization and constrain to a specific Messaging channel",
                  "value": {
                    "from": {
                      "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    "to": [
                      {
                        "audience_id": "comms_audience_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "message": {
                      "channels": [
                        "whatsapp"
                      ],
                      "content": {
                        "text": "We've got information! New stuff has come to light."
                      }
                    },
                    "email": {
                      "content": {
                        "content_id": "HX78e8e67fc0246521490fb9907fd0c165"
                      }
                    },
                    "use_preference": {
                      "preference_id": "comms_preference_01h9krwprkeee8fzqspvwy6nq8"
                    }
                  }
                },
                "SendAnEmailFromSpecificAddress": {
                  "summary": "Send an Email from specific address",
                  "value": {
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "from": {
                      "address": "coolbeans@coolco.co",
                      "name": "Cool Co"
                    },
                    "email": {
                      "content": {
                        "content_id": "HX78e8e67fc0246521490fb9907fd0c165"
                      }
                    }
                  }
                },
                "SendRcsExplicitly": {
                  "summary": "Send RCS explicitly",
                  "value": {
                    "to": [
                      {
                        "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "from": {
                      "address": "coolsupport_abc123_agent",
                      "channel": "rcs"
                    },
                    "content": {
                      "text": "We've got information! New stuff has come to light."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Communications/{communication_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/CommunicationId"
          },
          "name": "communication_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/Communications/Operations": {
      "get": {
        "summary": "List Communication Operations",
        "operationId": "ListCommunicationOperations",
        "description": "This operation fetches a paginated list of Communication Operations.",
        "tags": [
          "Communications"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/CommunicationOperationStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListCommunicationOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommunicationOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Communications/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/OperationId"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an Communication Operation",
        "operationId": "FetchCommunicationOperation",
        "description": "This operation fetches a single Communication Operation using its Id.",
        "tags": [
          "Communications"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommunicationOperation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Agents": {
      "get": {
        "summary": "List Agents",
        "operationId": "ListAgents",
        "description": "This operation fetches a paginated list of Agents.",
        "tags": [
          "Agents"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "channel",
            "description": "Filter to Agents that match a specific channel.",
            "schema": {
              "$ref": "#/components/schemas/AgentCommunicationChannel"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Agents with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/AgentStatus"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Agents created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Agents created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "A page token that represents the start agent of a page",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAgentsResponse",
                  "description": "A list of Agents and pagination metadata.",
                  "type": "object",
                  "properties": {
                    "agents": {
                      "description": "A list of Agents",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "agents",
                    "pagination"
                  ]
                },
                "examples": {
                  "PageOfAgents": {
                    "summary": "Page of Agents",
                    "value": {
                      "agents": [
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "email",
                          "address": "support@example.com",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        },
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "sms",
                          "address": "+14153902337",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        },
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "rcs",
                          "address": "coolsupport_x12gb_agent",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Agents"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Agents/{agent_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AgentId"
          },
          "name": "agent_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an Agent",
        "operationId": "FetchAgent",
        "description": "This operation fetches a single Agent using its Id.",
        "tags": [
          "Agents"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                },
                "examples": {
                  "MessageAgent": {
                    "summary": "Message Agent",
                    "value": {
                      "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                      "display_name": "Cool Support",
                      "channel": "sms",
                      "address": "+14153902337",
                      "status": "deactivated",
                      "tags": {},
                      "created_at": "2022-08-24T14:15:22Z",
                      "updated_at": "2023-09-13T12:00:24Z"
                    }
                  },
                  "PushAgent": {
                    "summary": "Push Agent",
                    "value": {
                      "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                      "display_name": "limonade_app",
                      "channel": "push",
                      "address": "limonade_app",
                      "status": "activated",
                      "tags": {},
                      "created_at": "2022-08-24T14:15:22Z",
                      "updated_at": "2023-09-13T12:00:24Z"
                    }
                  },
                  "RcsAgent": {
                    "summary": "RCS Agent",
                    "value": {
                      "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                      "display_name": "Cool Support",
                      "channel": "rcs",
                      "address": "coolsupport_abc123_agent",
                      "status": "activated",
                      "tags": {},
                      "created_at": "2022-08-24T14:15:22Z",
                      "updated_at": "2023-09-13T12:00:24Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Agents/Search": {
      "post": {
        "summary": "Search Agents",
        "description": "This operation allows searching on agents on specific filters.",
        "operationId": "SearchAgents",
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "SearchAgentsRequest",
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "The identifier within a channel address space for an actor (e.g. phone number)"
                  },
                  "channel": {
                    "$ref": "#/components/schemas/AgentCommunicationChannel"
                  },
                  "status": {
                    "$ref": "#/components/schemas/AgentStatus"
                  },
                  "page_token": {
                    "type": "string",
                    "description": "A page token that represents the start agent of a page"
                  },
                  "page_size": {
                    "$ref": "#/components/schemas/PageSize"
                  }
                },
                "required": [
                  "address",
                  "channel"
                ]
              },
              "examples": {
                "SearchAddressAndChannel": {
                  "summary": "Search using address and channel filters",
                  "value": {
                    "address": "+14153902337",
                    "channel": "sms"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "SearchAgentsResponse",
                  "description": "A list of Agents that match the search criteria.",
                  "type": "object",
                  "properties": {
                    "agents": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "agents",
                    "pagination"
                  ]
                },
                "examples": {
                  "PageOfAgents": {
                    "summary": "Page of Agents",
                    "value": {
                      "agents": [
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "email",
                          "address": "support@example.com",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        },
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "sms",
                          "address": "+15264013448",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        },
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "rcs",
                          "address": "coolsupport_abc123_agent",
                          "status": "deactivated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Agents"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Agents/Resolve": {
      "parameters": [],
      "post": {
        "summary": "Resolve Agents",
        "description": "This operation resolves a list of eligible Agents for sending and receiving communications for the given criteria.",
        "operationId": "ResolveAgents",
        "tags": [
          "Agents"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "ResolveAgentsRequest",
                "type": "object",
                "oneOf": [
                  {
                    "title": "ResolveAgentsFromAgentPoolRequest",
                    "type": "object",
                    "properties": {
                      "agent_pool_id": {
                        "$ref": "#/components/schemas/AgentPoolId",
                        "description": "The Id of the Agent Pool to use when resolving Agent-Recipient pairs. When an Agent Pool is specified it will constrain the potential results based upon which Agents are members of the pool."
                      },
                      "recipient_addresses": {
                        "title": "ResolveAgentsFromAgentPoolRequestRecipientAddresses",
                        "description": "A collection of addresses for a single human used to resolve agents.",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 100,
                        "items": {
                          "$ref": "#/components/schemas/CommunicationRecipient"
                        }
                      },
                      "channels": {
                        "$ref": "#/components/schemas/AgentCommunicationChannelControl"
                      }
                    },
                    "required": [
                      "recipient_addresses"
                    ]
                  },
                  {
                    "title": "ResolveAgentsFromAddressesRequest",
                    "type": "object",
                    "properties": {
                      "recipient_addresses": {
                        "title": "ResolveAgentsFromAddressesRequestRecipientAddresses",
                        "description": "A collection of addresses for a single human used to resolve agents.",
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 100,
                        "items": {
                          "$ref": "#/components/schemas/CommunicationRecipient"
                        }
                      },
                      "sender_addresses": {
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/MessageAddressSender"
                          },
                          {
                            "$ref": "#/components/schemas/EmailAddressSender"
                          },
                          {
                            "$ref": "#/components/schemas/PushNotificationCredentialSender"
                          }
                        ]
                      },
                      "channels": {
                        "$ref": "#/components/schemas/AgentCommunicationChannelControl"
                      }
                    },
                    "required": [
                      "recipient_addresses",
                      "sender_addresses"
                    ]
                  }
                ]
              },
              "examples": {
                "MultipleAddresses": {
                  "summary": "Multiple Addresses",
                  "value": {
                    "recipient_addresses": [
                      {
                        "address": "+14153902337",
                        "channel": "phone"
                      },
                      {
                        "address": "+14153902337",
                        "channel": "whatsapp"
                      },
                      {
                        "address": "davidpletnjov@example.com",
                        "channel": "email"
                      }
                    ]
                  }
                },
                "UsingAnAgentPool": {
                  "summary": "Using an Agent Pool",
                  "value": {
                    "agent_pool_id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8",
                    "recipient_addresses": [
                      {
                        "address": "+14153902337",
                        "channel": "phone"
                      },
                      {
                        "address": "+14153902337",
                        "channel": "whatsapp"
                      },
                      {
                        "address": "davidpletnjov@example.com",
                        "channel": "email"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ResolveAgentsResponse",
                  "type": "object",
                  "properties": {
                    "results": {
                      "title": "ResolveAgentsResponseResults",
                      "description": "An array of compatible Agent-Recipient pairs to communicate `from` and `to`. Limited to the top 10 highest priority results.",
                      "type": "array",
                      "items": {
                        "title": "ResolveAgentsResponseResult",
                        "type": "object",
                        "description": "An Agent-Recipient pair to communicate `from` and `to`.",
                        "properties": {
                          "from": {
                            "title": "ResolveAgentsResponsePairFrom",
                            "type": "object",
                            "description": "The Agent that is eligible to communicate with the recipient endpoint in the `to` field.",
                            "properties": {
                              "agent_id": {
                                "$ref": "#/components/schemas/AgentId"
                              },
                              "display_name": {
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "description": "The name to associate with the address for sending and receiving communications, visible in the from for some types of communications, like email."
                              },
                              "address": {
                                "type": "string",
                                "description": "The identifier within a channel address space for an actor (e.g. phone number)"
                              },
                              "channel": {
                                "$ref": "#/components/schemas/AgentCommunicationChannel"
                              }
                            },
                            "required": [
                              "agent_id",
                              "display_name",
                              "channel"
                            ]
                          },
                          "to": {
                            "title": "ResolveAgentsResponsePairTo",
                            "type": "object",
                            "description": "The recipient endpoint that is reachable by the Agent in the `from` field.",
                            "properties": {
                              "address": {
                                "description": "The identifier within a channel address space for a recipient (e.g. phone number)",
                                "type": "string"
                              },
                              "channel": {
                                "$ref": "#/components/schemas/CommunicationChannel"
                              }
                            },
                            "required": [
                              "address",
                              "channel"
                            ]
                          },
                          "priority": {
                            "type": "integer",
                            "description": "The priority of the result pair, the lower the value, the more preferred the result. This is useful when there are multiple viable options to reach the intended recipient."
                          }
                        },
                        "required": [
                          "from",
                          "to",
                          "priority"
                        ]
                      }
                    }
                  },
                  "required": [
                    "results"
                  ]
                },
                "examples": {
                  "SingleRecipientAddress": {
                    "summary": "Response for single recipient address",
                    "value": {
                      "results": [
                        {
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "display_name": "Cool Support",
                            "channel": "rcs",
                            "address": "coolsupport_123abc_agent"
                          },
                          "to": {
                            "address": "+14153902337",
                            "channel": "phone"
                          },
                          "priority": 0
                        },
                        {
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "display_name": "Cool Support",
                            "channel": "sms",
                            "address": "+15264013448"
                          },
                          "to": {
                            "address": "+14153902337",
                            "channel": "phone"
                          },
                          "priority": 1
                        }
                      ]
                    }
                  },
                  "TwoRecipientAddressesRcsWhatsapp": {
                    "summary": "Response for two recipient addresses (rcs, whatsapp)",
                    "value": {
                      "results": [
                        {
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "display_name": "Cool Support",
                            "channel": "rcs",
                            "address": "coolsupport_123abc_agent"
                          },
                          "to": {
                            "address": "+14153902337",
                            "channel": "phone"
                          },
                          "priority": 0
                        },
                        {
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "display_name": "Cool VIP Support",
                            "channel": "whatsapp",
                            "address": "+15264013448"
                          },
                          "to": {
                            "address": "+12034458910",
                            "channel": "whatsapp"
                          },
                          "priority": 1
                        },
                        {
                          "from": {
                            "agent_id": "comms_agent_01j3bbabcmfff8fzqspvwy6nq7",
                            "display_name": "Cool Support",
                            "channel": "sms",
                            "address": "+15264013448"
                          },
                          "to": {
                            "address": "+14153902337",
                            "channel": "phone"
                          },
                          "priority": 2
                        }
                      ]
                    }
                  },
                  "NoMatches": {
                    "summary": "Response with no matches",
                    "value": {
                      "results": []
                    }
                  },
                  "EmailAddress": {
                    "summary": "Response for Email address",
                    "value": {
                      "results": [
                        {
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "display_name": "Cool Support",
                            "channel": "email",
                            "address": "support@example.com"
                          },
                          "to": {
                            "address": "seth.limon@example.com",
                            "channel": "email"
                          },
                          "priority": 0
                        }
                      ]
                    }
                  },
                  "MultiplePushNotificationApps": {
                    "summary": "Response with multiple Push Notification apps",
                    "value": {
                      "results": [
                        {
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "display_name": "Cool Support",
                            "channel": "push"
                          },
                          "to": {
                            "address": "comms_deviceregistrations_01h9krwprkeee8fzqspvwy6nq8",
                            "channel": "push"
                          },
                          "priority": 1
                        },
                        {
                          "from": {
                            "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                            "display_name": "Cool Support",
                            "channel": "push"
                          },
                          "to": {
                            "address": "comms_deviceregistrations_8fzqspvwy6nq801h9krwprkeee",
                            "channel": "push"
                          },
                          "priority": 0
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/AgentPools": {
      "post": {
        "summary": "Create an AgentPool",
        "operationId": "CreateAgentPool",
        "description": "This operation creates an AgentPool",
        "tags": [
          "AgentPools"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateAgentPoolRequest",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The friendly name of the AgentPool."
                  },
                  "agents": {
                    "title": "CreateAgentPoolRequestAgents",
                    "description": "The list of Agents to add to the AgentPool.",
                    "type": "array",
                    "items": {
                      "title": "CreateAgentPoolRequestAgent",
                      "description": "Agent identified by Id.",
                      "type": "object",
                      "properties": {
                        "agent_id": {
                          "$ref": "#/components/schemas/AgentId"
                        }
                      }
                    },
                    "minItems": 0,
                    "maxItems": 10000
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                }
              },
              "examples": {
                "CreatingASimpleSmsWhatsappCapableAgentPool": {
                  "summary": "Creating a simple sms & whatsapp capable AgentPool",
                  "value": {
                    "name": "Sales Leads - APAC",
                    "tags": {
                      "region": "APAC"
                    }
                  }
                },
                "CreatingAnAgentPoolWithInitialListOfAgents": {
                  "summary": "Creating an AgentPool with initial list of Agents",
                  "value": {
                    "name": "Sales Leads - APAC",
                    "agents": [
                      {
                        "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                      },
                      {
                        "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                      }
                    ],
                    "tags": {
                      "region": "APAC"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List AgentPools",
        "operationId": "ListAgentPools",
        "description": "This operation fetches a paginated list of AgentPools.",
        "tags": [
          "AgentPools"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to AgentPools created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to AgentPools created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "operation_id",
            "description": "Filter to AgentPools by operation Id.",
            "schema": {
              "$ref": "#/components/schemas/OperationId"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "A page token that represents the start AgentPool of a page",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAgentPoolsResponse",
                  "type": "object",
                  "properties": {
                    "agent_pools": {
                      "description": "A list of AgentPools.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AgentPool"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/AgentPools/{agent_pool_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AgentPoolId"
          },
          "name": "agent_pool_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an AgentPool",
        "operationId": "FetchAgentPool",
        "description": "This operation fetches a single AgentPool using its Id.",
        "tags": [
          "AgentPools"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPool"
                },
                "examples": {
                  "SimpleSmsWhatsappCapableAgentPool": {
                    "summary": "A simple sms & whatsapp capable AgentPool",
                    "value": {
                      "id": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8",
                      "name": "Customer Support - NAMER",
                      "tags": {},
                      "created_at": "2023-10-02T11:20:00Z",
                      "updated_at": "2023-10-02T11:20:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "patch": {
        "summary": "Update an AgentPool",
        "operationId": "UpdateAgentPool",
        "description": "This operation partially updates an AgentPool",
        "tags": [
          "AgentPools"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateAgentPoolRequest",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The friendly name of the AgentPool"
                  },
                  "tags": {
                    "$ref": "#/components/schemas/Tags"
                  }
                }
              },
              "examples": {
                "UpdateAgentPoolName": {
                  "summary": "Update AgentPool name",
                  "value": {
                    "name": "Customer Support Agents - Tier 1",
                    "tags": {
                      "tier": "1"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an AgentPool",
        "operationId": "DeleteAgentPool",
        "description": "This operation deletes an AgentPool",
        "tags": [
          "AgentPools"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/AgentPools/{agent_pool_id}/Agents": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AgentPoolId"
          },
          "name": "agent_pool_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Add Agents to an AgentPool",
        "operationId": "AddAgentsToAgentPool",
        "description": "This operation adds Agents to an AgentPool",
        "tags": [
          "AgentPools"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithOperation"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AddAgentsToAgentPoolRequest",
                "description": "List of Agents to add to the AgentPool.",
                "type": "array",
                "items": {
                  "title": "AddAgentsToAgentPoolRequestItem",
                  "description": "An Agent identified by Id to add to the AgentPool.",
                  "type": "object",
                  "properties": {
                    "agent_id": {
                      "$ref": "#/components/schemas/AgentId"
                    }
                  },
                  "required": [
                    "agent_id"
                  ]
                },
                "minItems": 1,
                "maxItems": 10000
              },
              "examples": {
                "AddAgentToAgentPool": {
                  "summary": "Add Agent to AgentPool",
                  "value": [
                    {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    }
                  ]
                },
                "AddMultipleAgentsToAgentPool": {
                  "summary": "Add multiple Agents to AgentPool",
                  "value": [
                    {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
                    },
                    {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq7"
                    },
                    {
                      "agent_id": "comms_agent_01h9krwprkeee8fzqspvwy6nq6"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Agents in AgentPool",
        "operationId": "ListAgentsInAgentPool",
        "description": "This operation fetches a paginated list of Agents that belong to a AgentPool.",
        "tags": [
          "AgentPools"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "channel",
            "description": "Filter to Agents that match a specific channel.",
            "schema": {
              "$ref": "#/components/schemas/AgentCommunicationChannel"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Agents with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/AgentStatus"
            }
          },
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Agents created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Agents created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "A page token that represents the start Agent of a page",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAgentsInAgentPoolResponse",
                  "type": "object",
                  "properties": {
                    "agents": {
                      "description": "A list of Agents that belong to the AgentPool.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Agent"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  }
                },
                "examples": {
                  "PageOfAgentsThatBelongToAnAgentPool": {
                    "summary": "Page of Agents that belong to an AgentPool",
                    "value": {
                      "agents": [
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "email",
                          "address": "support@example.com",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        },
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "Cool Support",
                          "channel": "sms",
                          "address": "+14153902337",
                          "status": "deactivated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        },
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "limonade_app",
                          "channel": "push",
                          "address": "limonade_app",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        },
                        {
                          "id": "comms_agent_01h9krwprkeee8fzqspvwy6nq8",
                          "display_name": "limonade_eats_app",
                          "channel": "push",
                          "address": "limonade_eats_app",
                          "status": "activated",
                          "tags": {},
                          "created_at": "2022-08-24T14:15:22Z",
                          "updated_at": "2023-09-13T12:00:24Z"
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/AgentPool/01h9krwprkeee8fzqspvwy6nq9/Agents"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/AgentPools/{agent_pool_id}/Agents/{agent_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/AgentPoolId"
          },
          "name": "agent_pool_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "$ref": "#/components/schemas/AgentId"
          },
          "name": "agent_id",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Remove Agent from AgentPool",
        "operationId": "RemoveAgentFromAgentPool",
        "description": "This operation removes an Agent from an AgentPool",
        "tags": [
          "AgentPools"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/AgentPools/Operations": {
      "get": {
        "summary": "List Agent Pool Operations",
        "operationId": "ListAgentPoolOperations",
        "description": "This operation fetches a paginated list of Agent Pool Operations.",
        "tags": [
          "AgentPools"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "start_date",
            "description": "Filter to Operations created after the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "end_date",
            "description": "Filter to Operations created before the specified date and time.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter to Operations with the specified status.",
            "schema": {
              "$ref": "#/components/schemas/OperationStatus"
            }
          },
          {
            "in": "query",
            "name": "page_token",
            "description": "The token to retrieve the next page of results.",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of resources to return in a page.",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListAgentPoolOperationsResponse",
                  "type": "object",
                  "properties": {
                    "operations": {
                      "type": "array",
                      "description": "A list of AgentPool Operations.",
                      "items": {
                        "$ref": "#/components/schemas/AgentPoolOperation"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  },
                  "required": [
                    "operations",
                    "pagination"
                  ]
                },
                "examples": {
                  "ListAgentPoolOperations": {
                    "summary": "List AgentPool Operations",
                    "value": {
                      "operations": [
                        {
                          "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                          "status": "completed",
                          "stats": {
                            "total": 1,
                            "queued": 0,
                            "created": 1,
                            "failed": 0
                          },
                          "created_at": "2024-04-05T06:20:00Z",
                          "updated_at": "2024-04-05T06:20:00Z"
                        },
                        {
                          "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                          "status": "completed",
                          "stats": {
                            "total": 888,
                            "queued": 111,
                            "created": 777,
                            "failed": 0
                          },
                          "created_at": "2024-04-05T06:20:00Z",
                          "updated_at": "2024-04-05T06:20:00Z"
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Agents/Operations"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/AgentPools/Operations/{operation_id}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/OperationId"
          },
          "name": "operation_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Fetch an AgentPool Operation",
        "operationId": "FetchAgentPoolOperation",
        "description": "This operation fetches a single Agent Pool Operation using its Id.",
        "tags": [
          "AgentPools"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentPoolOperation"
                },
                "examples": {
                  "FetchAgentPoolOperation": {
                    "summary": "Fetch Agent Pool Operation",
                    "value": {
                      "id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                      "status": "completed",
                      "stats": {
                        "total": 1,
                        "queued": 0,
                        "created": 1,
                        "failed": 0
                      },
                      "created_at": "2024-04-05T06:20:00Z",
                      "updated_at": "2024-04-05T06:20:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Domains": {
      "post": {
        "summary": "Create a Domain",
        "operationId": "CreateDomain",
        "description": "This operation creates a Domain. Verification of your Domain is required before you can use it. See 'Check a Domain' next.",
        "tags": [
          "Domains"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateDomainsRequest",
                "type": "array",
                "items": {
                  "title": "CreateDomainsRequestItem",
                  "type": "object",
                  "properties": {
                    "domain_name": {
                      "description": "The domain name to authenticate and create a `Domain` for.",
                      "$ref": "#/components/schemas/DomainName"
                    },
                    "capabilities": {
                      "title": "CreateDomainsRequestItemCapabilities",
                      "description": "The capabilities that the Domain should be configured for.",
                      "type": "array",
                      "items": {
                        "title": "CreateDomainsRequestItemCapabilitiesItem",
                        "oneOf": [
                          {
                            "$ref": "#/components/schemas/DomainCapabilityLinks"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "domain_name",
                    "capabilities"
                  ]
                },
                "minItems": 1,
                "maxItems": 10
              },
              "examples": {
                "CreateDomainAndSubdomainForLinks": {
                  "summary": "create domain and subdomain for links",
                  "value": [
                    {
                      "domain_name": "example.com",
                      "capabilities": [
                        {
                          "type": "links"
                        }
                      ]
                    },
                    {
                      "domain_name": "links.example.com",
                      "capabilities": [
                        {
                          "type": "links"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Domains",
        "operationId": "ListDomains",
        "description": "This operation fetches a paginated list of Domains. Domains are used to authenticate domain names and configure DNS records\n for sending Email and communication links.",
        "tags": [
          "Domains"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page_token",
            "description": "A page token that represents the start domain of a page",
            "schema": {
              "$ref": "#/components/schemas/PageToken"
            }
          },
          {
            "in": "query",
            "name": "page_size",
            "description": "The number of domains to return per page",
            "schema": {
              "$ref": "#/components/schemas/PageSize"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "ListDomainsResponse",
                  "type": "object",
                  "properties": {
                    "domains": {
                      "description": "The list of Domains.",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Domain"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/PaginationMetadata"
                    }
                  }
                },
                "examples": {
                  "ListDomainsWithLinksCapability": {
                    "summary": "List Domains with links capability",
                    "value": {
                      "domains": [
                        {
                          "domain_name": "example.com",
                          "is_ownership_verified": true,
                          "capabilities": [
                            {
                              "type": "links",
                              "is_default": true,
                              "certificate": {
                                "status": "provisioned",
                                "expires_at": "2024-04-05T06:20:00Z",
                                "error": null
                              },
                              "fallback_url": "https://example.com/404"
                            }
                          ],
                          "sub_domains": [
                            {
                              "domain_name": "links.example.com",
                              "capabilities": [
                                {
                                  "type": "links",
                                  "is_default": true,
                                  "certificate": {
                                    "status": "provisioned",
                                    "expires_at": "2024-04-05T06:20:00Z",
                                    "error": null
                                  },
                                  "fallback_url": "https://example.com/404"
                                }
                              ]
                            }
                          ],
                          "dns": [
                            {
                              "role": "verification",
                              "type": "txt",
                              "host": "_twilio",
                              "value": "twilio-domain-verification=9a7830fcc8f428455e8249d9a8541e51",
                              "is_verified": true,
                              "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                              "updated_at": "2023-08-24T14:15:22Z"
                            },
                            {
                              "role": "links",
                              "type": "cname",
                              "host": "tw.example.com",
                              "value": "u1123345.wl001.twilio.com",
                              "is_verified": false,
                              "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                              "updated_at": "2023-08-24T14:15:22Z"
                            },
                            {
                              "role": "links",
                              "type": "a",
                              "host": "@",
                              "value": "1.2.3.4",
                              "is_verified": true,
                              "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                              "updated_at": "2023-08-24T14:15:22Z"
                            },
                            {
                              "role": "links",
                              "type": "a",
                              "host": "@",
                              "value": "1.2.3.5",
                              "is_verified": true,
                              "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                              "updated_at": "2023-08-24T14:15:22Z"
                            },
                            {
                              "role": "links",
                              "type": "a",
                              "host": "@",
                              "value": "1.2.3.6",
                              "is_verified": true,
                              "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                              "updated_at": "2023-08-24T14:15:22Z"
                            }
                          ],
                          "created_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z",
                          "deleted_at": null
                        }
                      ],
                      "pagination": {
                        "next": null,
                        "self": "https://comms.twilio.com/v1/Domains"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    },
    "/Domains/{domain_name}": {
      "parameters": [
        {
          "in": "path",
          "name": "domain_name",
          "description": "The name of the Domain.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/DomainName"
          }
        }
      ],
      "get": {
        "summary": "Fetch a Domain",
        "operationId": "FetchDomain",
        "description": "This operation fetches a Domain by its name.",
        "tags": [
          "Domains"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                },
                "examples": {
                  "DomainWithLinksCapability": {
                    "summary": "Domain with links capability",
                    "value": {
                      "domain_name": "example.com",
                      "is_ownership_verified": true,
                      "capabilities": [
                        {
                          "type": "links",
                          "is_default": true,
                          "certificate": {
                            "status": "provisioned",
                            "expires_at": "2024-04-05T06:20:00Z",
                            "error": null
                          },
                          "fallback_url": "https://example.com/404"
                        }
                      ],
                      "sub_domains": [
                        {
                          "domain_name": "links.example.com",
                          "capabilities": [
                            {
                              "type": "links",
                              "is_default": true,
                              "certificate": {
                                "status": "provisioned",
                                "expires_at": "2024-04-05T06:20:00Z",
                                "error": null
                              },
                              "fallback_url": "https://example.com/404"
                            }
                          ]
                        }
                      ],
                      "dns": [
                        {
                          "role": "verification",
                          "type": "txt",
                          "host": "_twilio",
                          "value": "twilio-domain-verification=9a7830fcc8f428455e8249d9a8541e51",
                          "is_verified": true,
                          "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z"
                        },
                        {
                          "role": "links",
                          "type": "cname",
                          "host": "tw.example.com",
                          "value": "u1123345.wl001.twilio.com",
                          "is_verified": false,
                          "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z"
                        },
                        {
                          "role": "links",
                          "type": "a",
                          "host": "@",
                          "value": "1.2.3.4",
                          "is_verified": true,
                          "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z"
                        },
                        {
                          "role": "links",
                          "type": "a",
                          "host": "@",
                          "value": "1.2.3.5",
                          "is_verified": true,
                          "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z"
                        },
                        {
                          "role": "links",
                          "type": "a",
                          "host": "@",
                          "value": "1.2.3.6",
                          "is_verified": true,
                          "last_verify_attempt_at": "2023-08-24T14:15:22Z",
                          "updated_at": "2023-08-24T14:15:22Z"
                        }
                      ],
                      "created_at": "2023-08-24T14:15:22Z",
                      "updated_at": "2023-08-24T14:15:22Z",
                      "deleted_at": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      },
      "patch": {
        "summary": "Update a Domain",
        "operationId": "UpdateDomain",
        "description": "This operation updates a Domain by its name.",
        "tags": [
          "Domains"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "UpdateDomainRequest",
                "type": "object",
                "properties": {
                  "capabilities": {
                    "type": "array",
                    "description": "The capabilities that the Domain should be configured for.",
                    "items": {
                      "oneOf": [
                        {
                          "$ref": "#/components/schemas/DomainCapabilityLinks"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "capabilities"
                ]
              },
              "examples": {
                "UpdateDomainWithLinksCapability": {
                  "summary": "Update Domain with links capability",
                  "value": {
                    "capabilities": [
                      {
                        "type": "links",
                        "is_default": true
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Links": {
      "post": {
        "summary": "Create Links",
        "operationId": "CreateWrappedLinks",
        "description": "This operation creates a Wrapped Link. Wrapped Links are used to create a wrapped URL for some original URL. See 'Check a Wrapped Link' next.",
        "tags": [
          "Links"
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/Http202ResponseWithResource"
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "CreateWrappedLinkRequest",
                "type": "object",
                "properties": {
                  "domain_name": {
                    "description": "The domain name use for wrapped links, which should have link capability. If empty then use default domain. Returns 400 if default domain is not set.",
                    "$ref": "#/components/schemas/DomainName"
                  },
                  "url": {
                    "description": "The URL to be wrapped.",
                    "type": "string"
                  },
                  "operation_id": {
                    "description": "The operation id to be used for the wrapped link.",
                    "$ref": "#/components/schemas/OperationId"
                  },
                  "contact_id": {
                    "description": "The contact id to be used for the wrapped link.",
                    "$ref": "#/components/schemas/ContactId"
                  },
                  "communication_id": {
                    "description": "The communication id to be used for the wrapped link. This is the UUID part of the communication id.",
                    "$ref": "#/components/schemas/Identifier"
                  }
                },
                "required": [
                  "url",
                  "operation_id",
                  "communication_id",
                  "contact_id"
                ]
              },
              "examples": {
                "CreateShortLink": {
                  "summary": "create short link for a long URL",
                  "value": {
                    "domain_name": "example.com",
                    "url": "https://www.example.com/long-url",
                    "operation_id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                    "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                    "communication_id": "01h9krwprkeee8fzqspvwy6nq8"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/Links/{link_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "link_id",
          "description": "The id of the Link.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/LinkId"
          }
        }
      ],
      "get": {
        "summary": "Fetch a Link",
        "operationId": "FetchLink",
        "description": "This operation fetches a Link by its id.",
        "tags": [
          "Links"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                },
                "examples": {
                  "Link": {
                    "summary": "Link",
                    "value": {
                      "id": "comms_link_01h9krwprkeee8fzqspvwy6nq9",
                      "wrapped_url": "https://example.com/wrapped-url",
                      "original_url": "https://example.com/original-url",
                      "operation_id": "comms_operation_01h9krwprkeee8fzqspvwy6nq8",
                      "contact_id": "comms_contact_01h9krwprkeee8fzqspvwy6nq8",
                      "communication_id": "comms_message_01h9krwprkeee8fzqspvwy6nq8",
                      "created_at": "2023-08-24T14:15:22Z",
                      "expires_at": "2023-11-24T14:15:22Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Http400Response"
          },
          "404": {
            "$ref": "#/components/responses/Http404Response"
          },
          "429": {
            "$ref": "#/components/responses/Http429Response"
          },
          "500": {
            "$ref": "#/components/responses/Http500Response"
          },
          "503": {
            "$ref": "#/components/responses/Http503Response"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "account_id_auth_token": {
        "type": "http",
        "scheme": "basic"
      },
      "access_token_basic": {
        "type": "http",
        "scheme": "basic"
      },
      "access_token_bearer": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "OperationId": {
        "description": "An identifier that correlates resources created in the same (request).\nThis can be used for convenient retrieval of correlated resources and their aggregates.",
        "title": "OperationId",
        "type": "string",
        "pattern": "^comms_operation_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_operation_01h9krwprkeee8fzqspvwy6nq8"
      },
      "ContactId": {
        "description": "A reference to a Contact.",
        "title": "ContactId",
        "type": "string",
        "pattern": "^comms_contact_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_contact_01h9krwprkeee8fzqspvwy6nq8"
      },
      "PageToken": {
        "description": "The token that identifies the page of resources to fetch.",
        "title": "PageToken",
        "type": "string"
      },
      "PageSize": {
        "description": "Total number of items returned in a single page, the minimum is 1 and maximum is 1000. Default is 50.",
        "title": "PageSize",
        "type": "integer",
        "minimum": 1,
        "maximum": 1000,
        "default": 50,
        "example": 50
      },
      "TagsString": {
        "title": "TagsString",
        "type": "string",
        "description": "Custom metadata in the form of key-value pairs.\nMust be in the key value format: key1:value;key2:value;\n\nExample:\n```json\n{\n  \"key1\":\"value1\",\n  \"key2\":\"value2\"\n}\n```\n\nShould be inputted as:\n```\n?tags=key1:value;key2:value;\n```",
        "pattern": "^(?:[a-zA-Z0-9._~-]+:[a-zA-Z0-9._~-]+;){1,10}$",
        "example": "key_1:value;key_2:value;"
      },
      "UserIdentifier": {
        "title": "UserIdentifier",
        "type": "string",
        "description": "A custom string that uniquely identifies a person or end-user.\nFor example, this can be the end-user's username or a UUID4 string or an SHA256 hash.",
        "minLength": 1,
        "maxLength": 36
      },
      "ContactLocation": {
        "type": "object",
        "title": "ContactLocation",
        "description": "The physical geo-location of the Contact.",
        "properties": {
          "latitude": {
            "description": "The latitude coordinate of the Contact's location in decimal degrees.\nPositive values indicate locations north of the equator.",
            "type": "number",
            "format": "float"
          },
          "longitude": {
            "description": "The longitude coordinate of the Contact's location in decimal degrees.\nPositive values indicate locations east of the prime meridian.",
            "type": "number",
            "format": "float"
          },
          "address_line_1": {
            "description": "Contact's first address line.",
            "type": "string"
          },
          "address_line_2": {
            "description": "Contact's second address line.",
            "type": "string"
          },
          "city": {
            "description": "Contact's city.",
            "type": "string"
          },
          "state": {
            "description": "Contact's state.",
            "type": "string"
          },
          "postal_code": {
            "description": "Contact's postal zip code.",
            "type": "string"
          },
          "country_code": {
            "description": "Contact's country, up to two characters.",
            "type": "string",
            "format": "iso-country-code"
          }
        }
      },
      "ContactIdentity": {
        "title": "ContactIdentity",
        "type": "object",
        "description": "An Identity is the schema of a person or user.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The first name of the Contact."
          },
          "last_name": {
            "type": "string",
            "description": "The last name of the Contact."
          },
          "display_name": {
            "type": "string",
            "description": "The name associated with the address for sending and receiving communications, visible for some types of communications like email."
          },
          "user_identifier": {
            "$ref": "#/components/schemas/UserIdentifier"
          },
          "time_zone": {
            "description": "The time zone of the Contact. e.g. `+08:00`. Use `+00:00` for UTC.",
            "type": "string",
            "pattern": "^[+-]\\d{2}:\\d{2}$",
            "example": "+08:00"
          },
          "location": {
            "$ref": "#/components/schemas/ContactLocation"
          },
          "date_of_birth": {
            "description": "Contact's date of birth.",
            "format": "YYYY-MM-DD",
            "type": "string"
          }
        }
      },
      "Address": {
        "title": "Address",
        "type": "string",
        "description": "The identifier that uniquely addresses an actor within a communications channel."
      },
      "ContactCommunicationChannel": {
        "title": "ContactCommunicationChannel",
        "description": "The medium which a unit of communication is transmitted through.\nThese are differentiated by a mix of transmission protocol, network controller/owner, endpoint and address model,\nas well as the model for content of the atomic unit of communication itself.",
        "type": "string",
        "enum": [
          "email",
          "phone",
          "whatsapp",
          "push"
        ]
      },
      "ContactAddress": {
        "type": "object",
        "title": "ContactAddress",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "channel": {
            "$ref": "#/components/schemas/ContactCommunicationChannel"
          }
        },
        "required": [
          "address",
          "channel"
        ]
      },
      "ExternalIdentifier": {
        "title": "ExternalIdentifier",
        "description": "An external identifier is a unique identifier for a Contact in an external system, such as a CRM or CDP.",
        "type": "string"
      },
      "ContactFieldValue": {
        "title": "ContactFieldValue",
        "description": "A custom field value for Contacts.\nThis field can be used to store various types of values such as strings, booleans, numbers, or arrays.",
        "type": "object",
        "properties": {
          "value": {}
        },
        "required": [
          "value"
        ]
      },
      "ContactCustomFields": {
        "title": "ContactCustomFields",
        "type": "object",
        "description": "Custom fields in the form of key-value pairs.\nMaximum size of a custom field key is 128 characters.\nMaximum size of a custom field is 256 characters.\nThere can be a maximum of 10 custom fields.",
        "additionalProperties": {
          "$ref": "#/components/schemas/ContactFieldValue"
        },
        "maxProperties": 10,
        "example": {
          "favorite_color": {
            "value": "purple"
          },
          "favorite_number": {
            "value": 42
          },
          "is_favorite_color_purple": {
            "value": true
          },
          "colors": {
            "value": [
              "purple",
              "blue",
              "green"
            ]
          }
        }
      },
      "Tags": {
        "title": "Tags",
        "type": "object",
        "description": "Custom metadata in the form of key-value pairs.\nMaximum size of a tag key is 128 characters.\nMaximum size of a tag value is 256 characters.\nThere can be a maximum of 10 key-value pairs.",
        "maxProperties": 10,
        "propertyNames": {
          "type": "string",
          "maxLength": 128,
          "pattern": "^[a-zA-Z0-9._~-]+$"
        },
        "additionalProperties": {
          "type": "string",
          "maxLength": 256,
          "pattern": "^[a-zA-Z0-9._~-]+$"
        }
      },
      "RelatedResource": {
        "title": "RelatedResource",
        "type": "object",
        "description": "A reference to a related resource.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the related resource.",
            "enum": [
              "email",
              "message",
              "push_notification",
              "session",
              "contact",
              "audience",
              "media",
              "agent",
              "agent_pool",
              "operation",
              "engagement",
              "credential",
              "push_notification_app"
            ]
          },
          "id": {
            "description": "The identifier of the related resource.",
            "type": "string"
          },
          "uri": {
            "description": "The path to the related resource.",
            "type": "string"
          }
        }
      },
      "Contact": {
        "title": "Contact",
        "type": "object",
        "description": "A Contact represents a person or entity to communicate with.\nIt is composed of one more addresses and some additional identity info.",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactIdentity"
          },
          {
            "title": "ContactBase",
            "type": "object",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/ContactId"
              },
              "addresses": {
                "title": "ContactAddresses",
                "description": "The communications addresses of the Contact (phone number, email, push device token ).",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ContactAddress"
                }
              },
              "external_identifier": {
                "$ref": "#/components/schemas/ExternalIdentifier"
              },
              "custom_fields": {
                "$ref": "#/components/schemas/ContactCustomFields"
              },
              "tags": {
                "$ref": "#/components/schemas/Tags"
              },
              "related": {
                "title": "ContactRelatedResources",
                "description": "A list of resources that are associated with the Contact.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedResource"
                }
              },
              "created_at": {
                "type": "string",
                "format": "date-time"
              },
              "updated_at": {
                "type": "string",
                "format": "date-time"
              },
              "deleted_at": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              }
            },
            "required": [
              "id",
              "created_at",
              "updated_at",
              "deleted_at"
            ]
          }
        ]
      },
      "PaginationMetadata": {
        "title": "PaginationMetadata",
        "description": "Metadata for paginated of results. \nThis object contains two URLs to navigate through paginated results. \n- Use `next` to retrieve the 'next' page in the result list.\n- Use `self` to retrieve the same page of the result list again. \n- URLs use page tokens and supply the values in the `page_token` query param.",
        "type": "object",
        "properties": {
          "next": {
            "description": "URL to the next page of results using a token.",
            "type": [
              "string",
              "null"
            ]
          },
          "self": {
            "description": "URL to the current page of results using a token.",
            "type": "string"
          }
        },
        "required": [
          "next",
          "self"
        ]
      },
      "TwilioError": {
        "title": "TwilioError",
        "type": "object",
        "description": "A generic error object communicating client and server side API errors.",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Twilio error code."
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the error."
          },
          "info_url": {
            "type": "string",
            "format": "uri",
            "description": "A URL to a [Twilio error directory](https://www.twilio.com/docs/api/errors) page with more information about the error code."
          },
          "context": {
            "description": "A JSON path that identifies the errant field.",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "code",
          "message",
          "info_url",
          "context"
        ],
        "example": {
          "code": 21614,
          "message": "The address specified in the request is not a valid phone number.",
          "info_url": "https://www.twilio.com/docs/api/errors/21614",
          "context": "$.to[0].address"
        }
      },
      "TwilioErrors": {
        "title": "TwilioErrors",
        "type": "object",
        "properties": {
          "errors": {
            "description": "A list of one (or multiple) Twilio API errors.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TwilioError"
            }
          }
        },
        "required": [
          "errors"
        ],
        "example": {
          "errors": [
            {
              "code": 21614,
              "message": "The address specified in the request is not a valid phone number.",
              "info_url": "https://www.twilio.com/docs/api/errors/21614",
              "status": 400,
              "context": "$.to[0].address"
            },
            {
              "code": 21617,
              "message": "The concatenated message text exceeds the 1600 character limit",
              "info_url": "https://www.twilio.com/docs/api/errors/21617",
              "status": 400,
              "context": "$.content.text"
            }
          ]
        }
      },
      "TagsNullable": {
        "title": "TagsNullable",
        "type": [
          "object",
          "null"
        ],
        "nullable": true,
        "description": "Custom metadata in the form of key-value pairs.\nMaximum size of a tag key is 128 characters.\nMaximum size of a tag value is 256 characters.\nThere can be a maximum of 10 key-value pairs.",
        "additionalProperties": {
          "type": "string"
        },
        "maxProperties": 10
      },
      "ContactCustomFieldsNullable": {
        "title": "ContactCustomFieldsNullable",
        "type": [
          "object",
          "null"
        ],
        "nullable": true,
        "description": "Custom fields in the form of key-value pairs.\nMaximum size of a custom field key is 128 characters.\nMaximum size of a custom field is 256 characters.\nThere can be a maximum of 10 custom fields.",
        "additionalProperties": {
          "$ref": "#/components/schemas/ContactFieldValue"
        },
        "maxProperties": 10,
        "example": {
          "favorite_color": {
            "value": "purple"
          },
          "favorite_number": {
            "value": 42
          },
          "is_favorite_color_purple": {
            "value": true
          },
          "colors": {
            "value": [
              "purple",
              "blue",
              "green"
            ]
          }
        }
      },
      "CommunicationChannel": {
        "title": "CommunicationChannel",
        "description": "The medium which a unit of communication is transmitted through.\nThese are differentiated by a mix of transmission protocol, network controller/owner, endpoint and address model,\nas well as the model for content of the atomic unit of communication itself.",
        "type": "string",
        "enum": [
          "email",
          "phone",
          "whatsapp",
          "push"
        ]
      },
      "OperationStatus": {
        "title": "OperationStatus",
        "type": "string",
        "description": "The status of an Operation.",
        "enum": [
          "processing",
          "completed",
          "canceled"
        ]
      },
      "ContactOperation": {
        "title": "ContactOperation",
        "type": "object",
        "description": "A Operation represents the aggregate work to be completed for a POST request to the /Contacts, /Audiences endpoint.\nThe work maybe be performed asynchronously and the Contact Operation resource can be used to track the progress of the work.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OperationId"
          },
          "status": {
            "$ref": "#/components/schemas/OperationStatus"
          },
          "stats": {
            "title": "ContactOperationStats",
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "minimum": 0
              },
              "queued": {
                "type": "integer",
                "minimum": 0
              },
              "created": {
                "type": "integer",
                "minimum": 0
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "stats",
          "created_at",
          "updated_at"
        ]
      },
      "ContactStandardField": {
        "title": "ContactStandardField",
        "type": "object",
        "description": "A standard field that exists on a contact, every account has these.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field, for example 'first_name'.",
            "maxLength": 128
          },
          "type": {
            "type": "string",
            "description": "Type of the field.",
            "enum": [
              "string",
              "boolean",
              "enum",
              "number"
            ]
          },
          "values": {
            "type": "array",
            "description": "List of possible values for the field when the type is enum.",
            "maxItems": 10,
            "items": {
              "type": "string"
            },
            "default": []
          },
          "is_filterable": {
            "type": "boolean",
            "description": "Whether the custom field can be used as a filter. Limited to 3 per account.",
            "default": false
          }
        },
        "required": [
          "name",
          "type",
          "is_filterable"
        ]
      },
      "ContactCustomFieldId": {
        "description": "A reference to a Contact Custom Field.",
        "title": "ContactCustomFieldId",
        "type": "string",
        "pattern": "^comms_customfield_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_customfield_01h9krwprkeee8fzqspvwy6nq8"
      },
      "ContactCustomField": {
        "title": "ContactCustomField",
        "type": "object",
        "description": "A custom field that can be added to a contact.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ContactCustomFieldId",
            "description": "Unique identifier for the custom field, this is generated upon creation of the custom field."
          },
          "name": {
            "type": "string",
            "description": "Name of the custom field, for example 'favorite_color'.",
            "maxLength": 128
          },
          "type": {
            "type": "string",
            "description": "Type of the custom field.",
            "enum": [
              "string",
              "boolean",
              "enum",
              "number",
              "array"
            ]
          },
          "values": {
            "type": "array",
            "description": "List of possible values for the custom field when the type is enum.",
            "maxItems": 10,
            "items": {
              "type": "string"
            },
            "default": []
          },
          "is_filterable": {
            "type": "boolean",
            "description": "Whether the custom field can be used as a filter. Limited to 3 per account.",
            "default": false
          },
          "created_at": {
            "type": "string",
            "description": "Date and time when the custom field was created.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Date and time when the custom field was last updated.",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "description": "Date and time when the custom field was deleted.",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "is_filterable",
          "values",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "ContactFieldString": {
        "title": "ContactFieldString",
        "description": "A custom field of type 'string' for Contacts.\nThis field can be used to store text values.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "string"
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "is_filterable": {
            "type": "boolean",
            "default": false,
            "description": "Whether the custom field can be used as a filter. Limited to 3 per account."
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ContactFieldNumber": {
        "title": "ContactFieldNumber",
        "description": "A custom field of type 'number' for Contacts.\nThis field can be used to store numeric values.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "number"
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "is_filterable": {
            "type": "boolean",
            "default": false,
            "description": "Whether the custom field can be used as a filter. Limited to 3 per account."
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ContactFieldBoolean": {
        "title": "ContactFieldBoolean",
        "description": "A custom field of type boolean for Contacts.\nThis field can be used to store true/false values.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "boolean"
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "is_filterable": {
            "type": "boolean",
            "default": false,
            "description": "Whether the custom field can be used as a filter. Limited to 3 per account."
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ContactFieldStringArray": {
        "title": "ContactFieldStringArray",
        "description": "A custom field of type 'array' for Contacts.\nThis field can be used to store a list of text values.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "array"
          },
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "is_filterable": {
            "type": "boolean",
            "default": false,
            "description": "Whether the custom field can be used as a filter. Limited to 3 per account."
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "ContactFieldEnum": {
        "title": "ContactFieldEnum",
        "description": "Represents a custom field of type 'enum' for contacts.\nThis field type allows you to define a set of predefined, allowed values.\nThe `values` property contains the list of possible values.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 128
          },
          "type": {
            "type": "string",
            "const": "enum"
          },
          "values": {
            "type": "array",
            "maxItems": 10,
            "items": {
              "type": "string"
            }
          },
          "is_filterable": {
            "type": "boolean",
            "default": false,
            "description": "Whether the custom field can be used as a filter. Limited to 3 per account."
          }
        },
        "required": [
          "type",
          "name",
          "values"
        ]
      },
      "AudienceId": {
        "title": "AudienceId",
        "description": "A reference to an Audience.",
        "type": "string",
        "pattern": "^comms_audience_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_audience_01h9krwprkeee8fzqspvwy6nq8"
      },
      "AudienceFilter": {
        "title": "AudienceFilter",
        "description": "A set of predicates for Contacts that defines the Audience. For examples:\n  - `Contact.location.country_code == 'US' AND Contact.custom_fields.industry IN('Technology', 'Finance')`\n  - `Contact.location.country_code == 'EE' AND (Contact.custom_fields.skills IN ='java' OR Contact.custom_fields.employer = 'Twilio')`\n  - `Contact.addresses.channel == 'WhatsApp' AND Contact.tags IN('marketing', 'shipping_notifications')`\n\n*Once a filter is set on an audience it can be updated, but it cannot be removed.*",
        "type": "string",
        "example": "Contact.location.country_code == 'US' AND Contact.custom_fields.industry IN('Technology', 'Finance')"
      },
      "Audience": {
        "title": "Audience",
        "type": "object",
        "description": "An Audience represents a group of people or entities to communicate with. ",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AudienceId"
          },
          "name": {
            "description": "The name of the Audience.",
            "type": "string"
          },
          "filter": {
            "$ref": "#/components/schemas/AudienceFilter"
          },
          "total_contacts": {
            "description": "The approximate number of Contacts in the Audience.",
            "type": "integer"
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "related": {
            "title": "AudienceRelatedResources",
            "description": "A list of resources that are associated with the Audience.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "total_contacts",
          "tags",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "EngagementSourceString": {
        "title": "EngagementSourceString",
        "type": "string",
        "description": "Custom metadata in the form of a key-value pair.\nMust be in the key value format: key:value;\n\nExample:\n```json\n{\n  \"key\":\"value\"\n}\n```\n\nShould be input as:\n```\n?source=key:val;\n```",
        "pattern": "^(?:[a-zA-Z0-9._~-]+:[a-zA-Z0-9._~-]+;){1}$",
        "example": "message_id:comms_message_01h9krwprkeee8fzqspvwy6nq8;"
      },
      "EngagementType": {
        "title": "EngagementType",
        "description": "The engagement types available. Those that are defined by Twilio are prefixed, while custom engagement types are not.",
        "type": "string",
        "enum": [
          "twilio:link_click",
          "twilio:app_click",
          "twilio:email_open",
          "twilio:survey_response",
          "twilio:poll_response",
          "twilio:opt_out"
        ],
        "pattern": ".*"
      },
      "EngagementId": {
        "title": "EngagementId",
        "description": "A reference to an Engagement.",
        "type": "string",
        "pattern": "^comms_engagement_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_engagement_01h9krwprkeee8fzqspvwy6nq8"
      },
      "MessageId": {
        "description": "A reference to a Message.",
        "title": "MessageId",
        "type": "string",
        "pattern": "^comms_message_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_message_01h9krwprkeee8fzqspvwy6nq8"
      },
      "EngagementSourceMessageId": {
        "title": "EngagementSourceMessageId",
        "description": "A Message Id that is the source of an Engagement.",
        "type": "object",
        "properties": {
          "message_id": {
            "$ref": "#/components/schemas/MessageId"
          }
        },
        "required": [
          "message_id"
        ]
      },
      "EmailId": {
        "title": "EmailId",
        "description": "A reference to an Email.",
        "type": "string",
        "pattern": "^comms_email_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_email_01h9krwprkeee8fzqspvwy6nq8"
      },
      "EngagementSourceEmailId": {
        "title": "EngagementSourceEmailId",
        "description": "An Email Id that is the source of an Engagement.",
        "type": "object",
        "properties": {
          "email_id": {
            "$ref": "#/components/schemas/EmailId"
          }
        },
        "required": [
          "email_id"
        ]
      },
      "PushNotificationId": {
        "title": "PushNotificationId",
        "description": "A reference to a PushNotification.",
        "type": "string",
        "pattern": "^comms_pushnotification_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_pushnotification_01h9krwprkeee8fzqspvwy6nq8"
      },
      "EngagementSourcePushNotificationId": {
        "title": "EngagementSourcePushNotificationId",
        "description": "A PushNotification Id that is the source of an Engagement.",
        "type": "object",
        "properties": {
          "push_notification_id": {
            "$ref": "#/components/schemas/PushNotificationId"
          }
        },
        "required": [
          "push_notification_id"
        ]
      },
      "EngagementSourceURI": {
        "title": "EngagementSourceURI",
        "description": "A URI that is the source of an Engagement.",
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "uri"
        ]
      },
      "EngagementSource": {
        "title": "EngagementSource",
        "type": "object",
        "description": "The source of an Engagement.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/EngagementSourceMessageId"
          },
          {
            "$ref": "#/components/schemas/EngagementSourceEmailId"
          },
          {
            "$ref": "#/components/schemas/EngagementSourcePushNotificationId"
          },
          {
            "$ref": "#/components/schemas/EngagementSourceURI"
          }
        ]
      },
      "Engagement": {
        "title": "Engagement",
        "type": "object",
        "description": "An Engagement represents an interaction or activity related to a message. This can include actions such as clicking a link within a message or any other form of customer engagement with the message.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EngagementId"
          },
          "engagement_type": {
            "$ref": "#/components/schemas/EngagementType"
          },
          "contact_id": {
            "$ref": "#/components/schemas/ContactId"
          },
          "source": {
            "$ref": "#/components/schemas/EngagementSource"
          },
          "related": {
            "title": "EngagementRelatedResources",
            "description": "A list of resources that are associated with the Engagement.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "contact_id",
          "source",
          "engagement_type",
          "related",
          "created_at",
          "deleted_at"
        ]
      },
      "SessionId": {
        "title": "SessionId",
        "description": "A reference to a Session.",
        "type": "string",
        "pattern": "^comms_session_[a-hjkmnpqrstv-z0-9]{26,34}",
        "example": "comms_session_01h9krwprkeee8fzqspvwy6nq8"
      },
      "AgentId": {
        "description": "A reference to an Agent.",
        "title": "AgentId",
        "type": "string",
        "pattern": "^comms_agent_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_agent_01h9krwprkeee8fzqspvwy6nq8"
      },
      "EmailActor": {
        "title": "EmailActor",
        "description": "An Email actor is a person or entity that communicates via Email (both Senders and Recipients).",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the actor (e.g. \"Jane Doe\")",
            "type": "string"
          },
          "address": {
            "description": "The identifier within a channel address space for an actor (e.g. phone number)",
            "type": "string"
          },
          "contact_id": {
            "$ref": "#/components/schemas/ContactId"
          },
          "agent_id": {
            "$ref": "#/components/schemas/AgentId"
          }
        },
        "required": [
          "address"
        ]
      },
      "EmailStatus": {
        "title": "EmailStatus",
        "description": "The status of an `Email`. The status can be one of the following:\n- `scheduled` The `Email` is scheduled to be sent by\n  Twilio in the future.\n\n- `queued` The `Email` is queued in Twilio for sending.\n- `sent` The `Email` has been sent by Twilio.\n- `delivered` The `Email` has been successfully\n    delivered to the recipient.\n\n- `undelivered` The `Email` was successfully sent by Twilio\n    but has not been delivered to the recipient.\n\n- `opened` The `Email` has been opened by the recipient.\n- `failed` The `Email` processing failed inside Twilio.\n   Use `GET /Emails/Operations/{operation_id}/Errors` for more details.\n\n- `canceled` The `Email` was canceled via API request.\n- `inbound` The `Email` was received by Twilio from an external source.",
        "type": "string",
        "enum": [
          "scheduled",
          "queued",
          "sent",
          "delivered",
          "undelivered",
          "opened",
          "failed",
          "canceled",
          "inbound"
        ]
      },
      "EmailBase": {
        "title": "EmailBase",
        "type": "object",
        "description": "The atomic unit of communication for the email channel.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EmailId"
          },
          "from": {
            "$ref": "#/components/schemas/EmailActor"
          },
          "to": {
            "title": "EmailRecipients",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailActor"
            }
          },
          "reply_to": {
            "title": "EmailReplyToRecipients",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailActor"
            }
          },
          "cc": {
            "title": "EmailCCRecipients",
            "type": "array",
            "maxItems": 50,
            "items": {
              "$ref": "#/components/schemas/EmailActor"
            }
          },
          "bcc": {
            "title": "EmailBCCRecipients",
            "type": "array",
            "maxItems": 50,
            "items": {
              "$ref": "#/components/schemas/EmailActor"
            }
          },
          "status": {
            "$ref": "#/components/schemas/EmailStatus"
          },
          "related": {
            "description": "A list of resources that are associated with the Email.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "scheduled_for": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "from",
          "to",
          "reply_to",
          "cc",
          "bcc",
          "related",
          "tags",
          "scheduled_for",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "EmailMetadata": {
        "title": "EmailMetadata",
        "type": "object",
        "description": "The EmailMetadata provides information about the Email. Does not include the Content.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailBase"
          }
        ]
      },
      "EmailAddressSender": {
        "title": "EmailAddressSender",
        "description": "An email address and associated name",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The email address of the person or entity.",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "The name of the person or entity associated with the email address."
          }
        },
        "required": [
          "address",
          "name"
        ]
      },
      "AgentIdSender": {
        "title": "AgentIdSender",
        "description": "A reference to an Agent.",
        "type": "object",
        "properties": {
          "agent_id": {
            "$ref": "#/components/schemas/AgentId"
          }
        },
        "required": [
          "agent_id"
        ]
      },
      "EmailAddressRecipient": {
        "title": "EmailAddressRecipient",
        "description": "An email address and associated name that define a recipient.",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The email address of the person or entity.",
            "format": "email"
          }
        },
        "required": [
          "address"
        ]
      },
      "ContentPersonalization": {
        "title": "ContentPersonalization",
        "type": "object",
        "description": "To personalize content for each recipient, supply variables here with values to substitute into any [Liquid](https://shopify.github.io/liquid/) templated content string or pre-stored Content template.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "RecipientVariables": {
        "title": "RecipientVariables",
        "type": "object",
        "properties": {
          "variables": {
            "$ref": "#/components/schemas/ContentPersonalization"
          }
        }
      },
      "ContactRecipient": {
        "description": "A reference to a Contact.",
        "title": "ContactRecipient",
        "type": "object",
        "properties": {
          "contact_id": {
            "$ref": "#/components/schemas/ContactId"
          }
        },
        "required": [
          "contact_id"
        ]
      },
      "AudienceRecipient": {
        "title": "AudienceRecipient",
        "description": "A reference to an Audience.",
        "type": "object",
        "properties": {
          "audience_id": {
            "$ref": "#/components/schemas/AudienceId"
          }
        },
        "required": [
          "audience_id"
        ]
      },
      "MediaUrl": {
        "title": "MediaUrl",
        "type": "object",
        "description": "A publicly accessible URL of a media file (image, etc.) to include in the message. The media file will be copied to Twilio's servers and then sent to the recipient.",
        "properties": {
          "url": {
            "type": "string",
            "minLength": 1,
            "description": "The publicly accessible URL of the media file to copy.\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/).\nSpecify `variables` with each recipient for personalization \nand `default_variables` for default values."
          }
        },
        "required": [
          "url"
        ]
      },
      "ContentMediaInput": {
        "title": "ContentMediaInput",
        "type": "array",
        "description": "A list of Media (images, etc.) to include in the message.\n\nUse `MediaUrl` to supply links to media files with templated URLs, using [Liquid](https://shopify.github.io/liquid/).\n\nSpecify `variables` with each recipient for personalization \nand `default_variables` for default values.",
        "items": {
          "$ref": "#/components/schemas/MediaUrl"
        }
      },
      "DefaultVariables": {
        "title": "DefaultVariables",
        "type": "object",
        "description": "These are default values that can be declared for use with templated content fields including `text` and `title`.\nWhen a template variable value is defined using a ${Twilio.Contact} reference, a default value must be defined here as well.\nWhen sending templated content 'to' an `Audience`, it is mandatory to define a default value for each variable used in the template.",
        "additionalProperties": {
          "type": "string"
        }
      },
      "EmailHtmlContent": {
        "title": "EmailHtmlContent",
        "type": "object",
        "properties": {
          "html": {
            "type": "string",
            "description": "The HTML email body (`text/html` MIME).\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/).\nSpecify `variables` with each recipient for personalization \nand `default_variables` for default values."
          },
          "text": {
            "type": "string",
            "description": "The plain-text email body (`text/plain` MIME).\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/).\nSpecify `variables` with each recipient for personalization \nand `default_variables` for default values."
          },
          "subject": {
            "type": "string",
            "description": "The subject of the email.\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/).\nSpecify `variables` with each recipient for personalization \nand `default_variables` for default values."
          },
          "attachments": {
            "$ref": "#/components/schemas/ContentMediaInput"
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          }
        },
        "required": [
          "html"
        ]
      },
      "ContentId": {
        "description": "A reference to a Content template.",
        "title": "ContentId",
        "type": "string",
        "pattern": "^HX[a-zA-Z0-9]{26,34}$",
        "example": "HX78e8e67fc0246521490fb9907fd0c165"
      },
      "EmailContentTemplate": {
        "title": "EmailContentTemplate",
        "description": "A reference to a stored Content template  that can be used to generate content for an Email.",
        "type": "object",
        "properties": {
          "content_id": {
            "$ref": "#/components/schemas/ContentId"
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          },
          "attachments": {
            "$ref": "#/components/schemas/ContentMediaInput"
          }
        },
        "required": [
          "content_id"
        ]
      },
      "Schedule": {
        "title": "Schedule",
        "description": "A schedule defines *when* a communication will be sent to a recipient.",
        "type": "object",
        "properties": {
          "send_at": {
            "description": "List of expressions for when the communication may be sent.\n\nThe supported expression formats are:\n  - RFC 3339 date-time string. e.g `\"2025-11-11T11:11:00Z\"`\n\nCurrently, you may specify only a single expression.\nIf you specify multiple expressions, only the first will be used.\nSupport for additional scheduling expression formats may be added in the future.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "minProperties": 1,
        "additionalProperties": false
      },
      "Identifier": {
        "description": "A 128-bit UUIDv7 encoded as a 26-character string using a modified base32 encoding. This schema is used for identifier path params as the type prefix ('<type>_') is redundant in URIs.",
        "type": "string",
        "pattern": "^[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "01h9krwprkeee8fzqspvwy6nq8"
      },
      "MimeType": {
        "title": "MimeType",
        "type": "string",
        "example": "text/plain",
        "default": "text/plain",
        "description": "A MIME type (or \"media type\") identifies the type of data of an object."
      },
      "Media": {
        "title": "Media",
        "type": "object",
        "description": "A document, image or other type of file attached to a message, email or push notification.",
        "properties": {
          "file_name": {
            "type": "string",
            "description": "The name of the media file."
          },
          "file_size": {
            "type": "number",
            "description": "The size of the media file in bytes."
          },
          "mime_type": {
            "$ref": "#/components/schemas/MimeType"
          },
          "content_reference": {
            "title": "MediaContentReference",
            "type": "object",
            "description": "The reference to the content of the media file.",
            "properties": {
              "temporary_url": {
                "type": "string",
                "description": "A temporary, expiring URL that can be used to access the media file.",
                "format": "uri"
              },
              "expires_at": {
                "type": "string",
                "description": "The time at which the temporary URL expires.",
                "format": "date-time"
              }
            }
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "file_name",
          "file_size",
          "mime_type",
          "content_reference",
          "updated_at",
          "created_at"
        ]
      },
      "EmailContentResolved": {
        "title": "EmailContentResolved",
        "description": "The resolved content of the Email. If no `plain/text` MIME is provided,  one will be generated from the `text/html` MIME.",
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "The subject of the email."
          },
          "text": {
            "type": "string",
            "description": "The plain-text email body (`text/plain` MIME).\nThe string can be parameterized and supplied with `variables` for per-recipient personalization and `default_variables` for defaults."
          },
          "html": {
            "type": "string",
            "description": "The HTML email body (`text/html` MIME).\nThe string can be parameterized and supplied with `variables` for per-recipient personalization and `default_variables` for defaults."
          },
          "attachments": {
            "type": "array",
            "description": "An array of objects where you can specify any attachments you want to include.",
            "items": {
              "$ref": "#/components/schemas/Media"
            }
          }
        },
        "required": [
          "text"
        ]
      },
      "Email": {
        "title": "Email",
        "type": "object",
        "description": "The atomic unit of communication for the email channel.",
        "allOf": [
          {
            "$ref": "#/components/schemas/EmailBase"
          },
          {
            "title": "EmailContent",
            "type": "object",
            "properties": {
              "content": {
                "$ref": "#/components/schemas/EmailContentResolved"
              }
            },
            "required": [
              "content"
            ]
          }
        ]
      },
      "EmailSenderId": {
        "title": "EmailSenderId",
        "description": "A reference to an Email Sender.",
        "type": "string",
        "pattern": "^comms_emailsender_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_emailsender_01h9krwprkeee8fzqspvwy6nq8"
      },
      "EmailSenderStatus": {
        "title": "EmailSenderStatus",
        "description": "The status of an Email Sender.\nIf an Agent is `activated`, it is available to send Emails.\nIf an Agent is `deactivated`, it is not available to send Emails.",
        "type": "string",
        "enum": [
          "activated",
          "deactivated"
        ]
      },
      "EmailSender": {
        "title": "EmailSender",
        "description": "Email Senders are the identity that you send `Emails` 'from'.\n\nFor each Email Sender you create, a matching `Agent` will automatically be created as well.\n\nThis setup is only required for sending `Communications` that may result in an `Email`.\n\nIf you want to send `Emails` directly without specifying the 'from' address,\ncreate an EmailSender with `is_default` set to `true`.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EmailSenderId"
          },
          "address": {
            "description": "The email address you would like to send Emails 'from'.\n\nNote: Each Email Sender must have a unique email address.",
            "type": "string",
            "format": "email",
            "maxLength": 128
          },
          "name": {
            "description": "The name you would like to send Emails 'from'.",
            "type": "string",
            "maxLength": 128
          },
          "status": {
            "$ref": "#/components/schemas/EmailSenderStatus"
          },
          "is_default": {
            "description": "If true, this Email Sender will be used as the default sender for all\n`Emails` sent from this account when 'from' is not specified\nas well as when sending with `Communications`. Setting a record\nto true will set any previous default records to false. The first Email Sender\ncreated will default to true even if not specified in the request.",
            "type": "boolean",
            "default": false
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "address",
          "name",
          "status",
          "is_default",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "EmailSenderOperation": {
        "title": "EmailSenderOperation",
        "type": "object",
        "description": "An Email Operation represents the aggregate work to be completed for a POST request to the /Emails endpoint.\nThe work maybe be performed asynchronously and the Email Operation resource can be used to track the progress of the work.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OperationId"
          },
          "status": {
            "$ref": "#/components/schemas/OperationStatus"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "created_at",
          "updated_at"
        ]
      },
      "CommunicationOperationStatus": {
        "title": "CommunicationOperationStatus",
        "type": "string",
        "description": "The status of an Operation.",
        "enum": [
          "scheduled",
          "processing",
          "completed",
          "canceled"
        ]
      },
      "EmailOperationStats": {
        "title": "EmailOperationStats",
        "type": "object",
        "example": {
          "total": 1,
          "recipients": 1,
          "attempts": 1,
          "queued": 0,
          "sent": 0,
          "scheduled": 0,
          "delivered": 0,
          "opened": 0,
          "undelivered": 0,
          "failed": 0,
          "canceled": 0
        },
        "description": "Represents the stats of a sending operation of one or many `Emails`.\n- `total` is the total number of `Email` resources created in the `Operation`.\n\n  * To get the status for each individual `Email`, fetch the `Email` resource:\n    `GET /Email/{email_id}`.\n\n  * For `Emails` with multiple recipients, use `Receipts` e.g. `GET /Emails/{email_id}/Receipts`.\n\n- `recipients` is the total number of recipients targeted in an Operation.\n- `attempts` is the total number of sending attempts made by Twilio.\n- `scheduled` is the number of `Emails` that are scheduled to be sent by\n  Twilio in the future.\n\n- `queued` is the number of `Emails` that are queued in Twilio for sending.\n- `sent` is the number of `Emails` that have been sent by Twilio.\n- `delivered` is the number of `Emails` that have been successfully\n    delivered to recipients.\n\n- `opened` is the number of `Emails` that have been opened by unique recipients.\n- `undelivered` is the number of `Emails` that were successfully sent by Twilio\n  but have not been delivered to the recipient.\n\n- `failed` is the number of `Emails` that failed during processing by Twilio.\n  Get `Errors` with `GET /Emails/Operations/{operation_id}/Errors` fore more detail.\n\n- `canceled` is the number of `Emails` that were canceled via API request.",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "recipients": {
            "type": "integer",
            "minimum": 0
          },
          "attempts": {
            "type": "integer",
            "minimum": 0
          },
          "queued": {
            "type": "integer",
            "minimum": 0
          },
          "sent": {
            "type": "integer",
            "minimum": 0
          },
          "scheduled": {
            "type": "integer",
            "minimum": 0
          },
          "delivered": {
            "type": "integer",
            "minimum": 0
          },
          "opened": {
            "type": "integer",
            "minimum": 0
          },
          "undelivered": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          },
          "canceled": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "total",
          "recipients",
          "attempts",
          "queued",
          "sent",
          "scheduled",
          "delivered",
          "opened",
          "failed",
          "undelivered",
          "canceled"
        ]
      },
      "EmailOperation": {
        "title": "EmailOperation",
        "type": "object",
        "description": "An Email Operation represents the aggregate work to be completed for a POST request to the /Emails endpoint.\nThe work maybe be performed asynchronously and the Email Operation resource can be used to track the progress of the work.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OperationId"
          },
          "status": {
            "$ref": "#/components/schemas/CommunicationOperationStatus"
          },
          "stats": {
            "$ref": "#/components/schemas/EmailOperationStats"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "stats",
          "created_at",
          "updated_at"
        ]
      },
      "MessageAgentChannel": {
        "title": "MessageAgentChannel",
        "description": "The channels available for Message entity.",
        "type": "string",
        "enum": [
          "sms",
          "rcs",
          "whatsapp"
        ],
        "example": "sms"
      },
      "MessageStatus": {
        "title": "MessageStatus",
        "description": "The status of a `Message`. The status can be one of the following:\n- `scheduled` The `Message` is scheduled to be sent by\n  Twilio in the future.\n\n- `queued` The `Message` is queued in Twilio for sending.\n- `sent` The `Message` has been sent by Twilio.\n- `delivered` The `Message` has been successfully\n    delivered to the recipient.\n\n- `read` The `Message` has been read by the recipient.\n- `undelivered` The `Message` was successfully sent by Twilio\n  but have not been delivered to the recipient.\n\n- `failed` The `Message` processing failed inside Twilio.\n  Use `GET /Messages/Operations/{operation_id}/Errors` for more details.\n\n- `canceled` The `Message` was canceled via API request.\n- `group` The `Message` is part of a group communication.\n  To get the status for each Recipient of the group communication, use the `Receipts` endpoint\n  e.g. GET `/Messages/comms_message_01h2xcejqtf2nbrexx3vqjhp41/Receipts`\n\n- `inbound` The `Message` was received by Twilio from an external source.",
        "type": "string",
        "enum": [
          "queued",
          "sent",
          "scheduled",
          "delivered",
          "read",
          "failed",
          "undelivered",
          "canceled",
          "group",
          "inbound"
        ]
      },
      "MessageAgent": {
        "title": "MessageAgent",
        "description": "A Message Agent is a person or entity whose communication identity is hosted by Twilio.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The identifier within a channel address space for an agent (e.g. phone number)",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/MessageAgentChannel"
          },
          "agent_id": {
            "$ref": "#/components/schemas/AgentId"
          }
        },
        "required": [
          "address",
          "channel",
          "agent_id"
        ],
        "additionalProperties": false
      },
      "AgentPoolId": {
        "description": "A reference to an AgentPool.",
        "title": "AgentPoolId",
        "type": "string",
        "pattern": "^comms_agentpool_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "example": "comms_agentpool_01h9krwprkeee8fzqspvwy6nq8"
      },
      "MessageAgentAndPool": {
        "title": "MessageAgentAndPool",
        "description": "A Message Agent is a person or entity whose communication identity is hosted by Twilio. The `agent_pool_id` field indicates the pool for which the `Agent` was resolved from.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The identifier within a channel address space for an Agent (e.g. phone number)",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/MessageAgentChannel"
          },
          "agent_id": {
            "$ref": "#/components/schemas/AgentId"
          },
          "agent_pool_id": {
            "$ref": "#/components/schemas/AgentPoolId"
          }
        },
        "required": [
          "address",
          "channel",
          "agent_id",
          "agent_pool_id"
        ]
      },
      "MessageContactChannel": {
        "title": "MessageContactChannel",
        "description": "The channels available for specifying a Message Contact.\n\n- `phone`: Includes SMS, MMS, and RCS, pair it with a phone number in the `address` field.\n\n- `whatsapp`: WhatsApp channel, pair it with a WhatsApp number in the `address` field.",
        "type": "string",
        "enum": [
          "phone",
          "whatsapp"
        ],
        "example": "phone"
      },
      "MessageContact": {
        "title": "MessageContact",
        "description": "A Message Contact is a person or entity that is not hosted by Twilio.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The identifier within a channel address space for an contact (e.g. phone number)",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/MessageContactChannel"
          },
          "contact_id": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ContactId"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "required": [
          "address",
          "channel",
          "contact_id"
        ]
      },
      "MessageBase": {
        "title": "MessageBase",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/MessageId"
          },
          "from": {
            "title": "MessageSender",
            "description": "The sender of the Message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageAgent"
              },
              {
                "$ref": "#/components/schemas/MessageAgentAndPool"
              },
              {
                "$ref": "#/components/schemas/MessageContact"
              }
            ]
          },
          "to": {
            "title": "MessageRecipients",
            "description": "The list of recipient(s) that the Message was directed to. \n\n- This list is always of size 1, except for Group Messaging usage, \nwhere the number of recipients plus the sender will match the group size.",
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageAgent"
                },
                {
                  "$ref": "#/components/schemas/MessageContact"
                }
              ]
            }
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus"
          },
          "related": {
            "title": "MessageRelatedResources",
            "description": "A list of resources that are associated with the Message.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "created_at": {
            "description": "The date and time when the entity was created.",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "The date and time when the entity was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "scheduled_for": {
            "description": "The scheduled send time of the `Message`.\nThis field is only present if the `Message` was created with a `schedule`.",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "id",
          "from",
          "to",
          "status",
          "related",
          "tags",
          "scheduled_for",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "MessageMetadata": {
        "title": "MessageMetadata",
        "type": "object",
        "description": "The MessageMetadata provides information about the Message but does not include the Content or Attempts.",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageBase"
          }
        ]
      },
      "MessageAddressRecipient": {
        "title": "MessageAddressRecipient",
        "description": "A messaging address and channel that defines the recipient of a Message.",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The identifier within a channel address space for an actor (e.g. phone number)"
          },
          "channel": {
            "$ref": "#/components/schemas/MessageContactChannel"
          }
        },
        "required": [
          "address",
          "channel"
        ]
      },
      "MessageContentTextWithMedia": {
        "title": "MessageContentTextWithMedia",
        "description": "The text and media content of a `Message`.",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "A simple content string (formerly called 'body').\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/). Specify `variables` with each recipient for personalization  and `default_variables` for default values."
          },
          "media": {
            "description": "A list of Media (images, etc.) to include in the message.\n\nIf this field is specified, Twilio will attempt to send the `Message` as an MMS.\n\nUse `MediaUrl` to supply links to media files with templated URLs, using [Liquid](https://shopify.github.io/liquid/).\n\nSpecify `variables` with each recipient for personalization\nand `default_variables` for default values.",
            "$ref": "#/components/schemas/ContentMediaInput"
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          }
        },
        "additionalProperties": false,
        "minProperties": 1
      },
      "MessageContentTemplate": {
        "title": "MessageContentTemplate",
        "description": "A reference to a stored Content template  that can be used to generate content for a Message.",
        "type": "object",
        "properties": {
          "content_id": {
            "$ref": "#/components/schemas/ContentId"
          }
        },
        "required": [
          "content_id"
        ]
      },
      "MessageContentSms": {
        "title": "MessageContentSms",
        "description": "The text and media content of the SMS/MMS `Message`. If media is provided, Twilio will attempt to send the message as an MMS.",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "description": "A simple content string (formerly called 'body').\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/). Specify `variables` with each recipient for personalization  and `default_variables` for default values."
          },
          "media": {
            "description": "A list of Media (images, etc.) to include in the message.\n\nIf this field is specified, Twilio will attempt to send the `Message` as an MMS.\n\nUse `MediaUrl` to supply links to media files with templated URLs, using [Liquid](https://shopify.github.io/liquid/).\n\nSpecify `variables` with each recipient for personalization\nand `default_variables` for default values.",
            "$ref": "#/components/schemas/ContentMediaInput"
          }
        },
        "additionalProperties": false,
        "minProperties": 1
      },
      "MessageContentModuleSms": {
        "title": "MessageContentModuleSms",
        "description": "The `sms` (includes mms) content module for Messages.\nFor RCS use `MessageContentModuleRcs`.",
        "type": "object",
        "properties": {
          "sms": {
            "description": "The `sms` (includes mms) content module for Messages.",
            "$ref": "#/components/schemas/MessageContentSms"
          }
        },
        "required": [
          "sms"
        ]
      },
      "MessageContentRcsSuggestionPostbackData": {
        "title": "MessageContentRcsSuggestionPostbackData",
        "description": "The postback data to send when the suggestion item is selected.",
        "type": "string",
        "minLength": 1
      },
      "MessageContentRcsDialAction": {
        "title": "MessageContentRcsDialAction",
        "description": "An RCS suggested action of type Dial.",
        "type": "object",
        "properties": {
          "phone_number": {
            "type": "string",
            "description": "The phone number to call when the action is triggered."
          }
        },
        "required": [
          "phone_number"
        ]
      },
      "MessageContentRcsOpenUrlAction": {
        "title": "MessageContentRcsOpenUrlAction",
        "description": "An RCS action of type Open Url.",
        "type": "object",
        "properties": {
          "url": {
            "title": "MessageContentRcsOpenUrlActionUrl",
            "type": "string",
            "description": "The url to open when the suggested action is selected."
          }
        },
        "required": [
          "url"
        ]
      },
      "MessageContentRcsSuggestedAction": {
        "title": "MessageContentRcsSuggestedAction",
        "description": "An RCS action suggestion.",
        "type": "object",
        "properties": {
          "action": {
            "title": "MessageContentRcsAction",
            "description": "The RCS action to suggest.",
            "type": "object",
            "oneOf": [
              {
                "title": "MessageContentRcsSuggestedActionDial",
                "type": "object",
                "description": "A action item that when selected by the recipient, initiates a voice call using the native calling app on the device.",
                "properties": {
                  "text": {
                    "title": "MessageContentRcsSuggestedActionDialText",
                    "description": "The text to display for the action item.",
                    "type": "string",
                    "minLength": 1
                  },
                  "postback_data": {
                    "$ref": "#/components/schemas/MessageContentRcsSuggestionPostbackData"
                  },
                  "dial_action": {
                    "$ref": "#/components/schemas/MessageContentRcsDialAction"
                  }
                },
                "required": [
                  "text",
                  "postback_data",
                  "dial_action"
                ]
              },
              {
                "title": "MessageContentRcsSuggestedActionOpenUrl",
                "type": "object",
                "description": "A action item, that when selected by the recipient, opens the provided `url` on the end-users device.",
                "properties": {
                  "text": {
                    "title": "MessageContentRcsSuggestedActionOpenUrlText",
                    "description": "The text to display for the action item.",
                    "type": "string",
                    "minLength": 1
                  },
                  "postback_data": {
                    "$ref": "#/components/schemas/MessageContentRcsSuggestionPostbackData"
                  },
                  "open_url_action": {
                    "$ref": "#/components/schemas/MessageContentRcsOpenUrlAction"
                  }
                },
                "required": [
                  "text",
                  "postback_data",
                  "open_url_action"
                ]
              }
            ]
          }
        },
        "required": [
          "action"
        ]
      },
      "MessageContentRcsSuggestedReply": {
        "title": "MessageContentRcsSuggestedReply",
        "type": "object",
        "description": "An RCS reply suggestion.",
        "properties": {
          "reply": {
            "title": "MessageContentRcsReply",
            "description": "The RCS reply to suggest.",
            "type": "object",
            "properties": {
              "text": {
                "title": "MessageContentRcsReplyText",
                "description": "The text to display for the suggested reply.",
                "type": "string",
                "minLength": 1
              },
              "postback_data": {
                "$ref": "#/components/schemas/MessageContentRcsSuggestionPostbackData"
              }
            },
            "required": [
              "text",
              "postback_data"
            ]
          }
        },
        "required": [
          "reply"
        ]
      },
      "MessageContentRcsSuggestions": {
        "title": "MessageContentRcsSuggestions",
        "description": "A list of RCS suggestions to display.",
        "type": "array",
        "items": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/MessageContentRcsSuggestedAction"
            },
            {
              "$ref": "#/components/schemas/MessageContentRcsSuggestedReply"
            }
          ]
        }
      },
      "MessageContentRcsContentInfo": {
        "title": "MessageContentRcsContentInfo",
        "description": "An RCS Content Info.",
        "type": "object",
        "properties": {
          "file_url": {
            "type": "string",
            "description": "The URL of the media file."
          },
          "thumbnail_url": {
            "type": "string",
            "description": "The URL of the thumbnail image for the media."
          }
        },
        "required": [
          "file_url"
        ]
      },
      "MessageContentRcsMedia": {
        "title": "MessageContentRcsMedia",
        "description": "An RCS media.",
        "type": "object",
        "properties": {
          "content_info": {
            "$ref": "#/components/schemas/MessageContentRcsContentInfo"
          },
          "height": {
            "description": "The height of the media.",
            "type": "string",
            "enum": [
              "tall",
              "medium",
              "short"
            ]
          }
        },
        "required": [
          "content_info"
        ]
      },
      "MessageContentRcsCardContent": {
        "title": "MessageContentRcsStandaloneCardContent",
        "description": "The content of the standalone card.",
        "type": "object",
        "properties": {
          "title": {
            "title": "MessageContentRcsStandaloneCardTitle",
            "description": "The title of the standalone card.",
            "type": "string",
            "minLength": 1
          },
          "description": {
            "title": "MessageContentRcsStandaloneCardDescription",
            "description": "The description of the standalone card.",
            "type": "string",
            "minLength": 1
          },
          "media": {
            "$ref": "#/components/schemas/MessageContentRcsMedia"
          },
          "suggestions": {
            "$ref": "#/components/schemas/MessageContentRcsSuggestions"
          }
        },
        "minProperties": 1,
        "additionalProperties": false
      },
      "MessageContentRcsCarouselCard": {
        "title": "MessageContentRcsCarouselCard",
        "description": "An RCS carousel card.",
        "type": "object",
        "properties": {
          "card_contents": {
            "title": "MessageContentRcsCarouselCardContents",
            "description": "The contents of the carousel card.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContentRcsCardContent"
            }
          }
        },
        "required": [
          "card_contents"
        ]
      },
      "MessageContentRcsStandaloneCard": {
        "title": "MessageContentRcsStandaloneCard",
        "description": "An RCS standalone card.",
        "type": "object",
        "properties": {
          "card_content": {
            "$ref": "#/components/schemas/MessageContentRcsCardContent"
          }
        },
        "required": [
          "card_content"
        ]
      },
      "MessageContentModuleRcs": {
        "title": "MessageContentModuleRcs",
        "description": "The RCS content.",
        "type": "object",
        "properties": {
          "rcs": {
            "title": "MessageContentRcs",
            "description": "The RCS content, follows the RCS Business Messaging `AgentContentMessage` format.\nFor more information, see [RCS Business Messaging](https://developers.google.com/business-communications/rcs-business-messaging)",
            "type": "object",
            "oneOf": [
              {
                "title": "MessageContentModuleRcsText",
                "description": "The RCS union Text content.",
                "type": "object",
                "properties": {
                  "text": {
                    "title": "MessageContentRcsText",
                    "description": "An RCS message simple text content.",
                    "type": "string",
                    "minLength": 1
                  },
                  "suggestions": {
                    "$ref": "#/components/schemas/MessageContentRcsSuggestions"
                  }
                },
                "required": [
                  "text"
                ]
              },
              {
                "title": "MessageContentModuleRcsContentInfo",
                "type": "object",
                "description": "The RCS union Content Info content.",
                "properties": {
                  "content_info": {
                    "$ref": "#/components/schemas/MessageContentRcsContentInfo"
                  },
                  "suggestions": {
                    "$ref": "#/components/schemas/MessageContentRcsSuggestions"
                  }
                },
                "required": [
                  "content_info"
                ]
              },
              {
                "title": "MessageContentModuleRcsRichCard",
                "description": "The RCS union Rich Card content.",
                "type": "object",
                "properties": {
                  "rich_card": {
                    "title": "MessageContentRcsRichCard",
                    "description": "An RCS rich card.",
                    "type": "object",
                    "oneOf": [
                      {
                        "title": "MessageContentRcsRichCardCarousel",
                        "description": "A carousel card.",
                        "type": "object",
                        "properties": {
                          "carousel_card": {
                            "$ref": "#/components/schemas/MessageContentRcsCarouselCard"
                          }
                        },
                        "required": [
                          "carousel_card"
                        ]
                      },
                      {
                        "title": "MessageContentRcsRichCardStandalone",
                        "description": "A standalone card.",
                        "type": "object",
                        "properties": {
                          "standalone_card": {
                            "$ref": "#/components/schemas/MessageContentRcsStandaloneCard"
                          }
                        },
                        "required": [
                          "standalone_card"
                        ]
                      }
                    ]
                  },
                  "suggestions": {
                    "$ref": "#/components/schemas/MessageContentRcsSuggestions"
                  }
                },
                "required": [
                  "rich_card"
                ]
              }
            ]
          }
        },
        "required": [
          "rcs"
        ]
      },
      "MessageContentWhatsAppText": {
        "title": "MessageContentWhatsAppText",
        "description": "A WhatsApp Text Message",
        "type": "object",
        "properties": {
          "type": {
            "title": "WhatsAppTextType",
            "description": "Always `text` for WhatsApp Text Messages.",
            "type": "string",
            "enum": [
              "text"
            ]
          },
          "text": {
            "title": "WhatsAppText",
            "description": "The text content and options.",
            "type": "object",
            "properties": {
              "body": {
                "description": "The text of the WhatsApp message.",
                "type": "string",
                "maxLength": 4096
              },
              "preview_url": {
                "title": "WhatsAppTextPreviewUrl",
                "description": "Set to `true` to have the WhatsApp client attempt to render\na link preview of any URL in the `body` text string.",
                "type": "boolean"
              }
            },
            "required": [
              "body"
            ]
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "MessageContentWhatsAppImage": {
        "title": "MessageContentWhatsAppImage",
        "description": "A WhatsApp Image Message.",
        "type": "object",
        "properties": {
          "type": {
            "title": "MessageContentWhatsAppImageType",
            "description": "Always `image` for WhatsApp image messages.",
            "type": "string",
            "enum": [
              "image"
            ]
          },
          "image": {
            "title": "WhatsAppImage",
            "description": "The image to send.",
            "type": "object",
            "properties": {
              "link": {
                "title": "WhatsAppImageLink",
                "description": "The URL of the (hosted) image.",
                "type": "string"
              },
              "caption": {
                "title": "WhatsAppImageCaption",
                "description": "The caption text for the image. \nMaximum 1024 characters.",
                "type": "string",
                "maxLength": 1024
              }
            },
            "required": [
              "link"
            ]
          }
        },
        "required": [
          "type",
          "image"
        ]
      },
      "MessageContentWhatsAppHeaderText": {
        "title": "MessageContentWhatsAppHeaderText",
        "description": "The text header of the Message.",
        "type": "object",
        "properties": {
          "type": {
            "title": "WhatsAppHeaderTextType",
            "description": "The type of header, always `text`.",
            "type": "string",
            "enum": [
              "text"
            ]
          },
          "text": {
            "title": "WhatsAppHeaderText",
            "description": "The text content of the header.",
            "type": "string",
            "maxLength": 60
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "MessageContentWhatsAppBody": {
        "title": "MessageContentWhatsAppBody",
        "description": "The (text) body of the Interactive Message.",
        "type": "object",
        "properties": {
          "text": {
            "description": "The text of the WhatsApp message.",
            "type": "string",
            "maxLength": 1024
          }
        },
        "required": [
          "text"
        ]
      },
      "MessageContentWhatsAppFooter": {
        "title": "MessageContentWhatsAppFooter",
        "description": "The footer of the Message.",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The footer text content.",
            "maxLength": 60
          }
        },
        "required": [
          "text"
        ]
      },
      "MessageContentWhatsAppInteractiveList": {
        "title": "MessageContentWhatsAppInteractiveList",
        "description": "A WhatsApp Interactive List Message content.",
        "type": "object",
        "properties": {
          "type": {
            "title": "WhatsAppInteractiveListType",
            "description": "Always `list` for WhatsApp Interactive List Messages.",
            "type": "string",
            "enum": [
              "list"
            ]
          },
          "header": {
            "$ref": "#/components/schemas/MessageContentWhatsAppHeaderText"
          },
          "body": {
            "$ref": "#/components/schemas/MessageContentWhatsAppBody"
          },
          "footer": {
            "$ref": "#/components/schemas/MessageContentWhatsAppFooter"
          },
          "action": {
            "title": "MessageContentWhatsAppInteractiveAction",
            "description": "The actions to offer to the end-user to interact with the Message.",
            "type": "object",
            "required": [
              "button",
              "sections"
            ],
            "properties": {
              "button": {
                "title": "MessageContentWhatsAppInteractiveButton",
                "type": "string",
                "description": "The button text for the button that opens the interactive actions list",
                "maxLength": 20
              },
              "sections": {
                "title": "MessageContentWhatsAppInteractiveSections",
                "type": "array",
                "description": "List of sections in the interactive actions list (max 10)",
                "items": {
                  "title": "MessageContentWhatsAppInteractiveSection",
                  "description": "A section in the interactive message action list.",
                  "type": "object",
                  "properties": {
                    "title": {
                      "title": "MessageContentWhatsAppInteractiveSectionTitle",
                      "type": "string",
                      "description": "Section title (max 24 characters)",
                      "maxLength": 24
                    },
                    "rows": {
                      "title": "MessageContentWhatsAppInteractiveSectionRows",
                      "description": "List of rows in the interactive actions section (max 10)",
                      "type": "array",
                      "items": {
                        "title": "MessageContentWhatsAppInteractiveSectionRow",
                        "description": "A row in the interactive message action section.",
                        "type": "object",
                        "properties": {
                          "id": {
                            "title": "MessageContentWhatsAppInteractiveSectionRowId",
                            "type": "string",
                            "description": "Unique ID for this row (max 200 characters)"
                          },
                          "title": {
                            "title": "MessageContentWhatsAppInteractiveSectionRowTitle",
                            "type": "string",
                            "description": "Row display title (max 24 characters)",
                            "maxLength": 24
                          },
                          "description": {
                            "title": "MessageContentWhatsAppInteractiveSectionRowDescription",
                            "type": "string",
                            "description": "Row description (max 72 characters)",
                            "maxLength": 72
                          }
                        },
                        "required": [
                          "id",
                          "title"
                        ]
                      }
                    }
                  },
                  "required": [
                    "title",
                    "rows"
                  ]
                },
                "minItems": 1,
                "maxItems": 10
              }
            }
          }
        },
        "required": [
          "type",
          "body",
          "action"
        ]
      },
      "MessageContentWhatsAppHeaderImage": {
        "title": "MessageContentWhatsAppHeaderImage",
        "description": "The text header of the Message.",
        "type": "object",
        "properties": {
          "type": {
            "title": "WhatsAppHeaderImageType",
            "description": "The type of header, always `image`.",
            "type": "string",
            "enum": [
              "image"
            ]
          },
          "image": {
            "title": "WhatsAppHeaderImage",
            "description": "The image to send.",
            "type": "object",
            "properties": {
              "link": {
                "title": "WhatsAppHeaderImageLink",
                "description": "The URL of the (hosted) image.",
                "type": "string"
              }
            },
            "required": [
              "link"
            ]
          }
        },
        "required": [
          "type",
          "image"
        ]
      },
      "MessageContentWhatsAppHeader": {
        "title": "MessageContentWhatsAppHeader",
        "description": "The header of the Message content.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/MessageContentWhatsAppHeaderText"
          },
          {
            "$ref": "#/components/schemas/MessageContentWhatsAppHeaderImage"
          }
        ]
      },
      "MessageContentWhatsAppInteractiveReplyButtons": {
        "title": "MessageContentWhatsAppInteractiveReplyButtons",
        "description": "A WhatsApp Interactive Reply Buttons Message content.",
        "type": "object",
        "required": [
          "type",
          "body",
          "action"
        ],
        "properties": {
          "type": {
            "title": "WhatsAppInteractiveReplyButtonsType",
            "description": "Always `button` for WhatsApp Interactive Reply Buttons Messages.",
            "type": "string",
            "enum": [
              "button"
            ]
          },
          "header": {
            "$ref": "#/components/schemas/MessageContentWhatsAppHeader"
          },
          "body": {
            "$ref": "#/components/schemas/MessageContentWhatsAppBody"
          },
          "footer": {
            "$ref": "#/components/schemas/MessageContentWhatsAppFooter"
          },
          "action": {
            "title": "WhatsAppInteractiveReplyButtonsAction",
            "description": "The WhatsApp Interactive Reply Buttons Message action.",
            "type": "object",
            "required": [
              "buttons"
            ],
            "properties": {
              "buttons": {
                "title": "WhatsAppInteractiveReplyButtons",
                "type": "array",
                "description": "Up to 3 quick-reply buttons",
                "maxItems": 3,
                "items": {
                  "title": "WhatsAppInteractiveReplyButton",
                  "description": "A quick-reply button send a reply Message back when the end-user presses it.\nThe content of the reply message is what you set in the `reply` field.",
                  "type": "object",
                  "required": [
                    "type",
                    "reply"
                  ],
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "reply"
                      ],
                      "description": "Must be `reply`"
                    },
                    "reply": {
                      "title": "WhatsAppInteractiveReplyButtonReply",
                      "description": "The text content of the button and data (to be included with the reply Message).",
                      "type": "object",
                      "required": [
                        "id",
                        "title"
                      ],
                      "properties": {
                        "id": {
                          "title": "WhatsAppInteractiveReplyButtonReplyId",
                          "type": "string",
                          "description": "Unique button identifier (max 256 characters)",
                          "maxLength": 256
                        },
                        "title": {
                          "type": "string",
                          "description": "Button title text (max 20 characters)",
                          "maxLength": 20
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MessageContentWhatsAppInteractiveCallToActionUrl": {
        "title": "MessageContentWhatsAppInteractiveCallToActionUrl",
        "description": "A WhatsApp Interactive Call-To-Action URL Message content.",
        "type": "object",
        "required": [
          "type",
          "body",
          "action"
        ],
        "properties": {
          "type": {
            "title": "WhatsAppInteractiveCallToActionUrlType",
            "description": "Always `cta_url` for WhatsApp Interactive Call-To-Action URL Messages.",
            "type": "string",
            "enum": [
              "cta_url"
            ]
          },
          "header": {
            "$ref": "#/components/schemas/MessageContentWhatsAppHeader"
          },
          "body": {
            "$ref": "#/components/schemas/MessageContentWhatsAppBody"
          },
          "footer": {
            "$ref": "#/components/schemas/MessageContentWhatsAppFooter"
          },
          "action": {
            "title": "WhatsAppInteractiveCallToActionUrlAction",
            "description": "The WhatsApp Interactive Call-To-Action URL Message action.",
            "type": "object",
            "required": [
              "name",
              "parameters"
            ],
            "properties": {
              "name": {
                "title": "WhatsAppInteractiveCallToActionUrlActionName",
                "type": "string",
                "enum": [
                  "cta_url"
                ],
                "description": "Always `cta_url` for WhatsApp Interactive Call-To-Action URL Messages."
              },
              "parameters": {
                "title": "WhatsAppInteractiveCallToActionUrlActionParameters",
                "description": "The parameters for the WhatsApp Interactive Call-To-Action URL Message action.",
                "type": "object",
                "required": [
                  "display_text",
                  "url"
                ],
                "properties": {
                  "display_text": {
                    "title": "WhatsAppInteractiveCallToActionUrlActionParametersDisplayText",
                    "type": "string",
                    "description": "Button text to display (max 20 characters)",
                    "maxLength": 20
                  },
                  "url": {
                    "type": "string",
                    "description": "URL to open when button is clicked"
                  }
                }
              }
            }
          }
        }
      },
      "MessageContentWhatsAppInteractive": {
        "title": "MessageContentWhatsAppInteractive",
        "description": "A WhatsApp Interactive Message",
        "type": "object",
        "properties": {
          "type": {
            "title": "WhatsAppInteractiveType",
            "description": "Always `interactive` for WhatsApp Interactive Messages.",
            "type": "string",
            "enum": [
              "interactive"
            ]
          },
          "interactive": {
            "title": "WhatsAppInteractive",
            "description": "The WhatsApp Interactive Message content.",
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageContentWhatsAppInteractiveList"
              },
              {
                "$ref": "#/components/schemas/MessageContentWhatsAppInteractiveReplyButtons"
              },
              {
                "$ref": "#/components/schemas/MessageContentWhatsAppInteractiveCallToActionUrl"
              }
            ]
          }
        },
        "required": [
          "type",
          "interactive"
        ]
      },
      "MessageContentModuleWhatsApp": {
        "title": "MessageContentModuleWhatsApp",
        "description": "The WhatsApp Message content.",
        "type": "object",
        "properties": {
          "whatsapp": {
            "title": "MessageContentWhatsApp",
            "description": "The WhatsApp content, follows the WhatsApp Cloud API `messages` endpoint shape.\nFor more information, see [WhatsApp Cloud API - Messaging](https://developers.facebook.com/docs/whatsapp/cloud-api/guides/send-messages)",
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageContentWhatsAppText"
              },
              {
                "$ref": "#/components/schemas/MessageContentWhatsAppImage"
              },
              {
                "$ref": "#/components/schemas/MessageContentWhatsAppInteractive"
              }
            ]
          }
        },
        "required": [
          "whatsapp"
        ]
      },
      "MessageContentChannelModules": {
        "title": "MessageContentChannelModules",
        "description": "Define content with modules",
        "type": "object",
        "properties": {
          "modules": {
            "title": "MessageContentChannelModulesList",
            "description": "A list of content `modules`.\n\nEach module targets a specific Message channel, allowing for different content to be sent\ndepending on the channel used for sending the Message.",
            "type": "array",
            "items": {
              "title": "MessageContentChannelModule",
              "description": "Content module.",
              "type": "object",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/MessageContentModuleSms"
                },
                {
                  "$ref": "#/components/schemas/MessageContentModuleRcs"
                },
                {
                  "$ref": "#/components/schemas/MessageContentModuleWhatsApp"
                }
              ]
            },
            "minItems": 1,
            "maxItems": 3
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          }
        },
        "required": [
          "modules"
        ]
      },
      "MessageAddressSender": {
        "title": "MessageAddressSender",
        "description": "A messaging address and channel",
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The identifier within a channel address space for an actor (e.g. phone number)"
          },
          "channel": {
            "$ref": "#/components/schemas/MessageAgentChannel"
          }
        },
        "required": [
          "address",
          "channel"
        ]
      },
      "MessageAgentChannelControl": {
        "title": "MessageAgentChannelControl",
        "description": "Define controls to `filter` and `prioritize` Agents based on their `channel`.",
        "type": "object",
        "properties": {
          "filter_in": {
            "title": "MessageAgentChannelControlFilterIn",
            "description": "A list of eligible channels to constrain `Agent` resolution to;\nleave undefined to send across all available channels.\n\nWarning: If there is no viable path from any `Agent` to a recipient resulting from\nthis filter, no `Message` will be sent to the recipient(s)!",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageAgentChannel"
            },
            "uniqueItems": true
          },
          "priority": {
            "title": "MessageAgentChannelControlPriority",
            "description": "A list of channels and their priority for use. \nLowest numeric value is highest priority.",
            "type": "array",
            "items": {
              "title": "MessageAgentChannelControlPriorityItem",
              "description": "A channel and its priority.",
              "properties": {
                "channel": {
                  "$ref": "#/components/schemas/MessageAgentChannel"
                },
                "priority": {
                  "type": "integer",
                  "description": "The priority of the channel. Lower values indicate higher priority.\nFor example, a value of `0` indicates the highest priority channel."
                }
              },
              "required": [
                "channel",
                "priority"
              ]
            }
          }
        }
      },
      "MessageAgentPoolIdSender": {
        "title": "MessageAgentPoolIdSender",
        "description": "A reference to an `AgentPool` and optional channel controls.",
        "type": "object",
        "properties": {
          "agent_pool_id": {
            "$ref": "#/components/schemas/AgentPoolId"
          },
          "channels": {
            "$ref": "#/components/schemas/MessageAgentChannelControl"
          }
        },
        "required": [
          "agent_pool_id"
        ]
      },
      "MessageContentTextWithMediaResolved": {
        "title": "MessageContentTextWithMediaResolved",
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "A simple content string (formerly called 'body')."
          },
          "media": {
            "type": "array",
            "description": "A list of Media objects (images, etc.) included in the Message.",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Media"
                },
                {
                  "$ref": "#/components/schemas/MediaUrl"
                }
              ]
            }
          }
        },
        "additionalProperties": false,
        "minProperties": 1
      },
      "MessageContentResolved": {
        "title": "MessageContentResolved",
        "description": "The resolved content of the Message.",
        "type": "object",
        "properties": {
          "content": {
            "description": "The resolved content of the Message.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/MessageContentTextWithMediaResolved"
              },
              {
                "$ref": "#/components/schemas/MessageContentTemplate"
              },
              {
                "$ref": "#/components/schemas/MessageContentChannelModules"
              }
            ]
          }
        },
        "required": [
          "content"
        ]
      },
      "TwilioErrorNullable": {
        "title": "TwilioErrorNullable",
        "type": [
          "object",
          "null"
        ],
        "description": "A generic error object communicating client and server side API errors.",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The Twilio error code."
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the error."
          },
          "info_url": {
            "type": "string",
            "format": "uri",
            "description": "A URL to a [Twilio error directory](https://www.twilio.com/docs/api/errors) page with more information about the error code."
          },
          "context": {
            "description": "A JSON path that identifies the errant field.",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "example": {
          "code": 21614,
          "message": "The address specified in the request is not a valid phone number.",
          "info_url": "https://www.twilio.com/docs/api/errors/21614",
          "context": "$.from[0].address"
        }
      },
      "MessageAttempt": {
        "title": "MessageAttempt",
        "description": "The Message Attempt resource represents a single attempt to send a Message to a Recipient. A Message will have one or more Attempts depending on the processing and delivery outcome.",
        "type": "object",
        "properties": {
          "from": {
            "title": "MessageAttemptSender",
            "description": "The sender of the Message Attempt.",
            "$ref": "#/components/schemas/MessageAgent"
          },
          "to": {
            "title": "MessageAttemptRecipients",
            "description": "The recipients of the Message Attempt. This array will contain a single recipient element, except for GMMS use case, where there are multiple recipients.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageContact"
            }
          },
          "status": {
            "$ref": "#/components/schemas/MessageStatus",
            "description": "The status of the Message Attempt. The status of the Message is the status of the last attempt."
          },
          "attempted_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the Message Attempt began processing."
          },
          "info_url": {
            "type": "string",
            "format": "uri",
            "description": "A URL to view more information for this Message Attempt."
          },
          "error": {
            "$ref": "#/components/schemas/TwilioErrorNullable",
            "description": "An error object that describes an error that occurred during the Message Attempt. This field will be `null` if the attempt was successful."
          }
        },
        "required": [
          "from",
          "to",
          "status",
          "attempted_at",
          "info_url",
          "error"
        ]
      },
      "Message": {
        "title": "Message",
        "description": "A Message is the atomic unit of communication that may be used across all available channels.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageBase"
          },
          {
            "$ref": "#/components/schemas/MessageContentResolved"
          },
          {
            "title": "MessageAttempts",
            "type": "object",
            "description": "The list of attempts Twilio executed to process the Message.",
            "properties": {
              "attempts": {
                "title": "MessageAttemptsList",
                "description": "The list of attempts Twilio executed to process the Message.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/MessageAttempt"
                }
              }
            },
            "required": [
              "attempts"
            ]
          }
        ]
      },
      "MessageOperationStats": {
        "title": "MessageOperationStats",
        "type": "object",
        "example": {
          "total": 1,
          "recipients": 1,
          "attempts": 1,
          "queued": 0,
          "sent": 0,
          "scheduled": 0,
          "delivered": 0,
          "read": 0,
          "undelivered": 0,
          "unaddressable": 0,
          "failed": 0,
          "canceled": 0
        },
        "description": "Represents the stats of a sending operation of one or many communications resources (Messages, Emails).\n- `total` is the total number of `Messages` in the `Operation`.\n\n  * To get the status for each individual `Message`, fetch the resource with:\n    `GET /Messages/{message_id}`.\n\n  * For group communications, where there is more than one recipient per communication resource\n    use `Receipts` e.g. `GET /Messages/{message_id}/Receipts`.\n\n- `recipients` is the total number of recipients targeted in an Operation.\n- `attempts` is the total number of sending attempts made by Twilio.\n- `unaddressable` is the number of recipients to which no sending attempts were made because\n  a valid match could not be found between the available addresses for the recipient (`to`)\n  and sender (`from`).\n\n- `scheduled` is the number of `Messages` that are scheduled to be sent by\n  Twilio in the future.\n\n- `queued` is the number of `Messages` that are queued in Twilio for sending.\n- `sent` is the number of `Messages` that have been sent by Twilio.\n- `delivered` is the number of `Messages` that have been successfully\n    delivered to recipients.\n\n- `read` is the number of `Messages` that have been read by recipients.\n- `undelivered` is the number of `Messages` that were successfully sent by Twilio\n  but have not been delivered to the recipient.\n\n- `failed` is the number of `Messages` that failed during processing by Twilio.\n  Get `Errors` with `GET /Messages/Operations/{operation_id}/Errors` fore more detail.\n\n- `canceled` is the number of `Messages` that were canceled via API request.",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "recipients": {
            "type": "integer",
            "minimum": 0
          },
          "queued": {
            "type": "integer",
            "minimum": 0
          },
          "sent": {
            "type": "integer",
            "minimum": 0
          },
          "scheduled": {
            "type": "integer",
            "minimum": 0
          },
          "delivered": {
            "type": "integer",
            "minimum": 0
          },
          "read": {
            "type": "integer",
            "minimum": 0
          },
          "undelivered": {
            "type": "integer",
            "minimum": 0
          },
          "unaddressable": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          },
          "canceled": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "total",
          "recipients",
          "attempts",
          "unaddressable",
          "queued",
          "sent",
          "scheduled",
          "delivered",
          "read",
          "failed",
          "undelivered",
          "canceled"
        ]
      },
      "MessageOperation": {
        "title": "MessageOperation",
        "type": "object",
        "description": "A Message Operation represents the aggregate work to be completed for a POST request to the /Messages endpoint.\nThe work maybe be performed asynchronously and the Message Operation resource can be used to track the progress of the work.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OperationId"
          },
          "status": {
            "$ref": "#/components/schemas/CommunicationOperationStatus"
          },
          "stats": {
            "$ref": "#/components/schemas/MessageOperationStats"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "stats",
          "created_at",
          "updated_at"
        ]
      },
      "PushNotificationAppName": {
        "title": "PushNotificationAppName",
        "description": "The name of the Push Notification `App`.",
        "type": "string",
        "pattern": "^[a-z0-9_]+$",
        "minLength": 1,
        "maxLength": 64
      },
      "DeviceRegistrationId": {
        "title": "DeviceRegistrationId",
        "description": "A reference to a Device Registration.",
        "type": "string",
        "pattern": "^comms_device_registration_[a-hjkmnpqrstv-z0-9]{26,34}$",
        "example": "comms_device_registration_01h9krwprkeee8fzqspvwy6nq8"
      },
      "PushNotificationProvider": {
        "title": "PushNotificationProvider",
        "description": "Push notification service provider.",
        "type": "string",
        "enum": [
          "apn",
          "fcm"
        ]
      },
      "Device": {
        "title": "Device",
        "type": "object",
        "description": "A device is a physical device or a browser that can receive push notifications. A device is uniquely identified by its app-specific unique token and the push provider identifier.",
        "properties": {
          "token": {
            "type": "string",
            "description": "Push notifications token for the device/browser."
          },
          "provider": {
            "$ref": "#/components/schemas/PushNotificationProvider"
          }
        },
        "required": [
          "token",
          "provider"
        ]
      },
      "DeviceRegistration": {
        "title": "DeviceRegistration",
        "type": "object",
        "description": "A registration is a collection of a contact's devices registered under a single app. It is uniquely identified by the combination of the contact's id and the app name. A device is a physical device or a browser that can receive push notifications. A device is uniquely identified by its app-specific unique token and the push provider identifier.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/DeviceRegistrationId"
          },
          "app_name": {
            "type": "string",
            "description": "The name of the `App` that the device registrations are for."
          },
          "contact_id": {
            "$ref": "#/components/schemas/ContactId"
          },
          "devices": {
            "type": "array",
            "minItems": 1,
            "maxItems": 50,
            "description": "List of devices registered in this set.",
            "items": {
              "$ref": "#/components/schemas/Device"
            }
          },
          "related": {
            "description": "A list of resources that are associated with this Device Registration.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          }
        },
        "required": [
          "app_name",
          "contact_id",
          "devices",
          "related",
          "tags"
        ]
      },
      "CredentialId": {
        "title": "CredentialId",
        "description": "A reference to Credential.",
        "type": "string",
        "pattern": "^comms_credential_[a-hjkmnpqrstv-z0-9]{26,34}",
        "example": "comms_credential_01h9krwprkeee8fzqspvwy6nq8"
      },
      "PushNotificationCredentialSender": {
        "title": "PushNotificationCredentialSender",
        "description": "For each supported provider, a `Credential.Id` can be provided.\n\nEnsure that the `Credential.credential_type`s of each `Credential`\nmatches the name of the respective fields.",
        "type": "object",
        "properties": {
          "fcm": {
            "$ref": "#/components/schemas/CredentialId"
          },
          "apn": {
            "$ref": "#/components/schemas/CredentialId"
          }
        },
        "additionalProperties": false
      },
      "PushNotificationPriority": {
        "title": "PushNotificationPriority",
        "description": "The priority of the Push Notification. A value of \"low\" reduces the client app battery consumption. A value of \"high\" sends the notification immediately and can wake up a sleeping device.",
        "type": "string",
        "enum": [
          "high",
          "low"
        ],
        "default": "high"
      },
      "PushNotificationSound": {
        "title": "PushNotificationSound",
        "type": [
          "string",
          "null"
        ],
        "description": "The name of the sound to be played for the push notification."
      },
      "PushNotificationStatus": {
        "title": "PushNotificationStatus",
        "description": "The status of a `Push Notification` resource. The status can be one of the following:\n- `scheduled` The `Push Notification`  is scheduled to be sent by\n  Twilio in the future.\n\n- `queued` The `Push Notification` is queued in Twilio for sending.\n- `sent` The `Push Notification` resource has been sent by Twilio.\n- `failed` The `Push Notification` resource processing failed inside Twilio.\n  Use `GET /PushNotifications/Operations/{operation_id}/Errors` for more details.\n\n- `canceled` The communication resource was canceled via API request.",
        "type": "string",
        "enum": [
          "scheduled",
          "queued",
          "sent",
          "failed",
          "canceled"
        ]
      },
      "PushNotificationBase": {
        "title": "PushNotificationBase",
        "type": "object",
        "description": "A push notification is a short, ephemeral message sent to an Android device, iOS device or web browser session.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/PushNotificationId"
          },
          "from": {
            "description": "The `credential_id` is used for authentication and authorization when sending the push notification through the respective channel.",
            "$ref": "#/components/schemas/PushNotificationCredentialSender"
          },
          "to": {
            "title": "PushNotificationRecipient",
            "type": "object",
            "properties": {
              "token": {
                "type": "string",
                "description": "Identifies a single device for delivering push notifications via the specified provider."
              },
              "provider": {
                "$ref": "#/components/schemas/PushNotificationProvider"
              },
              "contact_id": {
                "$ref": "#/components/schemas/ContactId"
              }
            },
            "required": [
              "token",
              "provider",
              "contact_id"
            ]
          },
          "app_name": {
            "$ref": "#/components/schemas/PushNotificationAppName"
          },
          "priority": {
            "$ref": "#/components/schemas/PushNotificationPriority"
          },
          "sound": {
            "$ref": "#/components/schemas/PushNotificationSound"
          },
          "related": {
            "description": "A list of resources that are associated with the Push Notification.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "status": {
            "$ref": "#/components/schemas/PushNotificationStatus"
          },
          "scheduled_for": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "to",
          "from",
          "app_name",
          "status",
          "related",
          "tags",
          "scheduled_for",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "PushNotificationMetadata": {
        "title": "PushNotificationMetadata",
        "type": "object",
        "description": "The PushNotificationMetadata provides information about the PushNotification. Does not include the Content.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PushNotificationBase"
          }
        ]
      },
      "AgentPoolIdSender": {
        "title": "AgentPoolIdSender",
        "description": "A reference to an AgentPool.",
        "type": "object",
        "properties": {
          "agent_pool_id": {
            "$ref": "#/components/schemas/AgentPoolId"
          }
        },
        "required": [
          "agent_pool_id"
        ]
      },
      "PushNotificationDirectRecipient": {
        "title": "PushNotificationDirectRecipient",
        "description": "A push notification token and provider",
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Identifies a single device for delivering push notifications via the specified provider."
          },
          "provider": {
            "$ref": "#/components/schemas/PushNotificationProvider"
          }
        },
        "required": [
          "token",
          "provider"
        ]
      },
      "PushNotificationClickAction": {
        "title": "PushNotificationClickAction",
        "description": "The activity to launch or URL to open upon clicking the push notification",
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL to open for the push notification.",
            "format": "uri"
          },
          "activity": {
            "type": "string",
            "description": "The activity to launch for the push notification."
          }
        }
      },
      "PushNotificationContentApnPassthrough": {
        "title": "PushNotificationContentApnPassthrough",
        "description": "APNs-specific passthrough properties for push notifications.",
        "type": "object",
        "properties": {
          "aps": {
            "title": "ApnPassthroughRoot",
            "type": "object",
            "description": "The root APNs aps object. Can be extended with any properties.",
            "additionalProperties": true
          }
        },
        "additionalProperties": true
      },
      "PushNotificationContentFcmPassthrough": {
        "title": "PushNotificationContentFcmPassthrough",
        "description": "FCM-specific passthrough properties for push notifications.",
        "type": "object",
        "properties": {
          "message": {
            "title": "FcmPassthroughRoot",
            "type": "object",
            "description": "The root FCM message object. Can be extended with any properties.",
            "additionalProperties": true
          }
        },
        "required": [
          "message"
        ]
      },
      "PushNotificationContentPassthrough": {
        "title": "PushNotificationContentPassthrough",
        "description": "Provider-specific passthrough properties for push notifications. Use this object to supply advanced options for APNs, FCM, or other providers.",
        "type": "object",
        "properties": {
          "apn": {
            "$ref": "#/components/schemas/PushNotificationContentApnPassthrough"
          },
          "fcm": {
            "$ref": "#/components/schemas/PushNotificationContentFcmPassthrough"
          }
        },
        "additionalProperties": false
      },
      "PushNotificationContentBody": {
        "title": "PushNotificationContentBody",
        "type": "object",
        "description": "Push Notification content with body.",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the push notification. Defaults to the app name.\n\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/). Specify `variables` with each recipient for personalization and `default_variables` for default values."
          },
          "body": {
            "type": "string",
            "description": "A simple string or templated content.\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/).\nSpecify `variables` with each recipient for personalization \nand `default_variables` for default values."
          },
          "click_action": {
            "$ref": "#/components/schemas/PushNotificationClickAction"
          },
          "provider_passthrough": {
            "$ref": "#/components/schemas/PushNotificationContentPassthrough"
          },
          "icon": {
            "type": "string",
            "description": "The code of the icon to display for the push notification."
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          }
        },
        "required": [
          "body"
        ]
      },
      "PushNotificationContentBodyWithImages": {
        "type": "object",
        "title": "PushNotificationContentBodyWithImages",
        "description": "A push notification content object with both body and images.",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the push notification. Defaults to the app name.\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/). Specify `variables` with each recipient for personalization  and `default_variables` for default values."
          },
          "body": {
            "type": "string",
            "description": "A simple string or templated content.\n\nThis field can be templated with [Liquid](https://shopify.github.io/liquid/).\nSpecify `variables` with each recipient for personalization \nand `default_variables` for default values."
          },
          "images": {
            "$ref": "#/components/schemas/ContentMediaInput"
          },
          "click_action": {
            "$ref": "#/components/schemas/PushNotificationClickAction"
          },
          "provider_passthrough": {
            "$ref": "#/components/schemas/PushNotificationContentPassthrough"
          },
          "icon": {
            "type": "string",
            "description": "The code of the icon to display for the push notification."
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          }
        },
        "required": [
          "body",
          "images"
        ]
      },
      "PushNotificationContentImages": {
        "title": "PushNotificationContentImages",
        "type": "object",
        "description": "Push Notification content with images.",
        "properties": {
          "images": {
            "$ref": "#/components/schemas/ContentMediaInput"
          },
          "title": {
            "type": "string",
            "description": "The title of the push notification. Defaults to the app name."
          },
          "click_action": {
            "$ref": "#/components/schemas/PushNotificationClickAction"
          },
          "provider_passthrough": {
            "$ref": "#/components/schemas/PushNotificationContentPassthrough"
          },
          "icon": {
            "type": "string",
            "description": "The code of the icon to display for the push notification."
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          }
        },
        "required": [
          "images"
        ]
      },
      "PushNotificationContentTemplate": {
        "title": "PushNotificationContentTemplate",
        "description": "A reference to a stored Content template  that can be used to generate content for a Push Notification.",
        "type": "object",
        "properties": {
          "content_id": {
            "$ref": "#/components/schemas/ContentId"
          },
          "default_variables": {
            "$ref": "#/components/schemas/DefaultVariables"
          }
        },
        "required": [
          "content_id"
        ]
      },
      "PushNotificationContentBodyResolved": {
        "title": "PushNotificationContentBodyResolved",
        "type": "object",
        "description": "A resolved push notification content object with body.",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the push notification. Defaults to the app name."
          },
          "body": {
            "type": "string",
            "description": "A simple content string."
          },
          "click_action": {
            "$ref": "#/components/schemas/PushNotificationClickAction"
          },
          "icon": {
            "type": "string",
            "description": "The code of the icon to display for the push notification."
          }
        },
        "required": [
          "title",
          "body"
        ]
      },
      "PushNotificationContentBodyWithImagesResolved": {
        "title": "PushNotificationContentBodyWithImagesResolved",
        "type": "object",
        "description": "A resolved push notification content object with both body and images.",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the push notification. Defaults to the app name."
          },
          "body": {
            "type": "string",
            "description": "A simple content string."
          },
          "images": {
            "$ref": "#/components/schemas/Media"
          },
          "click_action": {
            "$ref": "#/components/schemas/PushNotificationClickAction"
          },
          "icon": {
            "type": "string",
            "description": "The code of the icon to display for the push notification."
          }
        },
        "required": [
          "title",
          "body",
          "images"
        ]
      },
      "PushNotificationContentImagesResolved": {
        "title": "PushNotificationContentImagesResolved",
        "type": "object",
        "description": "A resolved push notification content object with images.",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the push notification. Defaults to the app name."
          },
          "text": {
            "type": "string",
            "description": "A simple content string."
          },
          "images": {
            "$ref": "#/components/schemas/Media"
          },
          "click_action": {
            "$ref": "#/components/schemas/PushNotificationClickAction"
          },
          "icon": {
            "type": "string",
            "description": "The code of the icon to display for the push notification."
          }
        },
        "required": [
          "title",
          "images"
        ]
      },
      "PushNotificationContentResolved": {
        "title": "PushNotificationContentResolved",
        "description": "The resolved content of the Push Notification.",
        "type": "object",
        "properties": {
          "content": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PushNotificationContentBodyResolved"
              },
              {
                "$ref": "#/components/schemas/PushNotificationContentBodyWithImagesResolved"
              },
              {
                "$ref": "#/components/schemas/PushNotificationContentImagesResolved"
              }
            ]
          }
        },
        "required": [
          "content"
        ]
      },
      "PushNotification": {
        "title": "PushNotification",
        "type": "object",
        "description": "A push notification is a short, ephemeral message sent to an Android device, iOS device or web browser session.",
        "allOf": [
          {
            "$ref": "#/components/schemas/PushNotificationBase"
          },
          {
            "$ref": "#/components/schemas/PushNotificationContentResolved"
          }
        ]
      },
      "PushNotificationOperationStats": {
        "title": "PushNotificationOperationStats",
        "type": "object",
        "example": {
          "total": 1,
          "recipients": 1,
          "queued": 0,
          "sent": 0,
          "scheduled": 0,
          "unaddressable": 0,
          "failed": 0,
          "canceled": 0
        },
        "description": "Represents the stats of a sending operation of one or many `Push Notifications`.\n- `total` is the total number of `Push Notifications` in the `Operation`.\n\n  * To get the status for each `Push Notification`, fetch the resource with:\n    `GET /PushNotifications/{push_notification_id}`.\n\n- `recipients` is the total number of recipients targeted in an Operation.\n- `unaddressable` is the number of recipients to which no sending attempts were made because\n  a valid token could not be found in the recipient's `Device Registration` set for the\n  `Credentials` or `App` provided.\n\n- `scheduled` is the number of `Push Notifications` that are scheduled to be sent by\n  Twilio in the future.\n\n- `queued` is the number of `Push Notifications` that are queued in Twilio for sending.\n- `sent` is the number of `Push Notifications` that have been sent by Twilio.\n- `failed` is the number of `Push Notifications` that failed during processing by Twilio.\n  Get `Errors` with `GET /PushNotifications/Operations/{operation_id}/Errors` fore more detail.\n\n- `canceled` is the number of `Push Notifications` that were canceled via API request.",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "recipients": {
            "type": "integer",
            "minimum": 0
          },
          "unaddressable": {
            "type": "integer",
            "minimum": 0
          },
          "scheduled": {
            "type": "integer",
            "minimum": 0
          },
          "queued": {
            "type": "integer",
            "minimum": 0
          },
          "sent": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          },
          "canceled": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "total",
          "recipients",
          "unaddressable",
          "scheduled",
          "queued",
          "sent",
          "failed",
          "canceled"
        ]
      },
      "PushNotificationOperation": {
        "title": "PushNotificationOperation",
        "type": "object",
        "description": "A Push Notification Operation represents the aggregate work to be completed for a POST request to the /PushNotifications endpoint.\nThe work maybe be performed asynchronously and the PushNotification Operation resource can be used to track the progress of the work.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OperationId"
          },
          "status": {
            "$ref": "#/components/schemas/CommunicationOperationStatus"
          },
          "stats": {
            "$ref": "#/components/schemas/PushNotificationOperationStats"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "stats",
          "created_at",
          "updated_at"
        ]
      },
      "PushCredentialType": {
        "title": "PushCredentialType",
        "description": "The credential types available for PushNotifications.",
        "type": "string",
        "enum": [
          "apn",
          "apn_sandbox",
          "fcm"
        ]
      },
      "AccountPushCredentialFlag": {
        "title": "AccountPushCredentialFlag",
        "description": "Use this Credential as the default for the Push Notification `App` for the\n  given `credential_type` to send Push Notifications. \nIf a Credential of the given type doesn't already exist, \n  this Credential automatically becomes the default.",
        "type": "boolean",
        "default": false
      },
      "PushNotificationCredential": {
        "title": "PushNotificationCredential",
        "type": "object",
        "description": "Credential properties are specific to the channel type and provided by the vendor that supports it.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CredentialId"
          },
          "credential_type": {
            "$ref": "#/components/schemas/PushCredentialType"
          },
          "is_default": {
            "$ref": "#/components/schemas/AccountPushCredentialFlag"
          },
          "app_name": {
            "type": "string",
            "description": "The name of the app that this Credential is associated with.\nThis should be the same value as the `app_name` set when registering devices for the app\nwith `/PushNotifications/DeviceRegistrations`"
          },
          "related": {
            "description": "A list of resources that are associated with this Credential.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "credential_type",
          "is_default",
          "app_name",
          "related",
          "tags",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "ApnCertificatePushCredential": {
        "title": "ApnCertificatePushCredential",
        "description": "Certificate-based credentials are used to authenticate with the APN service before sending a Notification.  It can be acquired from the Apple Developer Portal. Note that certificates have an expiration date and need to be renewed before they expire. Alternatively, you can use APN Signing Key credentials.",
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "format": "byte",
            "description": "The base64 representation of the certificate. Strip everything outside of the headers,  e.g. `-----BEGIN CERTIFICATE-----MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END CERTIFICATE-----` and encode with base64 encoding."
          },
          "private_key": {
            "type": "string",
            "format": "byte",
            "description": "The base64 representation of the private key. Strip everything outside of the headers,  e.g. `-----BEGIN RSA PRIVATE KEY-----MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\\n.-----END RSA PRIVATE KEY-----` and encode with base64 encoding."
          }
        },
        "required": [
          "private_key",
          "certificate"
        ]
      },
      "ApnSigningKeyPushCredential": {
        "title": "ApnSigningKeyPushCredential",
        "description": "APN Signing Key credentials are alternative to APN Certificate credentials.  COMMS API uses this signing key to create a short-lived JSON Web Token (JWT) that is used to authenticate with the APN service before sending a Notification. Signing Key can be acquired from the Apple Developer Portal.",
        "type": "object",
        "properties": {
          "key_id": {
            "type": "string",
            "description": "A 10-character string with the Key Id. It can be obtained from the Apple Developer Portal under the particular private key used to sign the push notification."
          },
          "signing_key": {
            "type": "string",
            "format": "byte",
            "description": "An authentication token signing key, specified as a text file (with a .p8 file extension) that can be downloaded from the Apple Developer Portal.  Paste the base64 encrypted content of the file here."
          }
        },
        "required": [
          "key_id",
          "signing_key"
        ]
      },
      "FcmPushCredential": {
        "title": "FcmPushCredential",
        "description": "FCM credentials are used to authenticate with the Firebase Cloud Messaging service before sending a Notification. COMMS API uses this private key to authenticate with the FCM service before sending a Notification.",
        "type": "object",
        "properties": {
          "private_key": {
            "type": "string",
            "format": "byte",
            "description": "The `private_key` field is a JSON object that contains the Google Cloud private key, generated with minimal privileges,  specifically for Cloud Messaging on the Google Cloud Platform. It is recommended to follow the principle of least privilege  when generating this key to ensure security and limit potential misuse. The Google Cloud private key is in a JSON format and must be encoded with base64 before sending."
          }
        },
        "required": [
          "private_key"
        ],
        "additionalProperties": false
      },
      "PushCredentialContent": {
        "title": "PushCredentialContent",
        "description": "Credential properties are specific to the channel type and provided by the vendor that supports it.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ApnCertificatePushCredential"
          },
          {
            "$ref": "#/components/schemas/ApnSigningKeyPushCredential"
          },
          {
            "$ref": "#/components/schemas/FcmPushCredential"
          }
        ]
      },
      "PushNotificationAppDefaultCredential": {
        "title": "PushNotificationAppDefaultCredential",
        "type": "object",
        "description": "The default Credential for a `credential_type` (provider) for a Push Notification `App`",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/CredentialId"
          },
          "credential_type": {
            "$ref": "#/components/schemas/PushCredentialType"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "credential_type",
          "created_at",
          "updated_at"
        ]
      },
      "PushNotificationApp": {
        "title": "PushNotificationApp",
        "description": "",
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the `App`. This is the unique identifier of the `App`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/PushNotificationAppName"
              }
            ]
          },
          "is_default": {
            "type": "boolean",
            "description": "Whether this `App` is the default (Push Notification) App for the Account.\nThe first `App` auto-created is automatically set as the default.\nTo update the default `App`, use `PATCH /PushNotifications/Apps/{app_name}`."
          },
          "default_credentials": {
            "type": "array",
            "description": "The default Credentials for this `App`.",
            "items": {
              "$ref": "#/components/schemas/PushNotificationAppDefaultCredential"
            }
          },
          "related": {
            "description": "A list of resources that are associated with the App.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedResource"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "is_default",
          "default_credentials",
          "related",
          "tags",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "AgentCommunicationChannel": {
        "description": "The medium which a unit of communication is transmitted through.\nThese are differentiated by a mix of transmission protocol, network controller/owner, endpoint and address model,\nas well as the model for content of the atomic unit of communication itself.",
        "title": "AgentCommunicationChannel",
        "type": "string",
        "enum": [
          "sms",
          "rcs",
          "email",
          "whatsapp",
          "push"
        ]
      },
      "AgentCommunicationChannelControl": {
        "title": "AgentChannelControl",
        "description": "Define controls to filter and prioritize Agents based on their `channel`.",
        "type": "object",
        "properties": {
          "filter_in": {
            "title": "AgentChannelControlFilterIn",
            "description": "A list of eligible channels to constrain `Agent` resolution to;\nleave undefined to send across all available channels.\n\nWarning: If there is no viable path from any `Agent` to a recipient resulting from\nthis filter, no communication will be sent to the recipient(s)!",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentCommunicationChannel"
            },
            "uniqueItems": true
          },
          "priority": {
            "title": "AgentChannelControlPriority",
            "description": "A list of channels and their priority for use. \nLowest numeric value is highest priority.",
            "type": "array",
            "items": {
              "title": "AgentChannelControlPriorityItem",
              "description": "A channel and its priority.",
              "type": "object",
              "properties": {
                "channel": {
                  "$ref": "#/components/schemas/AgentCommunicationChannel"
                },
                "priority": {
                  "type": "integer",
                  "description": "The priority of the channel. Lower values indicate higher priority.\nFor example, a value of `0` indicates the highest priority channel."
                }
              },
              "required": [
                "channel",
                "priority"
              ]
            }
          }
        }
      },
      "CommunicationAgentPoolIdSender": {
        "title": "CommunicationAgentPoolIdSender",
        "description": "Allows sending across multiple channels using the Agents in the specified Agent Pool.\n\nTwilio will automatically pick the best channel and Agent for each recipient and handle fallbacks.",
        "type": "object",
        "properties": {
          "agent_pool_id": {
            "$ref": "#/components/schemas/AgentPoolId"
          },
          "channels": {
            "$ref": "#/components/schemas/AgentCommunicationChannelControl"
          }
        },
        "required": [
          "agent_pool_id"
        ]
      },
      "CommunicationRecipient": {
        "title": "CommunicationRecipient",
        "type": "object",
        "properties": {
          "address": {
            "description": "The identifier within a channel address space for an actor (e.g. phone number)",
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/CommunicationChannel"
          }
        },
        "required": [
          "address",
          "channel"
        ]
      },
      "CommunicationId": {
        "title": "CommunicationId",
        "description": "A reference to a `Message`, `Email`, or `PushNotification`.",
        "type": "string",
        "pattern": "^(?:comms_message_[0-7][a-hjkmnpqrstv-z0-9]{25,34}|comms_email_[0-7][a-hjkmnpqrstv-z0-9]{25,34}comms_push_notification_[0-7][a-hjkmnpqrstv-z0-9]{25,34})$",
        "example": "comms_message_01h9krwprkeee8fzqspvwy6nq8"
      },
      "CommunicationOperationStats": {
        "title": "CommunicationOperationStats",
        "type": "object",
        "example": {
          "total": 1,
          "recipients": 1,
          "attempts": 1,
          "queued": 0,
          "sent": 0,
          "scheduled": 0,
          "delivered": 0,
          "opened": 0,
          "read": 0,
          "undelivered": 0,
          "unaddressable": 0,
          "failed": 0,
          "canceled": 0
        },
        "description": "Represents the stats of a sending operation of one or many communications resources (Messages, Emails, PushNotifications).\n- `total` is the total number of communications resources in the `Operation`.\n\n  * To get the status for each individual communication, fetch the communication resource e.g.\n    `GET /Messages/{message_id}`.\n\n  * For group communications, where there is more than one recipient per communication resource\n    use `Receipts` e.g. `GET /Messages/{message_id}/Receipts`.\n\n- `recipients` is the total number of recipients targeted in an Operation.\n- `unaddressable` is the number of recipients to which no sending attempts were made because\n  a valid match could not be found between the available addresses for the recipient (`to`)\n  and sender (`from`).\n\n- `scheduled` is the number of communications resources that are scheduled to be sent by\n  Twilio in the future.\n\n- `queued` is the number of communications resources that are queued in Twilio for sending.\n- `sent` is the number of communications resources that have been sent by Twilio.\n- `delivered` is the number of communications resources that have been successfully\n    delivered to the recipient.\n\n- `opened` is the number of communications resources that have been opened by unique recipients.\n    Only `Emails` will add to this count. \n\n- `read` is the number of communications resources that have been read by unique recipients.\n      Only `Messages` will add to this count.\n\n- `undelivered` is the number of communications resources that were successfully sent by Twilio\n  but have not been delivered to the recipient.\n\n- `failed` is the number of communications resources that failed during processing by Twilio.\n  Review the `error` field on the communication resource for more details.\n\n- `canceled` is the number of communications resources that were canceled via API request.",
        "properties": {
          "total": {
            "type": "integer",
            "minimum": 0
          },
          "recipients": {
            "type": "integer",
            "minimum": 0
          },
          "attempts": {
            "type": "integer",
            "minimum": 0
          },
          "queued": {
            "type": "integer",
            "minimum": 0
          },
          "sent": {
            "type": "integer",
            "minimum": 0
          },
          "scheduled": {
            "type": "integer",
            "minimum": 0
          },
          "delivered": {
            "type": "integer",
            "minimum": 0
          },
          "opened": {
            "type": "integer",
            "minimum": 0
          },
          "read": {
            "type": "integer",
            "minimum": 0
          },
          "undelivered": {
            "type": "integer",
            "minimum": 0
          },
          "unaddressable": {
            "type": "integer",
            "minimum": 0
          },
          "failed": {
            "type": "integer",
            "minimum": 0
          },
          "canceled": {
            "type": "integer",
            "minimum": 0
          }
        },
        "required": [
          "total",
          "recipients",
          "unaddressable",
          "queued",
          "sent",
          "scheduled",
          "delivered",
          "opened",
          "read",
          "failed",
          "undelivered",
          "canceled"
        ]
      },
      "CommunicationOperation": {
        "title": "CommunicationOperation",
        "type": "object",
        "description": "An Communication Operation represents the aggregate work to be completed for a POST request to the /Communications endpoint.\nThe work maybe be performed asynchronously and the Communication Operation resource can be used to track the progress of the work.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OperationId"
          },
          "status": {
            "$ref": "#/components/schemas/CommunicationOperationStatus"
          },
          "stats": {
            "$ref": "#/components/schemas/CommunicationOperationStats"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "stats",
          "created_at",
          "updated_at"
        ]
      },
      "AgentStatus": {
        "title": "AgentStatus",
        "description": "The status of an Agent.\nIf an Agent is `activated`, it is available to send and receive communications.\nIf an Agent is `deactivated`, it is not available to send or receive communications.",
        "type": "string",
        "enum": [
          "activated",
          "deactivated"
        ]
      },
      "Agent": {
        "title": "Agent",
        "description": "an Agent is a sending and receiving communication identity associated with a Twilio application.\nFor 'outbound' communications, it is used as the sender of the communication in the 'from' field.\nFor 'inbound' communications (sent by a Contact/end-user), it is used as the recipient and populated in the 'to' field.\nAn Agent represents existing inventory created and setup in other Twilio APIs, such as Phone Numbers.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AgentId"
          },
          "display_name": {
            "type": [
              "string",
              "null"
            ],
            "description": "The name associated with the address inventory.\n\nIt may be visible to your communication recipients for some types of communications like `Email`.\n\nTo modify this value refer to the Twilio APIs that govern the type of inventory.\n\nFor an `Agent` with channel `email`, use the `EmailSenders` API to modify this value."
          },
          "address": {
            "type": "string",
            "description": "The identifier within a channel address space for an actor (e.g. phone number)"
          },
          "channel": {
            "$ref": "#/components/schemas/AgentCommunicationChannel"
          },
          "status": {
            "$ref": "#/components/schemas/AgentStatus"
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "display_name",
          "address",
          "channel",
          "status",
          "tags",
          "updated_at",
          "created_at"
        ]
      },
      "AgentPool": {
        "title": "AgentPool",
        "description": "An AgentPool is a set of sending (and receiving) identities associated with a Twilio application.\nIt can contain one or more Agents for use in multi-channel use-cases or to achieve pooling functionalities.\nFor 'outbound' communications, it is used as the sender of the communication in the 'from' field.\nFor 'inbound' communications (sent by an Contact/end-user), it is used as the recipient, and populated in the 'to' field.",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AgentPoolId"
          },
          "name": {
            "type": "string"
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "name",
          "tags",
          "created_at",
          "updated_at"
        ]
      },
      "AgentPoolOperation": {
        "title": "AgentPoolOperation",
        "type": "object",
        "description": "An AgentPool Operation represents the aggregate work to be completed when creating and modifying AgentPools by adding or removing Agents.\nThe work maybe be performed asynchronously and the Agent Pool Operation resource can be used to track the progress of the work.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OperationId"
          },
          "status": {
            "$ref": "#/components/schemas/OperationStatus"
          },
          "stats": {
            "title": "AgentPoolOperationStats",
            "type": "object",
            "properties": {
              "total": {
                "type": "integer",
                "minimum": 0
              },
              "queued": {
                "type": "integer",
                "minimum": 0
              },
              "created": {
                "type": "integer",
                "minimum": 0
              },
              "failed": {
                "type": "integer",
                "minimum": 0
              }
            },
            "required": [
              "total",
              "queued",
              "created",
              "failed"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "status",
          "stats",
          "created_at",
          "updated_at"
        ]
      },
      "DomainName": {
        "title": "DomainName",
        "description": "A fully qualified domain name (FQDN) that you have registered with your DNS provider.",
        "type": "string",
        "format": "hostname",
        "example": "example.com"
      },
      "DomainCapabilityLinks": {
        "title": "DomainCapabilityLinks",
        "description": "The Domain capability for wrapping links in communication content with branded and shortened links (where applicable) and with click tracking support.",
        "type": "object",
        "properties": {
          "type": {
            "title": "DomainCapabilityLinksType",
            "description": "The 'links' type of Domain capability",
            "const": "links"
          },
          "is_default": {
            "description": "Whether this Domain is the default for the type of capability for the account.",
            "type": "boolean"
          },
          "fallback_url": {
            "description": "The URL to redirect end-users to if they click an expired branded link. Defaults to the root domain.",
            "type": "string",
            "format": "uri"
          }
        },
        "required": [
          "type"
        ]
      },
      "DomainCapabilityLinksResolved": {
        "title": "DomainCapabilityLinksResolved",
        "description": "The Domain capability for wrapping links in communication content with branded and shortened links (where applicable) and with click tracking support.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DomainCapabilityLinks"
          },
          {
            "title": "DomainCapabilityLinksCertificate",
            "type": "object",
            "properties": {
              "certificate": {
                "title": "LinksCertificateMetadata",
                "type": "object",
                "description": "The metadata for SSL certificate auto-provisioning. \n- Twilio will auto-provision an SSL certificate for serving branded https links with your\n`Domain`. \n- The certificate will be automatically renewed and managed by Twilio.\n- Check the `status` and `error` fields for the current state of the certificate.",
                "properties": {
                  "status": {
                    "description": "The current status of the SSL certificate auto-provisioning.\n  - `provisioned` - The certificate is successfully provisioned and active.\n  - `provisioning` - The certificate is in the process of being provisioned.\n  - `renewal_failed` - The certificate renewal failed. \n      If this continues, the certificate will expire at `expires_at`. \n        Check `error` for more info.\n  - `expired` - The certificate has expired because auto-renewal failed.\n  - `failed` - The certificate provisioning failed. \n    Check `error` for more info.",
                    "type": "string",
                    "enum": [
                      "provisioned",
                      "provisioning",
                      "renewal_failed",
                      "failed"
                    ]
                  },
                  "expires_at": {
                    "description": "The date and time the certificate will expire.",
                    "type": [
                      "string",
                      "null"
                    ],
                    "format": "date-time"
                  },
                  "error": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TwilioErrorNullable"
                      }
                    ]
                  }
                },
                "required": [
                  "status",
                  "expires_at",
                  "error"
                ]
              }
            }
          }
        ],
        "required": [
          "type",
          "is_default",
          "certificate",
          "fallback_url"
        ]
      },
      "DomainDNSRecord": {
        "title": "DomainDNSRecord",
        "type": "object",
        "description": "A DomainDNSRecord is used to configure the DNS records for a domain with your DNS provider.",
        "properties": {
          "role": {
            "type": "string",
            "description": "- `verification`: Used by Twilio to verify that you have control of the domain name.\n- `links`: Enables all links in your communications with Click Tracking enabled to use your domain in the URL instead of twilio.com.  Click Tracking allows you to have Twilio wrap links contained in your communications so that you can track when a Contact clicks on a link.\n- `dkim`: DomainKeys Identified Mail (DKIM) allows the receiver to check that an email that claimed to have come from a specific domain was indeed authorized by the owner of that domain.  Enables Twilio to manage DKIM signing for your domain. Supports the `email` capability.\n- `dmarc`: Domain-based Message Authentication, Reporting, and Conformance (DMARC) is an email authentication protocol that is built on top of SPF and DKIM.  Supports the `email` capability.\n- `spf`: Sender Policy Framework (SPF) is an email authentication method designed to detect forging sender addresses during the delivery of the email.  Enables Twilio to manage SPF for your domain. Supports the `email` capability.",
            "enum": [
              "verification",
              "links",
              "dkim",
              "dmarc",
              "spf"
            ]
          },
          "type": {
            "title": "DomainDNSRecordType",
            "type": "string",
            "description": "The type of DNS record. Valid values are `txt`, `cname`, and `a`.",
            "enum": [
              "txt",
              "cname",
              "a"
            ]
          },
          "host": {
            "type": "string",
            "description": "The host name for the DNS record. This is the value of the 'host' field in the DNS record that you will add to your domain with your DNS provider."
          },
          "value": {
            "type": "string",
            "description": "The value for the DNS record. This is the value of the 'value' field in the DNS record that you will add to your domain with your DNS provider."
          },
          "is_verified": {
            "type": "boolean",
            "description": "The verification status of the DNS record. A Domain must be verified before it can be used to send Email or to wrap links contained in your communications when using click tracking.",
            "default": false
          },
          "last_verify_attempt_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time that Twilio last attempted to verify this DNS record. This field is null if no attempt has been made to verify the DNS record."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the `value` field was last updated."
          }
        },
        "required": [
          "type",
          "host",
          "value",
          "is_verified",
          "last_verify_attempt_at",
          "updated_at"
        ]
      },
      "Domain": {
        "title": "Domain",
        "type": "object",
        "description": "A Domain can be used to send Email and to wrap links contained in your communications when using click tracking. It references a domain name that you control and contains the unique values needed to be configured as DNS records with your DNS provider so that you can use your domain with Twilio.",
        "properties": {
          "domain_name": {
            "description": "The domain name that you control for your web property. This is the domain name that you will add records for with your DNS provider.",
            "$ref": "#/components/schemas/DomainName"
          },
          "sub_domains": {
            "title": "DomainSubDomains",
            "type": "array",
            "description": "The subdomains of the Domain. For example, the subdomains of `example.com` are `sub1.example.com` and `sub2.example.com`.",
            "items": {
              "title": "DomainSubDomain",
              "type": "object",
              "properties": {
                "domain_name": {
                  "$ref": "#/components/schemas/DomainName"
                },
                "capabilities": {
                  "title": "DomainSubDomainCapabilities",
                  "type": "array",
                  "description": "The capabilities that the sub-domain has been configured for.",
                  "items": {
                    "title": "DomainSubDomainCapabilitiesItem",
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/DomainCapabilityLinksResolved"
                      }
                    ]
                  }
                }
              },
              "required": [
                "domain_name",
                "capabilities"
              ]
            }
          },
          "is_ownership_verified": {
            "type": "boolean",
            "description": "Whether the Domain has been verified as being owned by you via DNS verification. This is required before you can use the Domain with Twilio.",
            "default": false
          },
          "capabilities": {
            "title": "DomainCapabilities",
            "type": "array",
            "description": "The capabilities that the Domain has been configured for.",
            "items": {
              "title": "DomainCapabilitiesItem",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/DomainCapabilityLinksResolved"
                }
              ]
            }
          },
          "dns": {
            "type": "array",
            "description": "The DNS records that you need to configure with your DNS provider to support the listed `capabilities` of the Domain.",
            "items": {
              "$ref": "#/components/schemas/DomainDNSRecord"
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the Domain was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the Domain was last updated."
          },
          "deleted_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The date and time the Domain was deleted."
          }
        },
        "required": [
          "domain_name",
          "is_ownership_verified",
          "capabilities",
          "sub_domains",
          "dns",
          "created_at",
          "updated_at",
          "deleted_at"
        ]
      },
      "LinkId": {
        "description": "A reference to a Link.",
        "title": "LinkId",
        "type": "string",
        "pattern": "^comms_link_[0-7][a-hjkmnpqrstv-z0-9]{25,34}",
        "minLength": 37,
        "maxLength": 46,
        "example": "comms_link_01h9krwprkeee8fzqspvwy6nq8"
      },
      "Link": {
        "title": "Link",
        "type": "object",
        "description": "A Link is a short URL that can be used to redirect to a long URL.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/LinkId",
            "description": "The unique identifier for the Link."
          },
          "wrapped_url": {
            "type": "string",
            "description": "The short URL for the Link."
          },
          "original_url": {
            "type": "string",
            "description": "The long URL for the Link."
          },
          "operation_id": {
            "$ref": "#/components/schemas/OperationId",
            "description": "The operation id for the Link."
          },
          "contact_id": {
            "$ref": "#/components/schemas/ContactId",
            "description": "The contact id for the Link."
          },
          "communication_id": {
            "$ref": "#/components/schemas/CommunicationId",
            "description": "The communication id for the Link."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time the Link was created."
          },
          "expires_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time",
            "description": "The date and time the Link will expire."
          }
        },
        "required": [
          "id",
          "wrapped_url",
          "original_url",
          "communication_id",
          "operation_id",
          "contact_id",
          "created_at",
          "expires_at"
        ]
      }
    },
    "responses": {
      "Http400Response": {
        "description": "This error indicates that the request content was malformed or ambiguous.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioErrors"
            },
            "examples": {
              "ResourceNotFound": {
                "summary": "Resource not found",
                "value": {
                  "errors": [
                    {
                      "code": 20404,
                      "message": "Not Found",
                      "info_url": "https://www.twilio.com/docs/api/errors/20404",
                      "context": "null"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "Http429Response": {
        "description": "This error indicates that you have sent too many requests to the API. You should retry according to the `Retry-After` response header.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioErrors"
            },
            "examples": {
              "TooManyRequests": {
                "summary": "Too Many Requests",
                "value": {
                  "errors": [
                    {
                      "code": 20429,
                      "message": "Too many requests. Please retry according to the Retry-After response header.",
                      "info_url": "https://www.twilio.com/docs/api/errors/20429",
                      "context": "null"
                    }
                  ]
                }
              }
            }
          }
        },
        "headers": {
          "Retry-After": {
            "schema": {
              "type": "string"
            },
            "description": "The amount of time in seconds that the customer should wait before issuing a new request towards the API."
          }
        }
      },
      "Http500Response": {
        "description": "This error indicates that the Twilio API is experiencing server-side issues. The request should not be retried.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioErrors"
            },
            "examples": {
              "InternalServerError": {
                "summary": "Internal Server Error",
                "value": {
                  "errors": [
                    {
                      "code": 20500,
                      "message": "Internal server error.",
                      "info_url": "https://www.twilio.com/docs/api/errors/20500",
                      "context": "null"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "Http503Response": {
        "description": "This error indicates that the Twilio API is temporarily unavailable.  You should retry according to the `Retry-After` response header.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioErrors"
            },
            "examples": {
              "ServiceUnavailable": {
                "summary": "Service Unavailable",
                "value": {
                  "errors": [
                    {
                      "code": 20503,
                      "message": "Service unavailable.",
                      "info_url": "https://www.twilio.com/docs/api/errors/20503",
                      "context": "null"
                    }
                  ]
                }
              }
            }
          }
        },
        "headers": {
          "Retry-After": {
            "schema": {
              "type": "string"
            },
            "description": "The amount of time in seconds that the customer should wait before issuing a new request towards the API."
          }
        }
      },
      "Http202ResponseWithOperation": {
        "description": "The request was accepted and an Operation was created to track its progress. The response headers contain the Id and link to the Operation resource.",
        "headers": {
          "Operation-Location": {
            "$ref": "#/components/headers/OperationLocation"
          },
          "Operation-Id": {
            "$ref": "#/components/headers/OperationId"
          }
        }
      },
      "Http404Response": {
        "description": "This error indicates that the requested resource was not found.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TwilioErrors"
            },
            "examples": {
              "ResourceNotFound": {
                "summary": "404 Response",
                "value": {
                  "errors": [
                    {
                      "code": 20404,
                      "message": "The resource was not found.",
                      "info_url": "https://www.twilio.com/docs/api/errors/20404",
                      "context": "null"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "Http202ResponseWithResource": {
        "description": "The request was accepted and a resource identifier is available to check the result. The response headers contain the identifier and link to the resource.",
        "headers": {
          "Resource-Location": {
            "$ref": "#/components/headers/ResourceLocation"
          },
          "Resource-Id": {
            "$ref": "#/components/headers/ResourceId"
          }
        }
      }
    },
    "headers": {
      "OperationLocation": {
        "schema": {
          "type": "string",
          "format": "uri"
        },
        "description": "The location (uri) of the Operation resource identified by `Operation-Id`."
      },
      "OperationId": {
        "schema": {
          "$ref": "#/components/schemas/OperationId"
        },
        "description": "Th Operation Id is an identifier that can be used to correlate all of the resources created in a request.\nIssue a GET request to the resource list location, using the Operation Id as a filter\nto retrieve a list of the created resources and an aggregate status."
      },
      "ResourceLocation": {
        "schema": {
          "type": "string",
          "format": "uri"
        },
        "description": "The location (uri) of the resource identified by `Resource-Id`."
      },
      "ResourceId": {
        "schema": {
          "type": "string"
        },
        "description": "Th Resource Id is an identifier for the resource that was created or updated\n  in response to the request.\n\nUse the `Resource-Location` header to retrieve the resource."
      }
    }
  }
}
